{"0": {
    "doc": "0x03 - Analyzing BLE",
    "title": "Analyzing BLE",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#analyzing-ble",
    "relUrl": "/pages/guides/radio/ble.html#analyzing-ble"
  },"1": {
    "doc": "0x03 - Analyzing BLE",
    "title": "1. Bluetooth Low Energy (BLE) internals",
    "content": ". | Attribute Protocol (ATT) . | defines the client/server protocol for data exchange | . | Generic Attribute Profile (GATT) . | handles the entire exchange of all user data and profile information in a BLE connection | . | Generic Access Profile(GAP) . | responsible for all the discovery and related aspects in any BLE network | . | Profile . | Specifies data stored on a device for a BLE connection | Profile 1 . | Service A (i.e. Hearth rete in UUID format) . | Characteristic . | Value | Descriptor | . | Characteristic . | Value | Descriptor | . | . | Service B (i.e. Blood pressure in UUID format) . | Characteristic . | Value | Descriptor | . | Characteristic . | Value | Descriptor | . | . | . | Profile 2 . | … | . | . | Service . | Structure . | attr handle | (first handle id for the service) | . | end grp handle | (last handle id for the service) | . | uuid | (first 8-digit from left hand side specifies service name) | . | All UUIDs and corresponding service names . | Bluetooth SIG documentation https://www.bluetooth.com/specifications/gatt/services | custom servises are not defined in here | . | . | Characteristics . | Structure . | handle | char properties | char value handle | uuid | . | Value:Descriptor is a hex encoded ASCII data | . | BLE authentication (association process) . | Broadcaster device . | broadcast to announce availability | collect and monitor data | . | Observer device . | observe broadcasts | if it is an interested broadcast, send a connection request to the peripheral | . | Peripheral device . | if peripheral accepts the request, observer and peripheral are connected | based on the pairing mechanism | data transmission starts each other | . | . | Pairing mechanisms (Pairing encryption) . | JustWorks (JW) . | without display or small display without keyboard | key is 000000 | . | Numeric comparison . | shows the same number on both devices | asks for yes or no | . | Passkey . | 6-digit passcode | (easy to brute force) | . | Out of band . | shares the pin using an out of band channel like NFC | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#1-bluetooth-low-energy-ble-internals",
    "relUrl": "/pages/guides/radio/ble.html#1-bluetooth-low-energy-ble-internals"
  },"2": {
    "doc": "0x03 - Analyzing BLE",
    "title": "2. BLE pentest objectives",
    "content": ". | Sniffing | Reading | Modifying characteristics (change behavior of the device by remotely controlling) | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#2-ble-pentest-objectives",
    "relUrl": "/pages/guides/radio/ble.html#2-ble-pentest-objectives"
  },"3": {
    "doc": "0x03 - Analyzing BLE",
    "title": "3. Interacting with BLE devices",
    "content": ". | Plug in BLE adapter dongle on analysis computer | Get Blootooth Address (BD_ADDR) . hciconfig . | Search for BLE devices around (via hcitool or Blue Hydra) . hcitool lescan . | Connect to target beacon (via Gatttool utility) . gatttool -I -b &lt;beacon address&gt; . | List the BLE services . primary . | List the service characteristics . characteristics . | Read characteristics value and descriptor . char-read-hnd &lt;char value handle&gt; . | Decode hex to ASCII | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#3-interacting-with-ble-devices",
    "relUrl": "/pages/guides/radio/ble.html#3-interacting-with-ble-devices"
  },"4": {
    "doc": "0x03 - Analyzing BLE",
    "title": "4. Modify data",
    "content": ". | In order to modify something, functionality of the device is well-understand | Then how these functionality is stored on device as values are identified | Example I . | BLE devices disconnects from mobile application in every X seconds | Then re-connects again, this mechanism is known as heart-beat | If heartbeat does not happen, a notification appears or sound triggered | Attacker may want to modify the connection time to unlimited | Therefore mobile app will not identify BLE device is stolen or broken | . | Example II . | mobile app tracks the distance of an object | if it goes across the range, mobile app makes a buzzer | attacker may want to prevent buzzer not to notice owner | . | List all handles . chr-desc &lt;attr handle&gt; &lt;end group handle&gt; . | Check for Bluetooth SIG documentation (to understand functionality) . | identify services defined by manufacturers and by SIG | . | Read characteristics value and descriptor . char-read-hnd &lt;char value handle&gt; . | Update characteristics value and descriptor . char-write-hnd &lt;char value handle&gt; &lt;a char value same as to original format&gt; . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#4-modify-data",
    "relUrl": "/pages/guides/radio/ble.html#4-modify-data"
  },"5": {
    "doc": "0x03 - Analyzing BLE",
    "title": "5. Sniffing BLE traffic",
    "content": ". | In order to understand the functionality of services defined by manufacturers . | sniff the BLE traffic | press any buttons of the device to capture functionality | . | Ubertooth One . | download and install ubertooth utility | sniff traffic . ubertooth-btle -f -t &lt;target device BD_ADDR&gt; . | sniff traffic and dump into a pcap file . ubertooth-btle -f -t &lt;target device BD_ADDR&gt; - c ble-dump.pcap . | Relevant data . | Access address (AA) | used to manage link layer | . | Channel Index | dedicated advertising channel | . | Packet PDU Type | ADV_IND ADV_DIRECT_IND ADV_NONCONN_IND ADV_SCAN_IND SCAN_REQ SCAN_RSP CONNECT_REQ | . | AdvA | 6-byte advertising address (usually BD_ADDR of the device) | . | ScanA | 6-byte scanner address | . | Advertising PDUs . | ADV_IND | Connectable Undirected Advertising | . | ADV_DIRECT_IND | Connectable Directed Advertising | . | ADV_NONCONN_IND | Non-Connectable Undirected Advertising | . | ADV_SCAN_IND | Scannable Undirected Advertising | . | Scanning PDUs . | SCAN_REQ | Scan request from the mobile app | . | SCAN_RSP | Scan response from the target device | . | Initiating PDUs . | CONNECT_REQ | Connection request | . | Wireshark . | set DLT_USER (in Preferences &gt; Protocols) to btle | filter only ATT packets . btl2cap.cid==0x004 . | set DLT_USER (in Preferences &gt; Protocols) to btle | filter Write requests . | find the data is written to which Handle | . | examine the interested packet containing write request . | BLE Link Layer | Bluetooth Attribute Protocol . | Understand Value field | . | . | compare Value field of different packets to identify which bits change . | the changed field are the user actions | . | determine your Value | . | Replay packet . | BTLEJuice utility (web GUI) . | sniffs/modifies/replays BLE packets | . | . | Write the value to the device . | gatttool “char-write-req” | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#5-sniffing-ble-traffic",
    "relUrl": "/pages/guides/radio/ble.html#5-sniffing-ble-traffic"
  },"6": {
    "doc": "0x03 - Analyzing BLE",
    "title": "0x03 - Analyzing BLE",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html",
    "relUrl": "/pages/guides/radio/ble.html"
  },"7": {
    "doc": "Bluetooth",
    "title": "Bluetooth Primer",
    "content": "Here is a pretty good primer on the fundamentals of Bluetooth. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#bluetooth-primer",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#bluetooth-primer"
  },"8": {
    "doc": "Bluetooth",
    "title": "Bluetooth MITM",
    "content": "Bluetooth can be intercepted with a couple of Bluetooth USB dongles and software such as GATTacker or BtleJuice, as detailed in Melamed, An active man-in-the-middle attack on bluetooth smart devices, 2018 and Melamed, Hack-a-ble: Hacking BLE Smart Devices, 2017. We can also use the Ubertooth One to intercept Bluetooth signals from your target. Bluetooth comes in two flavors, Bluetooth Classic and Bluetooth Low Energy (BLE). Here is a pretty good video introduction to BLE. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#bluetooth-mitm",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#bluetooth-mitm"
  },"9": {
    "doc": "Bluetooth",
    "title": "SwaynTooth",
    "content": "Some interesting new vulnerabilities were discovered in February 2020. More information here: https://asset-group.github.io/disclosures/sweyntooth/ . ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#swayntooth",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#swayntooth"
  },"10": {
    "doc": "Bluetooth",
    "title": "Bluetooth",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html",
    "relUrl": "/pages/guides/Wireless/bluetooth.html"
  },"11": {
    "doc": "Books",
    "title": "Books",
    "content": "List of the available books in the lab. | The Basics of Hacking and Penetration Testing | Professional Penetration Testing | Practical Malware Analysis: The Hands-On Guide to dissecting Malicious Software | Basic Security Testing with Kali Linux 2 | The Hacker Playbook 2: Practical Guide to Penetration Testing | Ethical Hacking and Penetration Testing Guide | Gray Hat Hacking: The Ethical Hacker’s Handbook | Penetration Testing: A Hands-On Introduction to Hacking | Kali Linux: An Ethical Hacker’s Cookbook | IoT Penetration Testing Cookbook | Wireless Communications Network and Systems | 4G LTE / LTE Advanced for Mobile Broadband | Machines of Loving Grace - The Quest for Common Ground Between Humans and Robots | Analysis Of Evidence - How to do things with facts based on Wigmore’s Science of Judicial Proof | Permanent Record | . ",
    "url": "http://localhost:4000/pages/lab-equipment/books.html",
    "relUrl": "/pages/lab-equipment/books.html"
  },"12": {
    "doc": "Books",
    "title": "Theses",
    "content": "List of the printed theses available at the lab. | Bandwidth and Storage Allocation for Operator-Owned Content Management Systems - Valentino Pacifici | Real-Time Search in Large Networks and Clouds - Misbah Uddin | Contributions to Performance Modeling and Management of Data Centers - Rerngvit Yanggratoke | Distributed Processing of Visual Features in Wireless Sensor Networks - Emil Eriksson | Bandwidth Limited Distributed Optimization with Applications to Networked Cyberphysical Systems - Sindri Magnússon | Secure and Privacy Preserving Vehicular Communication Systems: Identity and Credential Management Infrastructure - Mohammed Khodaei | A Bottom-Up Approach to Real-Time Search in Large Networks and Clouds - Misbah Uddin | Data-driven Performance Prediction and Resource Allocation for Cloud Services - Rerngvit Yanggratoke | Secure and Privacy Preserving Urban Sensing Systems - Stylianos Gisdakis | Resource Allocation in Operator-owned Content Delivery Systems - Valentino Pacifici | System Design for Opportunistic Networks - Sylvia Todorova Kouyoumdjieva | Coexistance and Energy Efficiency in Wireless Networks - Ioannis Glaropoulus | Cyber-security in Smart Grid Communication and Control - Ognjen Vuković | Secure and Privacy Preserving Urban Sensing Systems - Stylianos Gisdakis | . ",
    "url": "http://localhost:4000/pages/lab-equipment/books.html#theses",
    "relUrl": "/pages/lab-equipment/books.html#theses"
  },"13": {
    "doc": "Choice of System to Explore",
    "title": "Choice of system to explore",
    "content": "There are many interesting things to hack. When choosing which system to explore, there are three main selection criteria to consider: Impact, vulnerability and how diffucult it is to procure the device. During the first phase of the thesis project, the threat modeling phase, you will explore the vulnerability issue in greater depth, but you may need to perform a superficial threat modeling already at the product selection stage. The higher the impact and vulnerability, the more pressing is the need for security testing of the system. Note that you may include the selection process in your thesis report. In your target selection process, start by creating a shortlist. Then submit to your supervisor your assessment of each product for each of the criteria below. That will serve as a good basis for an informed decision. | Impact. How serious would the consequences be if the system were hacked? . | Vulnerability. How likely is it that you will find and exploit a vulnerability during the course of the thesis project? This will depend on many issues: . | How large is the attack surface? A device that features wifi, Bluetooth, JTAG, UART, USB, HTTP, etc may be easier to compromise than a device that only communicates over LTE, for instance. | How complex is the product? A product with many bells and whistles will be more difficult to secure than one consisting of a single, simple function. | How much time did the developers spend on security? In a price-pressed consumer market, or a start-up company, developers may not have had the resources to spend on securing the product, while that may have been a lesser problem in other markets. | How competent were the developers? . | What is the security track record of the developing company? Some companies seem unable to create secure products, while others have an impressive track record. You can search for publicly reported vulnerabilities in the US National Vulnerability Database (NVD). | To what extent was the system already exposed to security testing? If many security reviews were already conducted (e.g. for the major operating systems), then the low hanging fruits might already have been found, while these may still be around for products that for some reason were not reviewed. Reasons may be that the device is difficult to procure, that the company makes it hard to review its software, that the product is brand new, or that it caters to a small or security-unaware marketplace. In general, big, IT-savvy companies like Apple, Google, Amazon, Microsoft, Facebook, Tesla, etc. have strong security teams and their products have normally been subjected to significant security testing. | . | Can it be procured? KTH can buy interesting devices for security assessments. We consider devices costing SEK 1,000 to be pretty affordable, SEK 10,000 to be rather expensive, and SEK 100,000 very expensive. In exceptional cases, it might, however, be possible to invest in a very expensive device. Note that some devices cannot be straight-up purchased, e.g. many medical devices. In these cases, we may find collaboration partners that grant us access to the units of interest. Sometimes, the thesis project involves a company that already has access to the device to be assessed. Also, some devices have a long delivery time, which may challenge your project planning. | . If costs are not prohibitive, consider procuring two or even three devices from different manufacturers, as the main effort of security testing generally is related to learning and setting up the test environment, while the probability of finding a vulnerability will increase with each new tested device. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/choice_of_system.html#choice-of-system-to-explore",
    "relUrl": "/pages/thesis_guidelines/choice_of_system.html#choice-of-system-to-explore"
  },"14": {
    "doc": "Choice of System to Explore",
    "title": "Choice of System to Explore",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/choice_of_system.html",
    "relUrl": "/pages/thesis_guidelines/choice_of_system.html"
  },"15": {
    "doc": "Computers and hardware",
    "title": "Computers",
    "content": "| Device | Quantity | . | Kali Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Windows Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Ubuntu Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Windows Laptop (Dell Latitude 7400) | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#computers",
    "relUrl": "/pages/lab-equipment/computers.html#computers"
  },"16": {
    "doc": "Computers and hardware",
    "title": "Monitors",
    "content": "| Device | Quantity | . | Dell U2715H | 1 | . | AOC C24G1 - 24” | 1 | . | Lenovo L22e - 21.5” | 1 | . | Acer ED320 - 31.5” | 1 | . | Andersson EM2471HB - 24” | 1 | . | Samsung LC43J890DKUXEN - 43” | 1 | . | AOC CU34G2X/BK - 34” | 1 | . | AOC 27G2U - 27” | 1 | . | Samsung U28E590D - 28” | 1 | . | Acer B276HL - 27” | 1 | . | Acer AL1511eb | 1 | . | Dell 1907FPt | 1 | . | Dell 1907FPc | 1 | . | Dell 2000FP | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#monitors",
    "relUrl": "/pages/lab-equipment/computers.html#monitors"
  },"17": {
    "doc": "Computers and hardware",
    "title": "Cables",
    "content": "| Device | Quantity | . | HDMI | 3 | . | USB to USB + Micro USB | 1 | . | USB | 1 | . | USB2 High Speed cable | 1 | . | VGA | 2 | . | AUX cable | 1 | . | DVI cable | 2 | . | HDMI Mini adapter | 1 | . | Ethernet cables | 10 | . | Apple Ethernet to USB | 1 | . | Apple 30-Pin to USB | 1 | . | USB to Micro USB | 1 | . | USB to Thunderbolt 2 | 1 | . | Mini USB | 2 | . | DP | 1 | . | DP to Thunderbolt 2 | 1 | . | USB to Mini USB | 2 | . | HDMI to VGA female | 2 | . | HDMI to VGA male | 1 | . | VDE cable | 5 | . | Stecker Power Supply | 1 | . | Psion 6V/500mA Adapter | 1 | . | Harman/Kardon 15V/1100mA Adapter | 1 | . | Dell 65W AC Adapter | 2 | . | Dell 65W AC Adapter to USB C | 1 | . | IBM ThinkPad Adapter | 1 | . | Mickey Mouse Power Supply | 1 | . | HQ Power Universal Power Supply | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#cables",
    "relUrl": "/pages/lab-equipment/computers.html#cables"
  },"18": {
    "doc": "Computers and hardware",
    "title": "Misc",
    "content": "| Device | Quantity | . | Soldering station | 1 | . | Standard toolkit | 1 | . | Power Adapter 60w 8-15v | 1 (Borrowed) | . | Power Adapter 40w 12-24v | 1 (Borrowed) | . | USB Memory Stick (Kingston) 32gb | 2 | . | Programmable Light Strip | 3 | . | Ethernet Shield | 2 | . | Arduino Uno | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#misc",
    "relUrl": "/pages/lab-equipment/computers.html#misc"
  },"19": {
    "doc": "Computers and hardware",
    "title": "Computers and hardware",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html",
    "relUrl": "/pages/lab-equipment/computers.html"
  },"20": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Configuring the lab’s Clusterfuzz service",
    "content": "Clusterfuzz is highly configurable. You can change the amount of VM instances used to fuzz, the OS of the fuzzing bots, physical location of the servers, the fuzzing alert system and more. You might find that the software you’d like to fuzz would benefit from altering these configurations. In order to configure the service you’ll need to use the Ubuntu machine in the lab which has everything already set up - or set up the environment on your local machine. This will also allow you to turn the service on and off. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html#configuring-the-labs-clusterfuzz-service",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html#configuring-the-labs-clusterfuzz-service"
  },"21": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Setting up local environment for configuring Clusterfuzz",
    "content": "These instructions are based off the Clusterfuzz documentation for creating a new project. In this case we only want to setup a new machine to connect to our existing project so we skip a few of their steps. This guide is for Linux. Prerequisites . Before you start setting up your local environment you’ll need to make sure you have accomplished these tasks: . | Have a Google account that has been granted access to NSE’s Clusterfuzz project | Followed the prerequisite tutorial from the Clusterfuzz documentation | Downloaded the lab’s configuration files | . Setting environment variables . Once you’ve installed all the necessary files and are authenticated with the lab’s GCP project you’ll need to set the variables to be used in your local environment. First go to the lab’s GCP API page and make note of the key titled Browser key (auto created by Firebase) and download the JSON file called Clusterfuzz. These two keys will authenticate your local machine to Google. You’ll also need to go to the GCP dashboard and make note of the Project ID. We will now export these values and a couple others to your terminal environment to be used by the Clusterfuzz application. First in your terminal navigate to the Clusterfuzz repository and run source ENV/bin/activate to start the Clusterfuzz environment. Then run these commands: . | Set the API key variable | . export FIREBASE_API_KEY=&lt;browser key you saw before&gt; . | Set the JSON file you downloaded | . export CLIENT_SECRETS_PATH=/path/to/your/client_secrets.json . | Set the project id | . export CLOUD_PROJECT_ID=&lt;your project id&gt; . | Set the path to the lab’s configuration folder (that you downloaded from Github) | . export CONFIG_DIR=/path/to/Clusterfuzz-configuration . Authenticating to GCP . You need to authenticate your local machine to GCP using your Google account. Run this command. gcloud auth application-default login . Deploying your changes . Now that the environment is set up you should be able to make some changes to the configuration files and deploy them. To deploy changes run this command (make sure you are still in the environment from the previous step) . python butler.py deploy --config-dir=$CONFIG_DIR --prod --force . Be aware that it can take a few minutes after you’ve deployed until your changes are reflected in the Google Cloud Platform. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html#setting-up-local-environment-for-configuring-clusterfuzz",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html#setting-up-local-environment-for-configuring-clusterfuzz"
  },"22": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Configuring the lab's Clusterfuzz service",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html"
  },"23": {
    "doc": "Contribute",
    "title": "Contribute to docs",
    "content": "We encourage students and researchers to contribute documentation related to the lab that may be useful to others. To do this you should fork this website’s Github repository, make your changes and then submit a pull request on the orignal repository. Someone working at NSE will review your request and merge it so that it is published on this website. ",
    "url": "http://localhost:4000/pages/contribute.html#contribute-to-docs",
    "relUrl": "/pages/contribute.html#contribute-to-docs"
  },"24": {
    "doc": "Contribute",
    "title": "Contribute",
    "content": " ",
    "url": "http://localhost:4000/pages/contribute.html",
    "relUrl": "/pages/contribute.html"
  },"25": {
    "doc": "Delimitations",
    "title": "Delimitations",
    "content": "In order to firmly conclude that a system is secure, it is important to be comprehensive. However, a truly comprehensive security audit may be beyond the scope of the thesis project. Therefore, delimitations can be made, excluding certain components of the system as well as certain attack surfaces. Note that delimitations must be motivated. If you choose to ignore an important attack surface, you won’t be able to answer the question regarding the the actual security of the system. Thus, the relevance of your results are diminished. The most obvious motivation for ignoring an attack vector is that potential vulnerabilities would not be very serious. Seriousness can be measured, for instance, by the CVSS scoring system, which contains a number of dimensions to characterize the risk (specifically the impact and the probability) of exploitation of a vulnerability. It is also possible to motivate delimiations with other arguments, such as the interests or competences of the students performing the assessment. While such arguments are sometimes understandable, they will weaken the relevance of the final report; it will not answer the main question regarding the security of the assessed system as well as without those delimigtations. Furthermore, within the stated delimitations, comprehensiveness is important. Thus, if you choose to focus only on the Bluetooth protocol, make sure you explore the whole attack surfaces of that protocol. If you do not, then you risk not being able to provide any solid answer regarding the security of the system. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/delimitations.html",
    "relUrl": "/pages/thesis_guidelines/delimitations.html"
  },"26": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "Firmware extraction from eMMC",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html#firmware-extraction-from-emmc",
    "relUrl": "/pages/guides/hardware/emmc.html#firmware-extraction-from-emmc"
  },"27": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "Method 1: eMMC tapping",
    "content": ". | Identify a pinout for an embedded Multi Media Card (eMMC) flash chip (embedded SD card) | Dump the contents of the chip without removing it from the PCB | Similar to in situ reading (dumping firmware from running device) | . Method 2: eMMC unsoldering . | Identify a pinout for an embedded Multi Media Card (eMMC) flash chip (embedded SD card) | Unsolder (remove) eMMC from the PCB | Plug-in eMMC to an adapter | Dump the contents of the chip after | . NOTE: These two methods are also applicable to SPI Flash . ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html#method-1-emmc-tapping",
    "relUrl": "/pages/guides/hardware/emmc.html#method-1-emmc-tapping"
  },"28": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "0x05 - Analyzing eMMC",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html",
    "relUrl": "/pages/guides/hardware/emmc.html"
  },"29": {
    "doc": "Fuzzing",
    "title": "Fuzzing",
    "content": "NSE offers a Google Clusterfuzz service for students to fuzz software. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/fuzzing.html",
    "relUrl": "/pages/guides/fuzzing/fuzzing.html"
  },"30": {
    "doc": "Fuzzing",
    "title": "Shortcuts",
    "content": "Here is a list of some useful links: . | Click here for the lab’s Clusterfuzz service | Click here for the lab’s Clusterfuzz configuration files hosted on Github | Click here for the official Clusterfuzz documentation | Click here for the Clusterfuzz source code | . ",
    "url": "http://localhost:4000/pages/guides/fuzzing/fuzzing.html#shortcuts",
    "relUrl": "/pages/guides/fuzzing/fuzzing.html#shortcuts"
  },"31": {
    "doc": "Grading criteria",
    "title": "Grading criteria",
    "content": "Here are the official criteria for master and bachelor thesis assessment. They should thus be important to all thesis students. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/grading_criteria.html",
    "relUrl": "/pages/thesis_guidelines/grading_criteria.html"
  },"32": {
    "doc": "Thesis Guidelines",
    "title": "Thesis Guidelines",
    "content": "A security testing thesis project can be great fun, educational, and it can be very useful when applying for work. Check out some media coverage from previous student projects on my home page, and take a look at previous thesis and vulnerability reports here. Thesis projects will differ depending on your program. In particular, your program will affect the number of credits, whether you can work in pairs, the kinds of plans and project specifications you will need to produce, presentation and opposition routines, and potential deadlines. For the actual content of the work, however, you will find a lot of information here. In brief, this is the process: . | Consider whether you have the required competencies to write a good thesis. You will need to feel comfortable with low-level computing, networking and operating systems (e.g. working on the Linux command line). It will also facilitate greatly if you have previous experience of cyber security, particularly security testing, e.g. having completed the course EN2720 Ethical hacking. | Register to the thesis project. | Ask your tutor to invite you to our Slack, and, if you wish, start participating in the weekly Zoom tutoring meetings, as detailed here. | Decide on a system to investigate. Sometimes, it is already decided what that system is, other times, you are free to suggest one to your supervisor. | Procure the system. Sometimes KTH can order the device, but other times the process may be different. Note that the procurement time can cause problems in your planning if you have chosen a system with a long delivery time. | Write a project plan. The format of the project plan is oftentimes decided on by your program, but generally the objectives will be the same for all hacking projects. Already at this point, it is a good idea to understand the grading criteria, as well as the structure of the tangible result of your work, i.e. your thesis report. | Start working according to your method, making sure that you do not break the law. If you need work space or tools, do check out the Cyber Security Lab. | During the project, you can receive tutoring in different forms. | If you find a vulnerability, it should be responsibly disclosed. | Write the report, preferably in parallel to the actual work. The report is the concrete result of your project, so it needs to contain all aspects of your work. Therefore, its structure can help guide your activities. | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/guidelines.html",
    "relUrl": "/pages/thesis_guidelines/guidelines.html"
  },"33": {
    "doc": "Hacking Tools",
    "title": "Hacking Tools",
    "content": "The lab contains some equipment that can be used out-of-the-box for hacking. | Device | Misc | Availability | . | Ubertooth One x2 | Can be used for Bluetooth hacking | 1x available | . | ALFA Long-Range USB Adapter AWUS036NHA | Can be used for Wi-Fi hacking | Available | . | ASUS Gigabit Router | A powerful router that can be used for a number of tasks such as Wi-Fi hacking. Used as lab’s Wi-Fi. | Available | . | WiFi Pineapple Tetra, Model 5.8 x1 | - | Available | . | IoT-startkit CloudRAIL.Box Set x1 | - | Available | . | AIK001 Wireless IoT Gateway x1 | - | Available | . | HackRF One x1 | - | Borrowed | . | Hak5 Packet Squirrel x2 | - | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/hacking-tools.html",
    "relUrl": "/pages/lab-equipment/hacking-tools.html"
  },"34": {
    "doc": "Hacking Guides",
    "title": "Hacking Guides",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hacking_guides.html",
    "relUrl": "/pages/guides/hacking_guides.html"
  },"35": {
    "doc": "Hardware Hacking",
    "title": "Hardware Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/hardware.html",
    "relUrl": "/pages/guides/hardware/hardware.html"
  },"36": {
    "doc": "0x06 - Useful links and tutorials",
    "title": "0x06 - Useful links and tutorials",
    "content": "How microcontrollers work: Simple Microcontroller Series - PIC10F200 and Assembly . How CPUs work: See How a CPU Works . Hardware Hacking Tutorial . Radio hacking with software defined radio and more: Radio Hacking: Cars, Hardware, and more! - Samy Kamkar . USB hacking: Facedancer 2.0 Next Generation USB Hacking . How To Find The JTAG Interface - Hardware Hacking Tutorial . Extracting Firmware from External Memory via JTAG . ",
    "url": "http://localhost:4000/pages/guides/hardware/hardware_hacking.html",
    "relUrl": "/pages/guides/hardware/hardware_hacking.html"
  },"37": {
    "doc": "0x02 - Analyzing I2C",
    "title": "Analyzing I2C (Inter-Integrated Circuit)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#analyzing-i2c-inter-integrated-circuit",
    "relUrl": "/pages/guides/hardware/i2c.html#analyzing-i2c-inter-integrated-circuit"
  },"38": {
    "doc": "0x02 - Analyzing I2C",
    "title": "1. I2C protocol internals",
    "content": ". | Bus protocols designed for data communications between different components in an embedded device | Common modules having bus protocol . | Flash chip | EEPROM chip | Microcontrollers | LCD | RTC (Real Time Clocks) | Analog to Digital Convertors (ADC) | etc. | . | I2C and SPI are both meant for communicating with other peripherals located on the same board | UART limitations compared to I2C . | facilitating communication between only two devices at a given time | start-stop bits increase size and reduce speed of process | originally intended for communication for large distances, . | while interacting with external devices via cables | . | . | Multi-master serial protocol (with multi-slaves) | Half-duplex (send or receive) (read or write) | Consists of 2 pins for data transfer . | Serial Data (SDA) and Serial Clock (SCL) | . | If 2 masters wanted to take control over an I2C bus at the same time? . | Whichever master pulls the SDA to LOW (0) will gain control of the bus | i.e. zero rushes to win | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#1-i2c-protocol-internals",
    "relUrl": "/pages/guides/hardware/i2c.html#1-i2c-protocol-internals"
  },"39": {
    "doc": "0x02 - Analyzing I2C",
    "title": "2. Pentest objectives",
    "content": ". | Read (dump) contents (firmware and sensitive data) from a device’s flash chip | Write (flash) content (such as backdoor firmware image) to the flash chip | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/i2c.html#2-pentest-objectives"
  },"40": {
    "doc": "0x02 - Analyzing I2C",
    "title": "3. Tools",
    "content": ". | I2C Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | . | i2ceeprom.py | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#3-tools",
    "relUrl": "/pages/guides/hardware/i2c.html#3-tools"
  },"41": {
    "doc": "0x02 - Analyzing I2C",
    "title": "4. Identify the I2C pinouts",
    "content": ". | Open the device | Visually identify the I2C EEPROM chip on the PCB | Note the component number printed on the I2C chip | Look up online for the datasheet to figure out the pinouts of EEPROM . | Flash and EEPROM have common pinouts but sometimes changes according to the manufacturers . | Flash pinouts . | #CS, SO/IO1, SI/IO0, VSS, VCC | . | EEPROM pinouts . | #CS, SCK, MISO, MOSI, GND, VCC, #WP, #HOLD | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#4-identify-the-i2c-pinouts",
    "relUrl": "/pages/guides/hardware/i2c.html#4-identify-the-i2c-pinouts"
  },"42": {
    "doc": "0x02 - Analyzing I2C",
    "title": "5. Connecting EEPROM",
    "content": ". | Method 1: SOIC clip . | directly connect it to the adapter by holding the EEPROM using a SOIC clip | . | Method 2: Desoldering . | remove the EEPROM from the PCB by de-soldering | solder it on a EEPROM adapter (or reader) . | use an adapter which is suitable for EEPROM packaging type | . | . | SOIC clip vs desoldering . | The memory component on the PCB is accessed using the SOIC clip or by desoldering. | Although the SOIC clip approach is more practical and less invasive, . | desoldering is sometimes unavoidable. | . | The voltage supplied to the memory through the SOIC clip sometimes also powers other chips. | Some of the other components on the PCB may attempt to communicate with the memory, . | thus blocking communication between the memory and the external adapter. | . | Therefore, it becomes imperative to remove the memory component from the PCB. | . | Adapter (Attify Badge) pin layout . | D0 | SCK Serial Clock | . | D1 | SDA* Serial Data | . | D2 | SDA* Serial Data | . Note: For I2C, the D1 and D2 lines need to be connected together for SDA. | Connect the EEPROM pins to the adapter (Attify Badge) . | EEPROM | Adapter | . | A0, A1, A2, GND | GND | . | VCC | 5V | . | WP | 5V (Write Protect) | . | SDA | D1 and D2 of Attify badge | . | CLK | D0 of Attify badge | . | Connect the adapter to the analysis PC via USB | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#5-connecting-eeprom",
    "relUrl": "/pages/guides/hardware/i2c.html#5-connecting-eeprom"
  },"43": {
    "doc": "0x02 - Analyzing I2C",
    "title": "6. Reading data",
    "content": ". | Read data from the device using an I2C EEPROM | Use the i2ceeprom.py script | Need to modify parameters (size and speed) before start . | eeprom.Start() | to start the I2C clock | . | Start | initialize the EEPROM | . | eeprom.Write(RCMD) | set EEPROM to Read mode | . | data() | start reading content from the EEPROM and saving it | . | Stop() Close() | stop and we close the I2C connection | . | write() | write the content to a binary file | . | Dump the contents to a file | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#6-reading-data",
    "relUrl": "/pages/guides/hardware/i2c.html#6-reading-data"
  },"44": {
    "doc": "0x02 - Analyzing I2C",
    "title": "7. Writing data",
    "content": ". | Write data to the I2C EEPROM | Use the i2ceeprom.py script | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#7-writing-data",
    "relUrl": "/pages/guides/hardware/i2c.html#7-writing-data"
  },"45": {
    "doc": "0x02 - Analyzing I2C",
    "title": "0x02 - Analyzing I2C",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html",
    "relUrl": "/pages/guides/hardware/i2c.html"
  },"46": {
    "doc": "Introduction to Clusterfuzz",
    "title": "Introduction to Clusterfuzz",
    "content": "Clusterfuzz is a scalable fuzzing infrastructure offered by Google. It allows you to use the Google Cloud Platform to systematically and efficiently fuzz software in order to find security issues. At NSE we want students to use the Clusterfuzz service we have set up to analyse the security of software as part of their research. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html",
    "relUrl": "/pages/guides/fuzzing/introduction.html"
  },"47": {
    "doc": "Introduction to Clusterfuzz",
    "title": "What is fuzzing?",
    "content": "Fuzzing is an automated method of testing software by supplying it with a large number of inputs. The type of input is determined by the method of fuzzing you use. In the early days fuzzing produced completely random inputs to try and cause bugs in the target software, however now most fuzzing engines create variations on the software’s valid input in order to cause unexpected behavior deep in the code. There are many types of fuzzing tools, two of the most popular and the ones used in Clusterfuzz are AFL and Libfuzzer. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html#what-is-fuzzing",
    "relUrl": "/pages/guides/fuzzing/introduction.html#what-is-fuzzing"
  },"48": {
    "doc": "Introduction to Clusterfuzz",
    "title": "How does Clusterfuzz work?",
    "content": "Clusterfuzz’s main selling point is that instead of using your own machines or servers to fuzz, you use Google’s cloud platform. When you create your own instance of Clusterfuzz it launches a web application that allows users to upload their target software to fuzz and offers a nice UI for the results from fuzzing. I recommend reading through the Clusterfuzz documentation to get a better understanding on how to use the Clusterfuzz web interface. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html#how-does-clusterfuzz-work",
    "relUrl": "/pages/guides/fuzzing/introduction.html#how-does-clusterfuzz-work"
  },"49": {
    "doc": "IoT Devices",
    "title": "IoT Devices",
    "content": "This is a list of the current IoT devices in the lab. Note that for hacking thesis projects, you are not limited to these, instead check out choice of system to explore. ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html",
    "relUrl": "/pages/lab-equipment/iot-devices.html"
  },"50": {
    "doc": "IoT Devices",
    "title": "Smart Home",
    "content": "| Device | Availability | . | Jisiwei i3 Vacuum Cleaner x1 | Available | . | Trifo Ironpie m6 Vacuum Cleaner x1 x1 | Available | . | TP-Link Smart WiFi Plug x1 | Borrowed | . | TP-link 150Mpbs Wireless Adapter x1 | Available | . | Glue Smart Lock x1 | Available | . | Dana Smart Lock v3 Scandi x1 | Available | . | Samsung Smart Fridge DA9719112A x1 | Available | . | YI Dome X Camera x1 | Borrowed | . | Verisure Smart Alarm System x1 | Borrowed | . | Amazon Smart Plug x1 | Borrowed | . | DLink WiFi Smart Plug x1 | Borrowed | . | E2 Classic Energy Monitor x1 | Borrowed | . | Telldus Smart Home StartUp Kit x1 | Borrowed | . | Tapo C200 Pan/Tilt Home Security Wi-Fi Camera x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#smart-home",
    "relUrl": "/pages/lab-equipment/iot-devices.html#smart-home"
  },"51": {
    "doc": "IoT Devices",
    "title": "Smart Cameras",
    "content": "| Device | Availability | . | DLink WiFi Camera DCS‑5000L x2 | Borrowed | . | D-link WiFi Camera DCS-932L x1 | Borrowed | . | Xiaomi Mi Home Security Camera 360 x1 | Available | . | TP-Link Tapo C200 x2 | Borrowed | . | mydlink HD Pan &amp; Tilt Wi-Fi Camera DCS-8515LH x1 | Borrowed | . | iSmart Gate Cam x1 | Available | . | iSmart Gate Pro Smart Garage Opener x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#smart-cameras",
    "relUrl": "/pages/lab-equipment/iot-devices.html#smart-cameras"
  },"52": {
    "doc": "IoT Devices",
    "title": "Transport",
    "content": "| Device | Availability | . | Parrot Anafi drone x1 | Available | . | Xiaomi M365 Scooter x1 | Available | . | AutoPi Smart Car Dongle x5 | Available | . | AutoPi Smart Car Power Adapter x5 | Available | . | OBDII Dongle x 1 | Borrowed | . | DEFA Car Alarm System x 1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#transport",
    "relUrl": "/pages/lab-equipment/iot-devices.html#transport"
  },"53": {
    "doc": "IoT Devices",
    "title": "Wearables",
    "content": "| Device | Availability | . | XPLORA 3S Smart Watch x 2 | 1x Borrowed | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#wearables",
    "relUrl": "/pages/lab-equipment/iot-devices.html#wearables"
  },"54": {
    "doc": "IoT Devices",
    "title": "ICS equipment",
    "content": "| Device | Availability | . | RTU, Siemens SICAM CMIC x1 | Available | . | AS-Interface, Profibus, DP Gateway with PLC (AC1365) x1 | Available | . | Logic Module, Siemens LOGO! 12/24 RCE - 6ED1052-1MD08-0BA0 x1 | Available | . | Startkit CPU 1212C + KTP400 Basic Siemens S7-1200 - 6AV6651-7KA02-3AA4 x1 | Available | . | Opto22 PLC x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#ics-equipment",
    "relUrl": "/pages/lab-equipment/iot-devices.html#ics-equipment"
  },"55": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "Analyzing JTAG",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#analyzing-jtag",
    "relUrl": "/pages/guides/hardware/jtag.html#analyzing-jtag"
  },"56": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "1. JTAG Internals",
    "content": ". | JTAG is a hardware (debug) interface that communicates directly with the microcontroller . | If the IoT device is not running a full-fledged OS or | the hardware does not provide a serial interface, | a lower-level debug approach, JTAG, is usually available | . | JTAG is a standard way of testing and debugging chips on the device . | identifying manufacturing defects . | identifying faulty components | missing components in a PCB | unconnected pins or incorrect placement of the device | . | device failure conditions | accessing individual pin values on each chip | overall system testing | debugging the various chips (actually running binaries or firmware) | . | JTAG is not exactly a communication protocol | Access instructions are found on the chip or on the microcontroller specification . | Operation mechanism . | Testing technique is known as Boundary Scan . | sends a data into one of the chips | compares the output to the input | verifies if it is OK | . | Boundary Scan cells embedded into the chips itself (near each pin) | Boundary Scan description language file . | defines the capabilities of any single device’s Boundary Scan logic | . | Boundary Scan instructions . | BYPASS | SAMPLE/PRELOAD | EXTEST | . | TAP pins . | TAP is a collective name given to the JTAG interfaces on a device | Test Clock (TCK) | Test Data In (TDI) | Test Data Out (TDO) | Test Mode Select (TMS) | Test Reset (TRST, optional) | . | TAP controller machine . | consists of TCK, TMS, TRST | manages the overall exchange of data and instructions | . | I/O pins of the device . | are connected serially that form a chain | accessed by the Test Access Port (TAP) for testing | . | Testing (Boundary Scan) Process . | TAP controller applies test data on the TDI pins | BSR (Boundary Scan Register) monitors the input to the device | Data is captured by the Boundary Scan cell | Data then goes in the device through the TDI pins | Data comes out of the device through the TDO pins | Tester verifies the data on the output pin of the device | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#1-jtag-internals",
    "relUrl": "/pages/guides/hardware/jtag.html#1-jtag-internals"
  },"57": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "2. Pentest objectives",
    "content": ". | Bypass almost all software based security controls . | set breakpoints | inspect/modify registers/memory/stack | change binary/firmware execution flow | inject code into the process memory | bypass login | . | Read from/write to flash chip . | if PCB has JTAG access available and . | contains an onboard flash chip, then the contents can be read/written via JTAG | . | dump firmware/bootloader | write backdoored firmware | flash modified firmware to device for bypassing restrictions | . | Debug interfaces sometimes deactivated intentionally for security purposes . | either by software or hardware | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/jtag.html#2-pentest-objectives"
  },"58": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "3. Tools",
    "content": ". | JTAG pinout identifier . | JTAGulator (or) | JTAGEnum Arduino | . | Communication . | minicom (or) | screen (or) | Attify Badge GUI | . | JTAG Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge (or) | Segger J-Link | . | OpenOCD | GDB-Multiarch | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#3-tools",
    "relUrl": "/pages/guides/hardware/jtag.html#3-tools"
  },"59": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "4. Identify JTAG pinouts",
    "content": ". | Look JTAG pinouts up online to learn appearance . | instead of pins or pads with holes, PCB usually have plain pads for JTAG | therefore soldering experience is needed . | to gain experience practice on Raspberry Pi or Intel Galileo | . | . | Open the device | Identify the JTAG pads on the PCB . | TCK | Test Clock | . | TDI | Test Data In | . | TDO | Test Data Out | . | TMS | Test Mode Select | . | Method1: JTAGulator . | open-source hardware | has 24 I/O channels | discovers JTAG and UART pinouts | screen or minicom is used for interaction . | connect relevant pins on target device to the JTAGulator channels | connect GND to GND . | run a screen with the baudrate (need to identify before) . screen /dev/ttyUSB0 115200 . | on the command line . | enter V to set voltage (i.e 3.3) | enter B to set number of channels for BYPASS scan instruction | . | JTAGulator identifies corresponding pinouts | . | Method2: Arduino flashed with JTAGEnum . | much cheaper and slower | discovers only JTAG pinouts | Arduiono IDE . | paste JTAGEnum application code | select port and Arduino type from menu options | upload | . | interact with Arduino via a serial connection . | Serial Monitor of Arduino IDE or | screen or | minicom | . | on the command line . | enter s to start scanning | . | JTAGEnum identifies corresponding pinouts | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#4-identify-jtag-pinouts",
    "relUrl": "/pages/guides/hardware/jtag.html#4-identify-jtag-pinouts"
  },"60": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "5. Connecting JTAG",
    "content": ". | OpenOCD . | open-source software | to perform On Chip Debugging via JTAG | interacts with a hardware debugger’s JTAG port . | debug chips | set breakpoints | program and interact flash chips | dump firmware and sensitive data | . | . | Adapter (Attify Badge) pin layout . | D0 | TCK Test Clock | . | D1 | TDI Test Data In | . | D2 | TDO Test Data Out | . | D3 | TMS Test Mode Select | . | Connect the JTAG pins to the adapter (Attify Badge) . | JTAG | Adapter | . | CLK | TCK (D0) | . | TDI | TDI (D1) | . | TDO | TDO (D2) | . | TMS | TMS (D3) | . | NOTE: The pins functioning as CLK, TDI, TDO, and TMS differs . | based on the processor or controller of the target device. | Need to review datasheet | . | find the OpenOCD configuration file for the adapter (Attify Badge JTAG) . | badge.cfg is available | . | find the configuration file for the device . | check if the target device’s TAP controller is supported by OpenOCD . ls openocs/tcl/&lt;target&gt; . | if it does not exists, manually create one for it . | . | . openocd –c \"telnet_port 2121\" –f badge.cfg –f target.cfg telnet localhost 2121 reset init flash banks halt . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#5-connecting-jtag",
    "relUrl": "/pages/guides/hardware/jtag.html#5-connecting-jtag"
  },"61": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "6. Read data",
    "content": ". | Read data over JTAG | Method 1 . flash banks dump_image firmware.bin 0x08000000 0x00010000 flash banks . | Method 2 . mwd 0x00 0x20 . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#6-read-data",
    "relUrl": "/pages/guides/hardware/jtag.html#6-read-data"
  },"62": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "7. Write data to target",
    "content": ". | Write data over JTAG . flash banks flash write_image erase firmware.bin 0x08000000 flash banks . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#7-write-data-to-target",
    "relUrl": "/pages/guides/hardware/jtag.html#7-write-data-to-target"
  },"63": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "8. Debugging with GDB",
    "content": "gdb-multiarch program.bin set architecture arm target remote localhost:3333 . | hbreak &lt; function-name &gt; | continue standard binary reversing | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#8-debugging-with-gdb",
    "relUrl": "/pages/guides/hardware/jtag.html#8-debugging-with-gdb"
  },"64": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "0x04 - Analyzing JTAG",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html",
    "relUrl": "/pages/guides/hardware/jtag.html"
  },"65": {
    "doc": "Lab Equipment",
    "title": "Lab Equipment",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/lab-equipment.html",
    "relUrl": "/pages/lab-equipment/lab-equipment.html"
  },"66": {
    "doc": "Cyber Security Lab",
    "title": "Cyber Security Lab",
    "content": "The lab is located at Teknikringen 33, room 3339 at ground floor, by the Networks and Systems Engineering (NSE) Division. we have a room available for penetration testing experimentation. Various pieces of equipment are available for thesis project workers to use, as shown in the lab equipments page. There are also four large desks to use as work stations. If you would like to access the lab, send an email to Fredrik at fheiding@kth.se or contact your supervisor. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/lab.html",
    "relUrl": "/pages/thesis_guidelines/lab.html"
  },"67": {
    "doc": "Language",
    "title": "Language",
    "content": "It is important that the language in your report is well-formed. If you need writing assistance, kindly contact the Centre for Academic Writing &amp; Rhetoric. They provide guideance and you may also book an appointment for tutoring. Note that non-fluent Swedish speakers probably will need some assistance with the compulsory Swedish thesis abstract, as the current state of machine translation still is not quite good enough. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/language.html",
    "relUrl": "/pages/thesis_guidelines/language.html"
  },"68": {
    "doc": "Overview of LTE Hacking",
    "title": "An overview of hacking LTE",
    "content": "This document serves as a starting point for individuals looking into hacking cellular network technology, in particular Long-Term Evolution (LTE). It will provide an overview of the currently known vulnerabilities and methods of breaking cellular security. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#an-overview-of-hacking-lte",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#an-overview-of-hacking-lte"
  },"69": {
    "doc": "Overview of LTE Hacking",
    "title": "What is LTE?",
    "content": "Defining the various mobile telecommunication standards can be quite confusing. For each generation international committees agree on improvements the new generation shall have over the previous one. So far there has been commercial releases of 1G, 2G, 3G and 4G technology with 5G being the next generation currently in development. A cellular network generation like 4G is a detailed set of standards and capabilities that a system has to have in order for it be able to called 4G. LTE is a an example of such a system that was developed and submitted as a candidate for a 4G wireless service. However, confusingly, normal LTE doesn’t actually meet the technical criteria of 4G so it is sometimes called 3.95G, which led to the development of LTE Advanced which is a major improvement of LTE and actually meets the standards of 4G. What’s important to remember is that LTE is an implementation of the 4G standards and that 4G LTE is the de-facto technology used by carriers across the world. If you’re interested in learning more about the history of cellular network generations I recommend reading the paper From 1G to 5G, What Next? . ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#what-is-lte",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#what-is-lte"
  },"70": {
    "doc": "Overview of LTE Hacking",
    "title": "How Does LTE work?",
    "content": "The LTE network architecture is made up of three clearly defined parts. Firstly are the end-point devices such as your mobile phone which are known as User Equipment (UE). The second are the intermediate connectors which are the base stations (eNobeB) that act as the first point of contact between a UE and the wider network, this is known as the Evolved Universal Terrestrial Radio Access Network (EUTRAN). The final part is the core which routes packets through the network as well as authenticating and managing a user session and many other tasks. This is known as the Evolved Packet Core (EPC). There are many subcomponents in a LTE network. Below is a diagram illustrating an overview of the network and a brief explanation of each component. | UE (User Equipment): the user’s device which contains the Subscriber Identity Module (SIM or USIM). This is where the IMSI number used to authenticate a user is and the special key used to encrypt traffic is kept. | eNodeB (evolved NobeB): the base station that communicates with the UEs and carrier’s wider network. | MME (Mobile Management Entity): responsible for authentication and management of UEs in the network. | HSS (Home Subscriber Server): stores the security parameters such as keys of the UEs. | S-GW (Serving Gateway): a communication point between EUTRAN and the EPC. | P-GW (PDN Gateway): a routing point between the carrier’s network and the wider packet data network. | . The above diagram comes from the paper Easy 4G/LTE IMSI Catchers for Non-Programmers which explains in greater detail the infrastructure of LTE. For an in depth analysis 4G: LTE/LTE-Advanced for Mobile Broadband is the go-to book on the subject of LTE. It’s written by engineers at Ericsson who were part of the development of the technology - be aware it gets into the nitty gritty of the communication protocols and speaks about wireless networking at an advanced level. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#how-does-lte-work",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#how-does-lte-work"
  },"71": {
    "doc": "Overview of LTE Hacking",
    "title": "LTE Security",
    "content": "LTE has security built into its underlying design and as a result there are lots of steps taken to ensure the confidentiality, integrity and authenticity of your mobile communication. The main overview from the point of view of the user is that LTE uses a hardware protected 128 bit key called K which is used to derive security parameters and more session keys. K is stored inside of the UE’s SIM and in the carrier’s core network - it never leaves those two locations and is never transmitted in its lifetime. There is a complex key hierarchy where essentially every step of communication and sometimes even every protocol has its own key, for example between an eNobeB and a MME. In order for a device to authenticate itself to the network a UE exchanges specific hardware tokens with the core to identify itself. The main token that is used is the International Mobile Subscriber Identity (IMSI) number, this is explained in further detail in the IMSI Catchers section below. I highly recommend watching this talk below as it is a great introduction to LTE security, it’s not too long and is easy to watch. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#lte-security",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#lte-security"
  },"72": {
    "doc": "Overview of LTE Hacking",
    "title": "Types of Attacks",
    "content": "IMSI Catchers . Despite the high level of encryption in LTE there are still a number of packets that are exchanged unencrypted between a UE and an eNodeB in the initial phases of communication. These packets that are sent are to do with authenticating the UE to the network so that that the EPC knows who it’s communicating with. These packets are sent as plaintext as there isn’t the ability to encrypt them since the EPC doesn’t know who its talking to and therefore which keys to use. The 64 bit IMSI number is one of these pieces of data. The IMSI is only ever sent the very first time a mobile device attempts to connect to a brand new network, otherwise if it is connecting to a network it has communicated with previously it can use something known as a TMSI (a temporary and less critical version of the IMSI). An IMSI catcher exploits this aspect of LTE by listening for that first transition of an IMSI number by the UE. The dangers this poses are that they could be used to identify an individual or individuals through their device’s unique IMSI. This could be then used to physically locate a target or perform mass surveillance on a group of people in a geographical area. This is why IMSI catchers are often associated with governmental organisations as a method of surveilling targets. Read more about this here. The basic steps of performing an IMSI Catcher attack are to mimic a genuine eNodeB cell tower and to get your targets to connect to it. Due to the fact that a LTE device will always connect to the network cell with the strongest signal you can quite easily guarantee your target device will communicate with your cell tower, especially in a controlled lab environment. Once the IMSI catcher begins communication with a mobile device it will force the UE to disclose its IMSI number as the fake cell tower represents a new network that the UE has not communicated with before. Mimicking a cell tower requires specific hardware that ranges in price from a few hundred dollars to a few thousand depending on what you’re objectives are. The hardware that is used by an attacker attempting to target people in a real world setting will differ greatly from someone in a lab environment who wants to analyse LTE traffic. An example of a LTE eNobeB lab kit you can buy is this which costs about $6,000. There is a large amount of documentation on creating your own IMSI catcher. The best papers I found were: Easy 4G/LTE IMSI Catchers for Non-Programmers and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. Denial Of Service . There are a number of ways of performing LTE denial of service attacks. Jamming is one technique all wireless communication is particularly vulnerable to. This is where the attacker employs hardware that transmits signals at the same frequency of the communication in order to cause disruptions. There are a number of publications showing that one can quite easily jam LTE signals with low cost off-the-shelf equipment. The publication Jamming LTE Signals goes into depth on this topic. A more nuanced way of launching denial of service attacks again involves creating a fake base station that your victim connects to. This means that you are in control of the point of entry of the UE into the network and therefore can stop all communication or even specifically deny certain services or types of communication. This is discussed in the previously mentioned publications LTE security, protocol exploits and location tracking experimentation with low-cost software radio and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. DNS Spoofing . On the data link layer of LTE user data sent between the UE and the eNodeB is encrypted but it is not integrity protected. This means that a message payload could be modified by a rogue base station without any flags being raised. This lack of integrity protection in the data link layer is the centre point of the publication Breaking LTE on Layer 2. The paper details how an attacker could observe a user’s traffic and using packet fingerprinting figure out when a DNS query is made and alter the response to direct the victim to a malicious HTTP server. One of the author’s of the paper gives an informative and concise presentation on their findings in the video below. Eavesdropping Attacks . There doesn’t exist a published method that allows an attacker to see the user data sent over a 4G LTE connection. Due to the fact that LTE uses symmetric key encryption with a 128 bit key that is never transmitted outside of the two endpoints, it does not appear possible to observe the data packets (such as phone calls, text messages etc.) of a victim. However there still may be value in performing eavesdropping attacks on a LTE target depending on what your objectives are. As explained above, in DNS spoofing and ISMI Catchers, a MiTM LTE between the base station and the UE permits an attacker to perform a number of nefarious tasks. Another strategy for a MiTM LTE attack is a downgrade attack. As you may have noticed when travelling through less populated, less developed areas your mobile phone may switch to a lower mobile communication standard. Your phone will switch to a lower standard if it is the only viable option it has. This fact can be taken advantage of by attackers who wish to perform a number of nefarious tasks such as leak location, leak user identity and even potentially snoop on your traffic. For example an attacker could force your LTE device to use the older Global System for Mobile Communications (GSM). Despite having been designed with security in mind GSM is vulnerable to many types of attacks and the cryptographic algorithms (A5/1 and A5/2) used to encrypt user data are breakable (read more about the vulnerabilities in GSM security here). The way to execute a downgrade attack is similar to IMSI catchers in that you create a fake base station that you force your victim to connect to. Once they have connected and you have forced the device to communicate using a lower mobile communication standard, breaking the encryption should be trivial. A detailed guide on how to this is described in the paper LTE security, protocol exploits and location tracking experimentation with low-cost software radio. There is also off-the-shelf equipment that allows one to observe and analyse nearby encrypted LTE traffic. One such product is the SRS LTE Air Interface Analyzer which allows the user to “capture all downlink traffic in any LTE cell in any frequency band”. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#types-of-attacks",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#types-of-attacks"
  },"73": {
    "doc": "Overview of LTE Hacking",
    "title": "Software Defined Radios",
    "content": "One topic you will come across if you are considering building your own rogue base station are LTE Software Defined Radios (SDR). A SDR is a wireless communication system where certain components that are normally implemented in hardware are instead implemented in software. This allows individuals to recreate LTE components using their personal computers. srsLTE is free and open source code that allows a user to recreate an eNodeB base station that fully implements LTE communication standards using a computer and some basic wireless hardware. Below is a picture from the paper Breaking LTE on Layer 2 that shows a setup that uses two srsLTE SDRs to create a lab LTE network. The first SDR emulates an eNodeB towards the UE, and the second SDR emulates the UE towards to commercial network. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#software-defined-radios",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#software-defined-radios"
  },"74": {
    "doc": "Overview of LTE Hacking",
    "title": "References and Recommended Reading",
    "content": "There are a lot of interesting resources on the Internet regarding LTE hacking. 3GPP is the actual organisation that develops most of the mobile communication protocols we use, including LTE and LTE Advanced. Their website contains lots of documentation on their work. I recommend having a look around there in particular the specifications on “Security Algorithms” and “Security Aspects”. However be aware these are technical documents and therefore very dry reads, worth having a look at though. There is some cool work being done working to protect against LTE attacks. Seaglass is a project conducted by researchers from the University of Washington in order to find IMSI catchers across a city. The paper IMSI-Catch Me If You Can: IMSI-Catcher-Catchers is similar and shows in detail how to detect “artifacts in the mobile network produced by IMSI catchers”. Here is a list of all the academic publications I have referenced: . | From 1G to 5G, What Next? | Easy 4G/LTE IMSI Catchers for Non-Programmers | Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems | LTE security, protocol exploits and location tracking experimentation with low-cost software radio | Jamming LTE Signals | Breaking LTE on Layer 2 | . ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#references-and-recommended-reading",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#references-and-recommended-reading"
  },"75": {
    "doc": "Overview of LTE Hacking",
    "title": "Overview of LTE Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html"
  },"76": {
    "doc": "Overview of LTE Hacking",
    "title": "An overview of hacking LTE",
    "content": "This document serves as a starting point for individuals looking into hacking cellular network technology, in particular Long-Term Evolution (LTE). It will provide an overview of the currently known vulnerabilities and methods of breaking cellular security. ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#an-overview-of-hacking-lte",
    "relUrl": "/pages/guides/lte-hacking.html#an-overview-of-hacking-lte"
  },"77": {
    "doc": "Overview of LTE Hacking",
    "title": "What is LTE?",
    "content": "Defining the various mobile telecommunication standards can be quite confusing. For each generation international committees agree on improvements the new generation shall have over the previous one. So far there has been commercial releases of 1G, 2G, 3G and 4G technology with 5G being the next generation currently in development. A cellular network generation like 4G is a detailed set of standards and capabilities that a system has to have in order for it be able to called 4G. LTE is a an example of such a system that was developed and submitted as a candidate for a 4G wireless service. However, confusingly, normal LTE doesn’t actually meet the technical criteria of 4G so it is sometimes called 3.95G, which led to the development of LTE Advanced which is a major improvement of LTE and actually meets the standards of 4G. What’s important to remember is that LTE is an implementation of the 4G standards and that 4G LTE is the de-facto technology used by carriers across the world. If you’re interested in learning more about the history of cellular network generations I recommend reading the paper From 1G to 5G, What Next? . ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#what-is-lte",
    "relUrl": "/pages/guides/lte-hacking.html#what-is-lte"
  },"78": {
    "doc": "Overview of LTE Hacking",
    "title": "How Does LTE work?",
    "content": "The LTE network architecture is made up of three clearly defined parts. Firstly are the end-point devices such as your mobile phone which are known as User Equipment (UE). The second are the intermediate connectors which are the base stations (eNobeB) that act as the first point of contact between a UE and the wider network, this is known as the Evolved Universal Terrestrial Radio Access Network (EUTRAN). The final part is the core which routes packets through the network as well as authenticating and managing a user session and many other tasks. This is known as the Evolved Packet Core (EPC). There are many subcomponents in a LTE network. Below is a diagram illustrating an overview of the network and a brief explanation of each component. | UE (User Equipment): the user’s device which contains the Subscriber Identity Module (SIM or USIM). This is where the IMSI number used to authenticate a user is and the special key used to encrypt traffic is kept. | eNodeB (evolved NobeB): the base station that communicates with the UEs and carrier’s wider network. | MME (Mobile Management Entity): responsible for authentication and management of UEs in the network. | HSS (Home Subscriber Server): stores the security parameters such as keys of the UEs. | S-GW (Serving Gateway): a communication point between EUTRAN and the EPC. | P-GW (PDN Gateway): a routing point between the carrier’s network and the wider packet data network. | . The above diagram comes from the paper Easy 4G/LTE IMSI Catchers for Non-Programmers which explains in greater detail the infrastructure of LTE. For an in depth analysis 4G: LTE/LTE-Advanced for Mobile Broadband is the go-to book on the subject of LTE. It’s written by engineers at Ericsson who were part of the development of the technology - be aware it gets into the nitty gritty of the communication protocols and speaks about wireless networking at an advanced level. ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#how-does-lte-work",
    "relUrl": "/pages/guides/lte-hacking.html#how-does-lte-work"
  },"79": {
    "doc": "Overview of LTE Hacking",
    "title": "LTE Security",
    "content": "LTE has security built into its underlying design and as a result there are lots of steps taken to ensure the confidentiality, integrity and authenticity of your mobile communication. The main overview from the point of view of the user is that LTE uses a hardware protected 128 bit key called K which is used to derive security parameters and more session keys. K is stored inside of the UE’s SIM and in the carrier’s core network - it never leaves those two locations and is never transmitted in its lifetime. There is a complex key hierarchy where essentially every step of communication and sometimes even every protocol has its own key, for example between an eNobeB and a MME. In order for a device to authenticate itself to the network a UE exchanges specific hardware tokens with the core to identify itself. The main token that is used is the International Mobile Subscriber Identity (IMSI) number, this is explained in further detail in the IMSI Catchers section below. I highly recommend watching this talk below as it is a great introduction to LTE security, it’s not too long and is easy to watch. ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#lte-security",
    "relUrl": "/pages/guides/lte-hacking.html#lte-security"
  },"80": {
    "doc": "Overview of LTE Hacking",
    "title": "Types of Attacks",
    "content": "IMSI Catchers . Despite the high level of encryption in LTE there are still a number of packets that are exchanged unencrypted between a UE and an eNodeB in the initial phases of communication. These packets that are sent are to do with authenticating the UE to the network so that that the EPC knows who it’s communicating with. These packets are sent as plaintext as there isn’t the ability to encrypt them since the EPC doesn’t know who its talking to and therefore which keys to use. The 64 bit IMSI number is one of these pieces of data. The IMSI is only ever sent the very first time a mobile device attempts to connect to a brand new network, otherwise if it is connecting to a network it has communicated with previously it can use something known as a TMSI (a temporary and less critical version of the IMSI). An IMSI catcher exploits this aspect of LTE by listening for that first transition of an IMSI number by the UE. The dangers this poses are that they could be used to identify an individual or individuals through their device’s unique IMSI. This could be then used to physically locate a target or perform mass surveillance on a group of people in a geographical area. This is why IMSI catchers are often associated with governmental organisations as a method of surveilling targets. Read more about this here. The basic steps of performing an IMSI Catcher attack are to mimic a genuine eNodeB cell tower and to get your targets to connect to it. Due to the fact that a LTE device will always connect to the network cell with the strongest signal you can quite easily guarantee your target device will communicate with your cell tower, especially in a controlled lab environment. Once the IMSI catcher begins communication with a mobile device it will force the UE to disclose its IMSI number as the fake cell tower represents a new network that the UE has not communicated with before. Mimicking a cell tower requires specific hardware that ranges in price from a few hundred dollars to a few thousand depending on what you’re objectives are. The hardware that is used by an attacker attempting to target people in a real world setting will differ greatly from someone in a lab environment who wants to analyse LTE traffic. An example of a LTE eNobeB lab kit you can buy is this which costs about $6,000. There is a large amount of documentation on creating your own IMSI catcher. The best papers I found were: Easy 4G/LTE IMSI Catchers for Non-Programmers and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. Denial Of Service . There are a number of ways of performing LTE denial of service attacks. Jamming is one technique all wireless communication is particularly vulnerable to. This is where the attacker employs hardware that transmits signals at the same frequency of the communication in order to cause disruptions. There are a number of publications showing that one can quite easily jam LTE signals with low cost off-the-shelf equipment. The publication Jamming LTE Signals goes into depth on this topic. A more nuanced way of launching denial of service attacks again involves creating a fake base station that your victim connects to. This means that you are in control of the point of entry of the UE into the network and therefore can stop all communication or even specifically deny certain services or types of communication. This is discussed in the previously mentioned publications LTE security, protocol exploits and location tracking experimentation with low-cost software radio and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. DNS Spoofing . On the data link layer of LTE user data sent between the UE and the eNodeB is encrypted but it is not integrity protected. This means that a message payload could be modified by a rogue base station without any flags being raised. This lack of integrity protection in the data link layer is the centre point of the publication Breaking LTE on Layer 2. The paper details how an attacker could observe a user’s traffic and using packet fingerprinting figure out when a DNS query is made and alter the response to direct the victim to a malicious HTTP server. One of the author’s of the paper gives an informative and concise presentation on their findings in the video below. Eavesdropping Attacks . There doesn’t exist a published method that allows an attacker to see the user data sent over a 4G LTE connection. Due to the fact that LTE uses symmetric key encryption with a 128 bit key that is never transmitted outside of the two endpoints, it does not appear possible to observe the data packets (such as phone calls, text messages etc.) of a victim. However there still may be value in performing eavesdropping attacks on a LTE target depending on what your objectives are. As explained above, in DNS spoofing and ISMI Catchers, a MiTM LTE between the base station and the UE permits an attacker to perform a number of nefarious tasks. Another strategy for a MiTM LTE attack is a downgrade attack. As you may have noticed when travelling through less populated, less developed areas your mobile phone may switch to a lower mobile communication standard. Your phone will switch to a lower standard if it is the only viable option it has. This fact can be taken advantage of by attackers who wish to perform a number of nefarious tasks such as leak location, leak user identity and even potentially snoop on your traffic. For example an attacker could force your LTE device to use the older Global System for Mobile Communications (GSM). Despite having been designed with security in mind GSM is vulnerable to many types of attacks and the cryptographic algorithms (A5/1 and A5/2) used to encrypt user data are breakable (read more about the vulnerabilities in GSM security here). The way to execute a downgrade attack is similar to IMSI catchers in that you create a fake base station that you force your victim to connect to. Once they have connected and you have forced the device to communicate using a lower mobile communication standard, breaking the encryption should be trivial. A detailed guide on how to this is described in the paper LTE security, protocol exploits and location tracking experimentation with low-cost software radio. There is also off-the-shelf equipment that allows one to observe and analyse nearby encrypted LTE traffic. One such product is the SRS LTE Air Interface Analyzer which allows the user to “capture all downlink traffic in any LTE cell in any frequency band”. ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#types-of-attacks",
    "relUrl": "/pages/guides/lte-hacking.html#types-of-attacks"
  },"81": {
    "doc": "Overview of LTE Hacking",
    "title": "Software Defined Radios",
    "content": "One topic you will come across if you are considering building your own rogue base station are LTE Software Defined Radios (SDR). A SDR is a wireless communication system where certain components that are normally implemented in hardware are instead implemented in software. This allows individuals to recreate LTE components using their personal computers. srsLTE is free and open source code that allows a user to recreate an eNodeB base station that fully implements LTE communication standards using a computer and some basic wireless hardware. Below is a picture from the paper Breaking LTE on Layer 2 that shows a setup that uses two srsLTE SDRs to create a lab LTE network. The first SDR emulates an eNodeB towards the UE, and the second SDR emulates the UE towards to commercial network. ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#software-defined-radios",
    "relUrl": "/pages/guides/lte-hacking.html#software-defined-radios"
  },"82": {
    "doc": "Overview of LTE Hacking",
    "title": "References and Recommended Reading",
    "content": "There are a lot of interesting resources on the Internet regarding LTE hacking. 3GPP is the actual organisation that develops most of the mobile communication protocols we use, including LTE and LTE Advanced. Their website contains lots of documentation on their work. I recommend having a look around there in particular the specifications on “Security Algorithms” and “Security Aspects”. However be aware these are technical documents and therefore very dry reads, worth having a look at though. There is some cool work being done working to protect against LTE attacks. Seaglass is a project conducted by researchers from the University of Washington in order to find IMSI catchers across a city. The paper IMSI-Catch Me If You Can: IMSI-Catcher-Catchers is similar and shows in detail how to detect “artifacts in the mobile network produced by IMSI catchers”. Here is a list of all the academic publications I have referenced: . | From 1G to 5G, What Next? | Easy 4G/LTE IMSI Catchers for Non-Programmers | Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems | LTE security, protocol exploits and location tracking experimentation with low-cost software radio | Jamming LTE Signals | Breaking LTE on Layer 2 | . ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html#references-and-recommended-reading",
    "relUrl": "/pages/guides/lte-hacking.html#references-and-recommended-reading"
  },"83": {
    "doc": "Overview of LTE Hacking",
    "title": "Overview of LTE Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/lte-hacking.html",
    "relUrl": "/pages/guides/lte-hacking.html"
  },"84": {
    "doc": "Method",
    "title": "Method",
    "content": "A penetration testing project usually starts by threat modeling. For a master thesis project, this can correspond to the prestudy that some master programs mandate. Threat modeling briefly consists of a superficial exploration and description of the system, and then a comprehensive categorization of all possible attacks. Each attack should be assessed for its potential impact and the probability of successful exploitation. Adam Shostack’s book Threat Modeling can be used as a methodological guide. Also, I think the steps presented by Synopsys and by Mike Ware make a lot of sense. In particular, I would like to encourage the production of a threat modeling diagram and a threat traceability matrix. There are some free tools available for the diagrammatic representation of the threat model, such as the OWASP Threat Dragon and Visual Paradigm’s Online Threat Modeling Tool. In order to learn about the system under consideration, user and developer manuals may be of great utility, as well as other publicly available information, e.g. FCC submissions. The threat modeling phase is typically followed by a number of concrete penetration tests of the most promising avenues of exploitation (as specified in the threat traceability matrix). These may vary significantly with respect to required theory, method, etc. Multiple criteria can be used to select the concrete penetration tests to focus on. Their expected impact and likelihood of success are the obvious selection criteria. The likelihood of success will, in turn depend on the expected difficulty of discovery and exploitation as well as on the skills of the assessor, so these aspects can constitute valid selection criteria. It is a good idea to present in a threat traceability matrix and threat modeling diagram the attack vectors that you have identified, as well as the vectors that you have actually tested. In addition to manual penetration testing, fuzzing is also a good option. We can currently offer a local installation of Google’s Clusterfuzz system, which can scale the fuzzing effort significantly. You can get started by checking out the American Fuzzy Lop fuzzer, which in recent years has revolutionized fuzzing by its effectiveness and ease of use. Good project planning increases the chances of succeeding with your thesis project. There are several tools that can help you organize your work, such as Trello aligned with your threat traceability matrix. One particular hazard with hacking projects is the risk of falling down into a rabbit hole. To avoid rabbit holes, you might consider time boxing. If you are testing an IoT device, Guzman and Gupta’s IoT Penetration Testing Cookbook is a good guide. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/method.html",
    "relUrl": "/pages/thesis_guidelines/method.html"
  },"85": {
    "doc": "Objective",
    "title": "Objective",
    "content": "The goal of the project is to assess some aspects of the security of the chosen computer-based system. It is not necessary to find vulnerabilities in order to produce an excellent thesis report. The goal is, instead, to convincingly demonstrate whether the system is secure or not, given certain delimitations. Of course, a discovered vulnerability will demonstrate that the system in some respect lacks security, but a comprehensive exploration of a chosen attack surface can equally well demonstrate the opposite. You can state your objective in the form of a research question: “Is device X secure against cyber attacks?”. Note that you might want to delimit the research question if there are attacks that you know that you will not explore. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/objective.html",
    "relUrl": "/pages/thesis_guidelines/objective.html"
  },"86": {
    "doc": "Exploitation",
    "title": "IoT pentest process - Exploitation",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html#iot-pentest-process---exploitation",
    "relUrl": "/pages/guides/pentest-process-exploit.html#iot-pentest-process---exploitation"
  },"87": {
    "doc": "Exploitation",
    "title": "2. Exploitation",
    "content": "After finding a satisfactory number of potential vulnerabilities, we move on to the exploitation of our device (or segment of devices). Below are some guidelines that can be useful when conduction the exploitation phase. As with the information gathering, the exploitation techniques differ for different areas of the device (hardware, firmware etc.) and among different devices. Remember to document the used methodology of both successful and unsuccessful exploitation tests. Even if no vulnerability has been successfully exploited or even if no vulnerability was found, it is possible to write a valuable thesis report as long as the process is systematically documented. Several valuable sources exist online. Exploit databases with existing exploits for known vulnerabilities can save time, such as packetstorm or ExploitDB and rapid7’s metasploit framework may contain useful exploits that can be executed without much effort. 2.1 Hardware and firmware . The hardware penetration testing section contains detailed information about various types of hardware hacking together with a collection of links and tutorials that can be useful. We want to spend considerable efforts on analysis of physical interfaces and firmware reversing. Exploitation of the hardware’s physical interfaces includes dumping firmware, backdooring firmware, granting shell access, changing code execution, misusing test functionality, exploiting known vulnerabilities in 3rd party chips, examining external media interfaces, sensitive data exposures, and tamper resistance. After the firmware dumping we can extract the file system inside for analysis. Exploitation of firmware includes searching for sensitive data within the file system, such as hashes, passwords, private certificates, API keys, and staging URLs. After that, libraries that often contain sensitive data are reverse engineered (for certain architectures ARM and MIPS) to identify specific vulnerabilities, command injection and buffer overflows. In general, critical functions are disassembled in detail and main binaries are emulated for dynamic analysis (debugging). The firmware is also fully emulated to perform network testing and web application pentesting on the firmware. In addition, pentest cases include analyzing update mechanisms for malicious updates, local data storage for unencrypted sensitive data, and configurations for security settings. It can be good to look through the firmware pentest methodology by OWASP or our own . 2.2 Network . The traditional network pentest approach can be applied to the IoT device’s network services. We want to exploit a network service to gain user-level access to the device and then escalating our privileges. Semi-automated tools such as the metasploit framework contain several networking exploits that may be applicable to the device for convenient exploitation of known vulnerabilities. If needed, we can perform brute force attacks against the authentication mechanisms and decrypt insecure network traffic. When a vulnerability has no public exploits, we can develop our own. 2.3 Web, cloud, and mobile exploitation . We perform traditional web application pentesting for the web applications related to our selected IoT device. The main objective is to exploit a webpage to execute commands on the device (remote code execution). Then, if possible, we also want to bypass the authentication. When web application scanners find vulnerabilities they usually provide primitive payloads for proof of concept. These can assist us in designing the real working exploit codes. Once again, some vulnerabilities could be exploited with semi-automated tools (such as Metasploit), we may want to use brute force attacks against some authentications and if no publicly available exploit exists for a vulnerability, we can develop our own. OWASP’s Web Security Testing Guide is a good source of information on how to conduct a web based penetration test from scratch. When performing cloud exploits, we are often interested in obtaining sensitive and unauthorized data. For mobile devices relating our IoT device, we can apply traditional mobile pentesting schemes, such as reverse engineering of the Android and iOS code. The device may be set up with default credentials such as admin/admin or similar which we can also test for. The credentials may otherwise be derived from a pattern that can be cracked or understood, such as the AutoPi vulnerability where the device’s password could be derived from the ID, which in turn could be reduced to a 8 digit hexadecimal number. The mobile app may be ignoring certificate issues, (i.e. the application communicates over an insecure channel with non-trusted CA for the SSL certificate). For more information, the Owasp Mobile Security Testing Guide is useful. 2.5 Radio communication . BLE (Bluetooth Low Energy), Software Defined Radio (SDR), and ZigBee are common in many IoT devices. Depending on the communication protocol, specialized equipment may be required to perform specific radio pentesting. Please refer to the lab equipments section to see which tools are available. If you need to purchase additional equipment, contact your supervisor. If possible, we want to extract sensitive information in clear text from the radio packets. The TLS connections can be inspected to find whether they are vulnerable to MitM attacks. If certificate validation is missing, we can usually conduct further attacks depending on the context. If there is no message verification we can retransmit captured data for a reply attack. If there is a message verification, it may still be possible to jam the signal to capture unused radio packets for re-transmission. It can also be relevant to perform reverse engineering and fuzzing of unknown or custom protocols and decode data packets. More information can be found in our wireless hacking guides . ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html#2-exploitation",
    "relUrl": "/pages/guides/pentest-process-exploit.html#2-exploitation"
  },"88": {
    "doc": "Exploitation",
    "title": "Exploitation",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html",
    "relUrl": "/pages/guides/pentest-process-exploit.html"
  },"89": {
    "doc": "Planning",
    "title": "IoT pentest process - Planning",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html#iot-pentest-process---planning",
    "relUrl": "/pages/guides/pentest-process-planning.html#iot-pentest-process---planning"
  },"90": {
    "doc": "Planning",
    "title": "1. Planning",
    "content": "Depending on the goal of the penetration test, the aim may be to assess the security of a segment of IoT products (such as smart home products), assess the security of an individual IoT product, such as a JISIWEI I3 Robotic Vacuum Cleaner or a number of other variations. When we have selected a device, or a segment of devices to test, we usually start with gathering as much information as we can about this specific area. Remember to document all your findings. Even if no vulnerability is found in the device, it is possible to write a valuable thesis report as long as the process taken to identify vulnerabilities is systematically documented. 1.2 Information gathering . In the reconnaissance phase we aim to gather as much relevant information as possible about our device. If a larger segment of products is chosen, every device belonging to the segment is examined. We may start with a comprehensive documentation review of the device, as well as physically examining it. Finally, certain active and passive scanning and enumeration techniques can be applied for hardware, firmware, radio protocols, network services, web applications, cloud APIs and mobile applications. We want to find all potential attack vectors that can be tested and potentially exploited in the next phase of the penetration test. In the light of these inquiries, all hardware, communication protocols, and software components are identified and their functionality are categorized. Hardware and firmware . A smart device is an embedded system that can be a Hub (a smart IoT gateway), a smart sensor that collects data from the environment, or a controller (actuator) that performs an action upon user request, or analyzes and displays the data. Visual observation and physical examination of the device involves identification of available ports, slots, buttons, etc. and may include physical disassembly of the device. IoT devices typically have some modules on PCBs (Printed Circuit Boards), a processor, RAM, ROM, peripherals, connectors, antennas, screens, and ribbon cables etc. The board also exposes debugging ports (JTAG, SWD, etc.) and communication interfaces (UART, SPI, I2C, etc.) and particular pins (Tx, Rx, TDO, etc.) that can be interesting. The modules on the PCB vary in size, shape, and other aspects depending on the functionality of the device, this is known as packaging (DIL, SMD). The packaging type of a module is important, since associated hardware adapters and other utilities are required to interact with them when pentesting. Particularly, for hardware testing it is important to take photos of the components inside the PCB. The official technical specifications are carefully interpreted including user and developer manuals. The processor’s datasheet usually contains information about interfaces, I/O ports, interrupts, and more. Also, available public documentation (i.e. fccid.io) is explored to reveal incomplete information (i.e. chip pinouts). An additional search can be executed on repositories of known data-sheets for still missing specifications on the manufacturer’s website. Moreover, we can search online for modules that do not contain a model number. Finally, to be able to derive use case diagrams later on, relevant information is summarized, including what each device does and how they work, how devices communicate among themselves and between each other, how the input and output of the device works, and the functionality of the buttons and external interfaces. Radio communication . IoT devices often communicate and exchange data via radio protocols such as Bluetooth Low Energy (BLE), Software-defined radio (SDR), and ZigBee. The radio chipsets on the PCB provide information about the radio protocols supported by a device. Manufacturer documentation and public resources can reveal useful information such as the operation frequency of the device. It is also valuable to investigate whether there are similar devices operating in the same frequency range as these devices. Additionally, radio traffic is captured for preliminary analysis. It is vital to capture radio traffic while devices have just started sending and receiving their first bits, otherwise the collected data may not be accurate, since some types of data may only be exchanged when the device is first introduced to the network. We can find useful information such as the component that initiates the authentication and pairing mechanism, the internals of the pairing operation, how many devices each component can handle simultaneously, the nature of the data transmitted through protocols, transmission commands, operating frequencies, and default encryption keys among other things. Network services . Modern firmware has evolved into an operating system (i.e. Linux) that provides some network services such as SNMP, FTP, and HTTP, especially for remote access. Traditional port scanning techniques (nmap) are performed to identify open ports along with the running applications and their versions. In addition, services which require authentication are identified and network traffic is captured. Web applications . Firmware may also have an HTTP service hosting a website designed for management, configuration, and status information. Traditional webpage crawling and enumeration techniques are performed (i.e. dirb, dirbuseter, wfuzz, gobuster, nikto) to discover all web pages and the development technologies with their versions. Cloud APIs . IoT devices usually send the collected data to a cloud service, accessed via an APIs. It allows the user to monitor the device, view data analytics and usage information, control permissions of who can control the devices, etc. Mobile application . IoT devices are usually controlled through mobile applications. The application exposes the functionality of the IoT device and can show how the device works, as well as revealing sensitive data. Information gathering of mobile applications can utilize the following questions: . | Which devices are controlled by the mobile app? | Which control commands are sent to the device over which protocols (BLE, WiFi)? | What are the main functionalities of the mobile app (add/remove device/user, switch on/off)? | What are the other useful features of the mobile app (activity log, update firmware)? | How does certain actions work (action X works with a one-time key/PIN code)? | Summarize what functionality provides what? | What other actions are triggered automatically right after an action is started (log generated after switch on/off)? | What are the types of users and what access rights do they have? | . Reverse engineering can be performed to learn more. Automated toolkits such as Apktool and jadx help us decompile the source code and perform static analysis of the mobile app. If performed successfully the compiled application code, dependent native libraries, resource files, and requested mobile device permissions can be revealed. The source code of modern applications is often obfuscated to prevent unauthorized knowledge of the operation logic, this may make reverse engineering harder and more time consuming. Therefore, an analysis can start with quickly inspecting files that seem promising. In addition, applications may store some data locally on the devices, these files are also valuable. 1.2 Threat and vulnerability analysis . Several threat scoring systems exist for classifying the vulnerabilities, such as STRIDE, DREAD, and CVSS. We can utilize a combination of these to create a comprehensive analysis of the threats and vulnerabilities. When collecting information about the vulnerabilities, we must remember to examine previously known and publicly found vulnerabilities for the components, or similar components. For assistance, we have composed a spreadsheet of common vulnerabilities and a list of some common vulnerabilities for different parts as listed below. However, it is always important you make your own research to find the most relevant and up to date vulnerabilities for the given product segment you are testing. Hardware vulnerabilities . We can connect to the Hub or device via its Ethernet port if one is available, the SD card slot can be used for firmware upgrades, and the processor’s Wi-Fi stack may contain known vulnerabilities. Below are 20 potential hardware vulnerabilities. | Senstive data exposure - Device ID/serial no | Insecure external media interfaces | Insecure 3rd party hardware components | Resettable to insecure state | Firmware/storage extraction - Download from the Web | Firmware/storage extraction - Insecure SPI interface | Firmware/storage extraction - Insecure I2C interface | Firmware/storage extraction - Insecure UART interface | Firmware/storage extraction - Insecure JTAG interface | Firmware/storage extraction - Insecure SWD interface | Firmware/storage extraction - Insecure SoC | Firmware/storage extraction - Tapping eMMC chip | Firmware/storage extraction - Unsoldering eMMC chip | Backdoor firmware - Insecure UART interface | Backdoor firmware - Insecure JTAG interface | Backdoor firmware - Insecure SWD interface | Grant shell access - Insecure UART interface | Grant shell access - Insecure SPI interface | Change code execution flow - Insecure JTAG/SWD interface | Lack of tamper resistance | . Firmware vulnerabilities . The firmware can be a proprietary software where binary reverse engineering is relevant, especially for ARM and MIPS architectures. The reverse engineering can reveal sensitive information such as credentials, secret encryption/encoding keys. Below we define 26 potential firmware vulnerabilities. | Sensitive data exposure - Backdoor accounts | Sensitive data exposure - Hardcoded credentials | Sensitive data exposure - Encryption keys and algorithms | Sensitive data exposure - URL disclosure | Sensitive data exposure - Other sensitive information | Update mechanism - Missing update mechanism | Update mechanism - Lack of manual update | Update mechanism - Lack of transport encryption | Update mechanism - Lack of signature on update file | Update mechanism - Lack of update verification | Update mechanism - Lack of update authentication | Update mechanism - Intercepting OTA update | Update mechanism - Backdoor firmware | Update mechanism - World writable update location | Update mechanism - Lack of anti-rollback mechanism | Local data storage - Unencrypted data | Local data storage - Static and same encryption keys | Local data storage - Data encrypted with discovered keys | Local data storage - Lack of data integrity checks | Local data storage - Lack of wiping device | Authentication bypass - Device to device | Authentication bypass - Device to mobile application | Authentication bypass - Device to cloud | Configuration - Insecure customization of OS platforms | Configuration - Insecure filesystem permissions | Configuration - Lack of security configurability | . Network service vulnerabilities . In the reconnaissance activity we may have found network services and their respective versions. We can search for the known vulnerabilities on these versions in a number of databases. Network vulnerability scanners can also provide matching vulnerabilities from their built-in databases automatically. It is not uncommon for IoT network services to run older versions that may have common vulnerabilities. Below we define 18 potential vulnerabilities for network services. | Sensitive data exposure | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery | Test or development services | Known vulnerable services | Exposed services running as root | Privilege escalation | Authentication bypass | Denial of Service (DoS) | Buffer overflow | Accepting connections without authentication | Insecure transport encryption | Sensitive data exposure | . Web application vulnerabilities . We may have found interesting frameworks and their versions used by the web application of our IoT devices. These can be searched for known vulnerabilities. For a web application with a limited number of web pages, personal proxy toolkits can be utilized to examine the target and repeat modified web requests, in addition, various web vulnerability scanners can be used to search for vulnerabilities. Web applications served on IoT devices are usually a wrapper for internal operating system utilities. User inputs are passed to these utilities to execute shell commands. Common injections are important vulnerabilities where unsanitized input can lead to remote code execution. Weak authentication mechanisms are also common. Below are 15 potential vulnerabilities for web applications. | Sensitive data exposure | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery | Authentication - Lack of two-factor authentication | Authentication bypass - Web application to cloud | Lack of logging options | Command injection | Direct object references | Business and logic flaws | . Mobile and cloud application vulnerabilities . Further reverse engineering and source code analysis may be required for vulnerability assessment of mobile applications. We may be able to find undocumented features or other loopholes that can generate attack vectors. Reverse engineering of communication APIs such as REST and SOAP may also be useful and reveal undocumented features that present attack vectors. Common hardcoded sensitive data includes firmware update URL, APK update URL, and cloud API authentication keys. In addition, the native components of mobile apps can help us understand various critical functions such as encryption. We also want to intercept the network traffic, we can do this by bypassing the SSL pinning and then perform a live analysis of the network traffic with a personal proxy. Finally, we can perform a dynamic analysis with a number of automated toolkits. Common IoT specific security threats towards mobile and cloud application include insecure authentication and authorization mechanisms, business and logic flaws, insecure network communication, and outdated 3rd party libraries and SDKs. Below are 14 potential vulnerabilities for cloud apps and 26 potential vulnerabilities for mobile apps. Cloud vulnerabilities: . | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery mechanism | Authentication - Two-factor authentication | Vendor APIs - Inherent trust of cloud or mobile application | Vendor APIs - Insecure authentication | Vendor APIs - Insecure access controls | Vendor APIs - Undocumented backdoor API calls | Vendor APIs - User data disclosure | Vendor APIs - Device information leakage | . Mobile vulnerabilities: . | Sensitive data exposure - Hardcoded credentials | Sensitive data exposure - Encryption keys and algorithms | Sensitive data exposure - URL disclosure | Sensitive data exposure - Other sensitive information | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery mechanism | Authentication - Two-factor authentication | Authentication - Mobile application to cloud system | Insecure authorization | Implicitly trusted by device or cloud | Lack of transport encryption | Insecure SSL/TLS issues | Insecure data storage | Outdated 3rd party libraries and SDKs | Business and logic flaws | Lack of health checks | Insecure heartbeats | Device controlling commands | Lack of deprovisioning | Insecure pushing firmware updates | . Radio communication vulnerabilities . A number of vulnerabilities may exist, ZigBee traffic can be sniffed and decrypted or we may be able to intercept the BLE traffic and session hijack. Different radio protocols have different vulnerabilities but several types are common among them, below are 11 vulnerabilities for radio protocols. | Sensitive data exposure | Lack of transport encryption | Interception and modification | Man in the middle attack | Replay attack | Jamming attack | Spoofing attack | Denial of service (DoS) | Lack of payload verification | Lack of message integrity check | Fuzzing custom protocols | . ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html#1-planning",
    "relUrl": "/pages/guides/pentest-process-planning.html#1-planning"
  },"91": {
    "doc": "Planning",
    "title": "Planning",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html",
    "relUrl": "/pages/guides/pentest-process-planning.html"
  },"92": {
    "doc": "Reporting",
    "title": "IoT pentest process - Reporting",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html#iot-pentest-process---reporting",
    "relUrl": "/pages/guides/pentest-process-report.html#iot-pentest-process---reporting"
  },"93": {
    "doc": "Reporting",
    "title": "3. Reporting",
    "content": "When the penetration testing is completed, the results are gathered in a report. The report should use a standardized structure in order to facilitate comprehension, analysis and comparison with other pentest projects. The hacking thesis guidelines describes how the thesis report should be structured. Please remember to document all tests, not just the successful ones. If no test is successful, it is still possible to write a valuable report (stating we could not find a weakness in the product). The ideal outcome is that each test (successful and unsuccessful) can be expressed as an attack graph with explanatory metrics such as TTC (Time To Compromise). In addition to this, if a previously unknown vulnerability is identified and exploited additional steps should be taken for responsible disclosure. ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html#3-reporting",
    "relUrl": "/pages/guides/pentest-process-report.html#3-reporting"
  },"94": {
    "doc": "Reporting",
    "title": "Reporting",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html",
    "relUrl": "/pages/guides/pentest-process-report.html"
  },"95": {
    "doc": "Previous Work",
    "title": "Previous Work",
    "content": "See previous projects, published theses and discovered vulnerabilties here. ",
    "url": "http://localhost:4000/pages/previous-work.html",
    "relUrl": "/pages/previous-work.html"
  },"96": {
    "doc": "Purchase Form",
    "title": "Purchase Form",
    "content": "If you need any special equipment for your thesis, you can request that the lab purchases it here. Name: Email: Expected start date of thesis: Degree of thesis: Bachelor's Master's URL(s) of product(s): Who is the supervisor of the project? What is the expected cost of the device? Has your supervisor approved of the purchase? Yes No ",
    "url": "http://localhost:4000/pages/thesis_guidelines/purchase_form.html#purchase-form",
    "relUrl": "/pages/thesis_guidelines/purchase_form.html#purchase-form"
  },"97": {
    "doc": "Purchase Form",
    "title": "Purchase Form",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/purchase_form.html",
    "relUrl": "/pages/thesis_guidelines/purchase_form.html"
  },"98": {
    "doc": "Radio Hacking",
    "title": "Radio Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/radio.html",
    "relUrl": "/pages/guides/radio/radio.html"
  },"99": {
    "doc": "Registration",
    "title": "Registration and formalities",
    "content": "Registration and other formalities differ between programs. Therefore, you will typically need to consult your bachelor or master coordinator to bring about the registration. You will normally also need to find a supervisor and and an examiner. For hacking projects at the NSE department, you can talk to Prof. Pontus Johnson about supervision, and Mathias Ekstedt or Robert Lagerström about examiners (for some programs, examiners may be appointed without your involvement). Different programs will demand different information, specifications or project plans as a basis for approval of the thesis project. There is ongoing work at the EECS school to harmonize the formal process regarding master thesis projects. More information is available here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/registration.html#registration-and-formalities",
    "relUrl": "/pages/thesis_guidelines/registration.html#registration-and-formalities"
  },"100": {
    "doc": "Registration",
    "title": "Registration",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/registration.html",
    "relUrl": "/pages/thesis_guidelines/registration.html"
  },"101": {
    "doc": "Related work",
    "title": "Related work",
    "content": "You need to demonstrate to the reader that you have a good understanding of the previous work in the domain. You can do that in the threat modeling section of your report. Describe each relevant attack vector in the general case (not specifically related to the product that you are investigating, but rather the class of such products). Refer to sources (e.g. papers or presentations at security conferences, blogs etc.). To convince the reader that you have considered all relevant attacks, make sure to present a significant number of references to previous attacks (presentations on hacker conferences such as DefCon and BlackHat, CVEs, blog posts, etc). Another good idea is to refer to a more or less comprehensive taxonomy or list of attacks. You should at least consider the most important attacks such as OWASP’s IoT Top 10, OWASP’s Top 10, and OWASP’s Top 10 Mobile. Depending on the unit you are testing, other taxonomies might become relevant, including ETSI EN 303 645 Cyber Security for Consumer Internet of Things: Baseline Requirements, The Cyber Security Body Of Knowledge (CyBOK), Mitre’s Common Weakness Enumeration (CWE), Mitre’s CAPEC, Hezam et al., HackerOne’s taxonomy, BugCrowd’s Common Android App Vulnerabilities, OWASP’s Testing Guide, Mitre’s ATT&amp;CK, and of course the STRIDE threat model. Another, increasingly useful, source of related work is the set of previous hacking thesis projects. In particular, you may find interesting related work in the references to thesis reports targeting devices similar to the ones you are considering. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/related_work.html",
    "relUrl": "/pages/thesis_guidelines/related_work.html"
  },"102": {
    "doc": "Responsible disclosure",
    "title": "Responsible disclosure",
    "content": "A discovered vulnerability should first be reported to the vendor. The vendor should then be given the opportunity to develop a patch. After the patch has been published, or in the case of an unresponsive vendor, after a certain timeframe passes, the finding should be reported to the National Vulnerability Database and made public. The Dutch National Cybersecurity Center US CERT offers a good Guide to Coordinated Vulnerability Disclosure which we recommend that you follow, setting the default disclosure timeframe to 90 days. In order to avoid mistakes, be sure to keep your supervisor informed about the disclosure process, e.g. by carbon copying the correspondence with the vendor to your supervisor. If the disclosure process takes longer time than your thesis project, you can still present your thesis, complete the course and receive your credits. KTH will, however, not publish the report until the disclosure process has completed. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/responsible_disclosure.html",
    "relUrl": "/pages/thesis_guidelines/responsible_disclosure.html"
  },"103": {
    "doc": "0x01 - Analyzing SDR",
    "title": "Analyzing SDR",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#analyzing-sdr",
    "relUrl": "/pages/guides/radio/sdr.html#analyzing-sdr"
  },"104": {
    "doc": "0x01 - Analyzing SDR",
    "title": "1. Software Defined Radio (SDR) internals",
    "content": ". | Devices communicate each other via radio signals | Without SDR . | different radio signal processing hardware is required | for the devices which communicate with different frequency | . | Allows to change functionality without touching the SDR hardware (receiver/transmitter) . | no longer need different SDR hardware for different devices | . | Allows to implement radio processing functionalities | Allows to work with an extremely large frequency range . | Logic . | transmitter | Wi-Fi router | . | modulate | data is modulated by the router with a carrier signal (of 2.4 GHz) | . | transmit | Wi-Fi router passes the final signal to air via antenna | . | receiver | wireless chip inside the laptop | . | receive | wireless chip receives signal | . | demodulate | signal is demodulated by the wireless chip to decode data to understandable format | . | Baseband signal is carried by a higher frequency wave called the carrier signal | Properties of final signal changes based on the properties of the carrier signal and the type of modulation | . | Transmitter . | Generates an electric current which is to be transmitted | Electric current emits the data which requires to be modulated | . | Modulation . | noise reduction | multiplexing | working with various bandwidth and frequencies | cable properties | etc. | . | Modulation types . | Analog Modulation | Amplitude, Frequency, SSB, and DSB modulation | . | Digital Modulation | ASK, FSK, PSK ,and QAM | . | Analog to Digital Converter (ADC) . | Most of the real-world data collected is analog data | Computers can understand digital data | SDR hardware tools contain ADC | . | Other Terminology . | Sample rate | Fast Fourier Transform (FFT) | Bandwidth | Wavelength | Frequency | Antenna | Gain | Filters | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#1-software-defined-radio-sdr-internals",
    "relUrl": "/pages/guides/radio/sdr.html#1-software-defined-radio-sdr-internals"
  },"105": {
    "doc": "0x01 - Analyzing SDR",
    "title": "2. Pentest Objectives",
    "content": ". | Decode radio protocols | Replay attack . | if there is no verification, captured data can be replied without problem | otherwise it is required jamming the signal and capturing an unused radio packet | . | Reverse engineer unknown protocol | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#2-pentest-objectives",
    "relUrl": "/pages/guides/radio/sdr.html#2-pentest-objectives"
  },"106": {
    "doc": "0x01 - Analyzing SDR",
    "title": "3. Tools",
    "content": "| OS | Ubuntu as primary OS (not VM) recommended | . | GNURadio | digital and analog signal processing C++ library | . | GQRX | based on GNURadio library provides analysis of frequency spectrums in a GUI | . | RTL-SDR | only sniff (monitor) a wide range of frequency (not capable of transmitting data) | . | HackRF | open-source hardware allows to analyze radio and to transmit data | . | Installation | apt install gqrx gnuradio rtl-sdr hackrf | . | Alternative installation | https://github.com/csete/gqrxhttps://wiki.gnuradio.org/index.php/InstallingGRFromSourcehttps://osmocom.org/projects/sdr/wiki/rtl-sdrhttps://github.com/mossmann/hackrf/wiki/OperatingSystem-Tips#installing-hackrf-tools-manually | . | RTL-SDR | 500kHz - 1766 MHz | . | HackRF | 1 MHz - 6 GHz | . | LimeSDR | 100 kHz to 3.8 GHz | . | Human ear | 20 Hz - 20kHz | . | Wi-Fi &amp; BLE | 2.4 GHz | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#3-tools",
    "relUrl": "/pages/guides/radio/sdr.html#3-tools"
  },"107": {
    "doc": "0x01 - Analyzing SDR",
    "title": "4. GNURadio",
    "content": ". | Digital and analog signal processing C++ library . | supports development in python | supports RTL-SDR, HackRF, USRP, and more hardware | GNURadio Companion is the GUI version . | save workspace as a .grc file | . | GQRX is a GUI, based on GNURadio for frequency analysis | . | Allows . | analyzing a captured signal | performing demodulation | extracting data from signals | reversing unknown protocols, and more | . | Advanced usage . | audio processing | mobile communication analysis | flight and satellite tracking | RADAR systems | . | Homework: Create a transmitter (TCP Sink) and receiver (Scope Sink) via GNURadio Companion | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#4-gnuradio",
    "relUrl": "/pages/guides/radio/sdr.html#4-gnuradio"
  },"108": {
    "doc": "0x01 - Analyzing SDR",
    "title": "5. Identify frequency (or frequency range) of the device",
    "content": ". | Online search . | look up the FCC ID of the device | manufacturer website | community forums | . | Visual inspection . | external inspection . | FCC ID might be found | . | internal inspection . | operating frequency of the oscillator might be found (433 MHZ) | . | . | Active scan . | connect hardware (i.e. RTL-SDR) to analysis computer . lsusb . | run gqrx . | select device (i.e. RTL-SDR or any hardware under test) | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#5-identify-frequency-or-frequency-range-of-the-device",
    "relUrl": "/pages/guides/radio/sdr.html#5-identify-frequency-or-frequency-range-of-the-device"
  },"109": {
    "doc": "0x01 - Analyzing SDR",
    "title": "6. Capture the transmitted data",
    "content": ". | Connect hardware (i.e. RTL-SDR) to analysis computer | Start related utility (i.e. rtl_433 utility in RTL-SDR) | Usage: rtl_433 -f &lt;axact frequency&gt; . rtl_433 -f 433920000 . | Press any buttons on the device to change transmitted data | Observe utility (i.e. rtl_433) output | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#6-capture-the-transmitted-data",
    "relUrl": "/pages/guides/radio/sdr.html#6-capture-the-transmitted-data"
  },"110": {
    "doc": "0x01 - Analyzing SDR",
    "title": "7. Replay captured radio (known as Replay attack)",
    "content": ". | If the frequency is commonly known, transmitting module can be found easily | Otherwise HackRF is required . | Method 1: 433 MHz transmitter + Arduino Nano . | Step 1: 433MHZ receiver is connected to the Arduino board . | Arduino 5V –&gt; VCC of both transmitter and receiver | Arduino GND –&gt; GND of both transmitter and receiver | Arduino D10 –&gt; Data of transmitter | Arduino D2 –&gt; Data of receiver | . | Step 2: Import Arduino library RC_Switch to Arduino IDE . | https://github.com/sui77/rc-switch | it transmits data on 433 MHz | . | Step 3: Start receiver . | execute ReceiveAdvanced implementation | https://github.com/sui77/rc-switch/blob/master/examples/ReceiveDemo_Advanced/ | it starts serial monitor at 9600 baud rate | . | Step 4: Transmit data . | press any buttons of the device | . | Step 5: Capture data . | serial terminal will show the captured data | save the captured data | . | Step 6: Replay data . | execute SendDemo implementation | https://github.com/sui77/rc-switch/tree/master/examples/SendDemo | paste the captured data as parameter to the sendTriState() method | . | . | Method 2: Hack RF . | connect it to analysis computer . hackrf_info . | store packet captures (sample rate, frequency, capture file) . hackrf_transfer –s 5 –f 433920000 –r radio.dump . | replay (sample rate, frequency, capture file) . hackrf_transfer –s 5 –f 433920000 –t radio.dump . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#7-replay-captured-radio-known-as-replay-attack",
    "relUrl": "/pages/guides/radio/sdr.html#7-replay-captured-radio-known-as-replay-attack"
  },"111": {
    "doc": "0x01 - Analyzing SDR",
    "title": "8. Decode data",
    "content": ". | When the captured data is not understandable, it is most likely to be encoded (modulated) | GNURadio companion . | Step 1 . | set the ‘Generate Options’ to WX | change the ‘sample rate’ to 1M | . | Step 2 . | move ‘RTL-SDR’ block and set frequency to 433.92 MHz | output type is ‘Complex float32’, we need to convert it to make data understandable | . | Step 3 . | move ‘Complex to Mag^2’ | connect ‘RTL-SDR’ to ‘Complex to Mag^2’ | . | Step 4 . | amplify the signal via ‘Multiply Const’ and set constant value to 20 | connect ‘Complex to Mag^2’ to ‘Multiply Const’ | . | Step 5 . | move ‘Wav File Sink’ and set output location | to save the output result to a wav file | connect ‘Multiply Const’ to ‘Wav File Sink’ | . | Step 6 . | move ‘WX GUI FFT Sink’ | connect ‘RTL-SDR’ to ‘WX GUI FFT Sink’ | . | Step 7 . | run | take the saved output wav file for decoding | . | . | Audacity . | a tool for audio analysis | without the Multiply Const the signal is weak, so the wav file resulted in meaningless data | identify modulation type . | On-Off Keying (OOK) . | a form of Amplitude-Shift Keying (ASK) modulation | shorter pulse is 0 and longer pulse is 1 | . | . | convert all pulses to corresponding 0 or 1 | decode binary to decimal | done | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#8-decode-data",
    "relUrl": "/pages/guides/radio/sdr.html#8-decode-data"
  },"112": {
    "doc": "0x01 - Analyzing SDR",
    "title": "0x01 - Analyzing SDR",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html",
    "relUrl": "/pages/guides/radio/sdr.html"
  },"113": {
    "doc": "SOHO Device Exploitation",
    "title": "SOHO Device Exploitation",
    "content": "Among the very many to be found on the Internet, here is one interesting write-up of the discovery and exploitation process of a SOHO device (a Netgear router). Another interesting study on router security was performed by the Fraunhofer Institute in 2020, finding a surprising number of vulnerabilities. Here is yet another mass router study, by The American Consumer Institute in 2018, which also discovered a remarkably large set of vulnerabilities. ",
    "url": "http://localhost:4000/pages/guides/Wireless/soho-device_exploitation.html",
    "relUrl": "/pages/guides/Wireless/soho-device_exploitation.html"
  },"114": {
    "doc": "0x03 - Analyzing SPI",
    "title": "Analyzing SPI (Serial Peripheral Interface)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#analyzing-spi-serial-peripheral-interface",
    "relUrl": "/pages/guides/hardware/spi.html#analyzing-spi-serial-peripheral-interface"
  },"115": {
    "doc": "0x03 - Analyzing SPI",
    "title": "1. SPI protocol internals",
    "content": ". | Designed for synchronous serial communication between the master and slave devices | Master controls the clock for all the slaves . | fastest serial clock speed in SPI is half the speed of the master clock | . | SPI (Serial Peripheral Interface) implementation standard is not strict . | manufacturers design as their wish | . | Need to look up the datasheet to understand SPI implementation protocol . | SPI advantages . | Speed is not limited (has faster data transmission rates compared to I2C) | Full-duplex (both read and write data happens at the same time) | . | SPI downside . | Single master protocol | Consists of 3 pins for data transfer and one pin for Chip/Slave select . | increases the overall requirement of space compared to I2C | when there is no data to read, when there is a write request, . | the slave should send dummy data to make the connection established | . | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#1-spi-protocol-internals",
    "relUrl": "/pages/guides/hardware/spi.html#1-spi-protocol-internals"
  },"116": {
    "doc": "0x03 - Analyzing SPI",
    "title": "2. Pentest objectives",
    "content": ". | Get console access . | custom bootloaders are designed to prevent from entering single user mode | but that can also be bypassed | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/spi.html#2-pentest-objectives"
  },"117": {
    "doc": "0x03 - Analyzing SPI",
    "title": "3. Tools",
    "content": ". | SPI Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | . | spiflash.py | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#3-tools",
    "relUrl": "/pages/guides/hardware/spi.html#3-tools"
  },"118": {
    "doc": "0x03 - Analyzing SPI",
    "title": "4. Identify the SPI Flash pinouts",
    "content": ". | Open the device | Visually identify the SPI flash chip on the PCB | Note the component number printed on the SPI chip | Look up online for the datasheet to figure out the pinouts . | SPI pins . | SCK | Serial Clock | . | MOSI | Master Out Slave In | . | MISO | Master In Slave Out | . | SS—Slave Select | (Active Low, output from master) | . | SCK, MISO, and MOSI pins are shared by slaves | Each SPI slave will have its own unique SS pin | Master have several SS pins (SS1, SS2, …) | Mater-slave connection table . | SPI Master | SPI Slave | . | SCK | SCK | . | MOSI | MOSI | . | MISO | MISO | . | SS1 | SS | . | Master configures the clock frequency according to the slave’s clock frequency | Master selects the slave device with a logic level 0 on the SS pin | Master initiates the communication by sending a bit on the MOSI line . | which is read by the slave | whereas the slave sends a bit on the MISO line which is read by the master | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#4-identify-the-spi-flash-pinouts",
    "relUrl": "/pages/guides/hardware/spi.html#4-identify-the-spi-flash-pinouts"
  },"119": {
    "doc": "0x03 - Analyzing SPI",
    "title": "5. Connecting EEPROM",
    "content": ". | Method 1: Hooking . | hook mini probes to the SPI flash | . | Method 2: SOIC clip . | use a SOIC clip | . | Method 3: Desoldering . | remove SPI flash the from the PCB by de-soldering | solder it on a EEPROM adapter (or reader) . | use an adapter which is suitable for EEPROM packaging type | . | . | Adapter (Attify Badge) pin layout . | D0 | SCK Serial Clock | . | D1 | MISO Master In Slave Out | . | D2 | MOSI Master Out Slave In | . | D3 | CS Chip Select | . | Connect the SPI flash pins to the adapter (Attify Badge) . | SPI flash | Adapter | . | CLK | TCK (D0) | . | MOSI/DO | TDI (D1) | . | MISO/DI | TDO (D2) | . | CS | TMS (D3) | . | WP, HOLD, and Vcc | 3.3V | . | GND | GND | . | Connect the adapter to the analysis PC via USB | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#5-connecting-eeprom",
    "relUrl": "/pages/guides/hardware/spi.html#5-connecting-eeprom"
  },"120": {
    "doc": "0x03 - Analyzing SPI",
    "title": "6. Reading data",
    "content": ". | Read data from the device using an SPI flash | Use the spiflash.py script . /libmpsse ./configure make make install spiflash.py -s 5120000 --read=new.bin . | Dump the contents to a file | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#6-reading-data",
    "relUrl": "/pages/guides/hardware/spi.html#6-reading-data"
  },"121": {
    "doc": "0x03 - Analyzing SPI",
    "title": "7. Writing data",
    "content": ". | Write data to the SPI flash | Use the spiflash.py script . spiflash.py -s 5120000 -w new.bin . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#7-writing-data",
    "relUrl": "/pages/guides/hardware/spi.html#7-writing-data"
  },"122": {
    "doc": "0x03 - Analyzing SPI",
    "title": "0x03 - Analyzing SPI",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html",
    "relUrl": "/pages/guides/hardware/spi.html"
  },"123": {
    "doc": "Start/stop the Service",
    "title": "Start/Stop the service",
    "content": "In order to start or stop the service you need to change the amount of fuzzing bots (servers on the GCP that run the fuzzing tasks) that are associated with the project. By setting this to 0 you stop the fuzzing service. You then need to shut down the GCP web server hosting the Clusterfuzz website. Leaving both of these services running for an indeterminate time can incur high fees for NSE! . ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#startstop-the-service",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#startstop-the-service"
  },"124": {
    "doc": "Start/stop the Service",
    "title": "Changing the number of fuzzing bots",
    "content": "You need to make sure you’ve set up the configuration environment from the previous section. The file where you can change this setting is: Clusterfuzz-configuration/gce/clusters.yaml . The file will begin with the following configurations, if you’d like to turn the service off set the instance_count on both clusters to 0, if you’d like to turn it on set it to a positive number, such as 2. # Regular bots run all task types (e.g fuzzing, minimize, etc). clusterfuzz-linux: gce_zone: gce-zone instance_count: 1 instance_template: clusterfuzz-linux distribute: False # Pre-emptible bots must have '-pre-' in name. They only run fuzzing tasks. clusterfuzz-linux-pre: gce_zone: gce-zone instance_count: 2 instance_template: clusterfuzz-linux-pre distribute: False . Once you’ve made your changes you need to deploy them. This can be done using the following command: . python butler.py deploy --config-dir=$CONFIG_DIR --prod --force . Be aware that it can take a few minutes after you’ve deployed until your changes are reflected in the Google Cloud Platform. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#changing-the-number-of-fuzzing-bots",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#changing-the-number-of-fuzzing-bots"
  },"125": {
    "doc": "Start/stop the Service",
    "title": "Web service",
    "content": "Go to the url https://console.cloud.google.com/appengine/settings and disable the web application. You may need special privileges to complete this action. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#web-service",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#web-service"
  },"126": {
    "doc": "Start/stop the Service",
    "title": "Start/stop the Service",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html",
    "relUrl": "/pages/guides/fuzzing/start-stop.html"
  },"127": {
    "doc": "The Law",
    "title": "The law",
    "content": "It is important to not break the law. Therefore, we need to understand it. There are at least four laws that are of concern for a (Swedish) hacker: . | Brottsbalken 4 kap. 9c §: “Den som olovligen bereder sig tillgång till en uppgift som är avsedd för automatiserad behandling eller olovligen ändrar, utplånar, blockerar eller i register för in en sådan uppgift döms för dataintrång till böter eller fängelse i högst två år. Detsamma gäller den som olovligen genom någon annan liknande åtgärd allvarligt stör eller hindrar användningen av en sådan uppgift. Är brottet grovt, döms för grovt dataintrång till fängelse i lägst sex månader och högst sex år. Vid bedömande av om brottet är grovt ska det särskilt beaktas om gärningen har orsakat allvarlig skada eller avsett ett stort antal uppgifter eller annars varit av särskilt farlig art. Lag (2014:302).” | Lagen om företagshemligheter (brand new): “1 § Lagen innehåller bestämmelser om skadestånd, vitesförbud och straff vid obehöriga angrepp på företagshemligheter.” | Lagen om upphovsrätt till litterära och konstnärliga verk: “2 § Upphovsrätt innefattar, med de inskränkningar som föreskrivs i det följande, uteslutande rätt att förfoga över verket genom att framställa exemplar av det och genom att göra det tillgängligt för allmänheten, i ursprungligt eller ändrat skick, i översättning eller bearbetning, i annan litteratur- eller konstart eller i annan teknik.” | 8 § Den som olovligen bereder sig tillgång till ett meddelande, som ett post- eller telebefordringsföretag förmedlar som postförsändelse eller i ett elektroniskt kommunikationsnät, döms för brytande av post- eller telehemlighet till böter eller fängelse i högst två år. Lag (2012:280). | . Regarding 1, the rule of thumb is: Don’t hack someone else’s property. For IoT devices, for instance, you can hack the actual device if you/KTH own(s) it, but you may not attempt to hack the associated Cloud server, owned by the vendor. You can interact with the server in the intended way, though, of course, and you can monitor the traffic. Regarding 2, 4 § is the key: “4 § Lagen gäller endast obehöriga angrepp på företagshemligheter. Som ett obehörigt angrepp anses aldrig att någon angriper en företagshemlighet för att offentliggöra eller inför en myndighet eller ett annat behörigt organ avslöja något som . | skäligen kan misstänkas utgöra brott med fängelse i straffskalan, eller | kan anses utgöra något annat missförhållande och offentliggörandet eller avslöjandet sker till skydd för allmänintresset.” | . An argument might be that finding and responsibly disclosing vulnerabilities is carried out for the protection of the general interest (“till skydd för allmänintresset”). Regarding 3, that law is intended to prevent the reproduction of original texts, which of course is not the intent of an ethical hacker. Nevertheless, there are some unfortunate paragraphs limiting the rights to decompile object code. The law does state that “Den som har rätt att använda ett datorprogram får iaktta, undersöka eller prova programmets funktion för att fastställa de idéer och principer som ligger bakom programmets olika detaljer.” This is sometimes called “observationsrätten”. There is a rather obscure restriction of the right to observe, though: “Detta gäller under förutsättning att det sker vid sådan laddning, visning på skärm, körning, överföring eller lagring av programmet som han har rätt att utföra.” . One problem for ethical hackers is copyright laws with respect to reverse engineering, which may be considered a kind of copying/translation. In Europe decompilation is explicitly allowed for the purposes of interoperability: “26 h § Återgivning av ett datorprograms kod eller översättning av kodens form är tillåten om åtgärderna krävs för att få den information som är nödvändig för att uppnå samverkansförmåga mellan programmet och ett annat program.” So, as long as the intent is to achieve some kind of interoperability, then code may be reversed. There is even a European case where the law was employed to the advantage of the reverse engineers, SAS Institute Inc v World Programming Ltd. However, if interoperability is not the objective, then it is rather unclear exactly what is allowed. Finally, the law states that contracts or end-user license agreements are unable to void the user’s rights as per the above: “Avtalsvillkor som inskränker användarens rätt enligt denna paragraf är ogiltiga.” My take on this is that ethical hacking is unproblematic wrt copyright except for the case of reverse engineering. For reverse engineering, the purpose should be to achieve interoperbility with an external program. If you encounter any unclear situations, don’t hesitate to discuss with your supervisor. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/the_law.html#the-law",
    "relUrl": "/pages/thesis_guidelines/the_law.html#the-law"
  },"128": {
    "doc": "The Law",
    "title": "The Law",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/the_law.html",
    "relUrl": "/pages/thesis_guidelines/the_law.html"
  },"129": {
    "doc": "Thesis Report",
    "title": "Thesis report",
    "content": "There are two goals with the thesis report: . | To convince a critical reader that you indeed have answered your research question (which typically for hacking projects is something like “Is device X secure against cyber attacks?”). | To convince a critical reader that you fulfill the requirements for a thesis project. | . Try to make sure (i) that everything you write in the report actually contributes to the above, and (ii) that it is clear to the reader to what goal each paragraph and section contributes. When writing the report, try to imagine the objections of a very critical reader, and try to make sure that your report responds to those objections as well as possible. Do iterate your report with your supervisor a few times during the thesis project, e.g. (i) the outline, (ii) the threat analysis, (iii) critical parts of your penetration testing, (iv) the final report. The final report can be organized as follows: . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#thesis-report",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#thesis-report"
  },"130": {
    "doc": "Thesis Report",
    "title": "Introduction",
    "content": "Provide the introduction, state the objectives of the project, delimitations, and outline the rest of the report. Explain the societal relevance of your work. For whom and why is your work of interest? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#introduction",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#introduction"
  },"131": {
    "doc": "Thesis Report",
    "title": "Background/Theory",
    "content": "General background and general theory can be placed in this section. If the system is based on some relevant theory, such as cryptography, database theory, operating system theory, networking theory, etc, that theory can be presented here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#backgroundtheory",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#backgroundtheory"
  },"132": {
    "doc": "Thesis Report",
    "title": "Methodology",
    "content": "Describe how you approach the thesis project. Typcically this includes your threat modeling methodology and your penetration testing methodology. Convince the reader that your methodology ensures that you don’t miss any important attacks and that your explorations will be convincing. Base your method on established methods (check out the Method section in these master thesis guidelines), or justify why not. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#methodology",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#methodology"
  },"133": {
    "doc": "Thesis Report",
    "title": "Selection of system",
    "content": "If you have been involved in the selection of the system to be explored (e.g. by using the criteria detailed here), then justify your choice in this section. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#selection-of-system",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#selection-of-system"
  },"134": {
    "doc": "Thesis Report",
    "title": "The system under consideration",
    "content": "Describe the functionality and technology of the system under consideration. Even though you discovered some aspects of the system behavior and structure during penetration tests, you should probably still write about it here. The name of this chapter can be the name of that system rather than “The system under consideration”. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#the-system-under-consideration",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#the-system-under-consideration"
  },"135": {
    "doc": "Thesis Report",
    "title": "Related work",
    "content": "Here, you should describe relevant work previously performed by other researchers. You should include all discovered vulnerabilities of the specific device you are investigating, but also published penetration tests of devices of other brands in the same device category. Oftentimes, there are important similarities between devices of different categories (smart power sockets may have many protocol similarities with smart light bulbs, for instance). It will therefore generally be relevant to also consider such related work. Read more about related work here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#related-work",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#related-work"
  },"136": {
    "doc": "Thesis Report",
    "title": "Threat model",
    "content": "Draw one or several thread modeling diagrams of the system. Detail each attack that the system could be subjected to. Describe each relevant attack vector in the general case (not specifically related to your system under consideration). Refer to solid sources (e.g. papers or presentations to security conferences). Describe your assessment of each threat or threat type as applied to your system. Estimate the potential impact and the probability of successful exploitation. Carefully choose a limited set of attack vectors (and convincingly motivate that choice) for the penetration testing phase of the project. Document, e.g. in the threat model, how thoroughly you have explored each attack. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#threat-model",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#threat-model"
  },"137": {
    "doc": "Thesis Report",
    "title": "Penetration testing",
    "content": "Describe the actual penetration tests here. Penetration testing task #1 . If the test is simple, then you won’t need all the subheadings below. Otherwise, you might. Introduction . | Describe the attack vector to be explored | . Background . | If the attack vector is based on particular theory (e.g. SQL injection requires some database theory), then that theory can be described here. | . Method . | Describe how the testing is performed | . Results . | Describe your findings | . Discussion . | Discuss the reliability, validity and generalizability of your findings. If you found a vulnerability, how serious is it? If the system withstood the attack, how important is that? Why? How much can the reader trust your results? To what extent were you able to answer your research question? | . Penetration testing task #2 . … . Penetration testing task #n . … . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#penetration-testing",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#penetration-testing"
  },"138": {
    "doc": "Thesis Report",
    "title": "Sustainability and ethics",
    "content": "Describe the ramifications of your work with respect to sustainability and ethics. Considering ethics, you can, for instance, describe how you have navigated the law, responsible disclosure, etc. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#sustainability-and-ethics",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#sustainability-and-ethics"
  },"139": {
    "doc": "Thesis Report",
    "title": "Results",
    "content": "Summarize all the identified attack vectors in your threat traceability matrix. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#results-1",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#results-1"
  },"140": {
    "doc": "Thesis Report",
    "title": "Discussion",
    "content": "Summarize the reliability, validity, and generalizability of your findings. How secure is the tested device, all things considered? How much can the reader trust your results? To what extent were you able to answer your research question? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#discussion-1",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#discussion-1"
  },"141": {
    "doc": "Thesis Report",
    "title": "Conclusions",
    "content": "How secure is the system? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#conclusions",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#conclusions"
  },"142": {
    "doc": "Thesis Report",
    "title": "References",
    "content": "Use citations to (i) support any claims you make that the reader might not agree with, (ii) give credit to the authors and creators (important to avoid accusations of plagiarism), and (iii) demonstrate that you have studied all the relevant background material. This is especially important to show that your threat model is comprehensive - that you have considered all relevant attacks. Guidance on reference format can be found here. An example of a previous thesis report can be found here, and many more here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#references",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#references"
  },"143": {
    "doc": "Thesis Report",
    "title": "Thesis Report",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html"
  },"144": {
    "doc": "Things to hack",
    "title": "Things to hack",
    "content": "There are many potential targets for security assessments. Below are some suggestions, and if there is some product missing from the lab that you would like to use for your thesis you can head to the purchase form page. | Power grid asset management equipment | Smart electricity meters | SCADA control system equipment such as programmable logic controllers (PLCs) | Open source IoT operating systems such as TinyOS, RIOT, Contiki, Mantis OS, Nano RK, LiteOS, FreeRTOS, Apache Mynewt, Zephyr OS, Ubuntu Core 16 (Snappy), ARM mbed, Yocto and Raspbian. | Google PlayStore 100M-user apps. Google offers a bug bounty on the biggest apps, which also vouches for the legality of security testing them. | Alarm systems | nRF9160 which is used in a lot of IoT devices. Explore with Nordic Thingy:91. | JetBrain’s Code with Me. Jetbrains are a suspected attack vector in the recent SolarWinds attack. | Open source, like linux, nginx, apache, openssl, kvm, bash, vim, imagemagick, etc. | Sport-related equipment, e.g. Garmin’s sports watches, appear to feature large attack surfaces. | Health-related equipment, such as blood glucose meters, even pace makers, if we can get a hold of one | Smart power sockets and other home automation equipment | Smart glasses | VR headset | Robots | Baby monitors and similar home surveillance systems | Internet-connected toys (dolls with microphones, etc.) | Vehicle entertainment systems | Headphones | Industrial IoT (Cranes, heavy machinery, trucks) | Smart refrigerators | Connected pets? | Smart car alarms | Vehicles, e.g. electronic scooters | Electric mopeds (some come with GPS, smartphone apps and a kill switch, now-a-days). | OBD II dongles used to connect your smart phone to your car | Drones | Robot vacuum cleaners (particularly interesting if they have a camera) | Electronic door locks | Childrens’ smart watches | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/things_to_hack.html",
    "relUrl": "/pages/thesis_guidelines/things_to_hack.html"
  },"145": {
    "doc": "Threat Traceability Matrix",
    "title": "Threat traceability matrix",
    "content": "A threat traceability matrix is an excellent structure for presenting your threat analysis as well as the results of your penetration testing. Ideally, you would include the following information in your threat traceability matrix: . | the threat agent, | the affected asset, | the attack surface, | the attack goal, | the attack, | the attack impact, if successful, | references to related work, e.g. to vulnerabilities in similar products, or to descriptions of the kind of vulnerability and/or exploit, | estimated probability of success (refer the reader to the location in the report where you motivate your estimate). | whether you have attempted this attack (if you have, refer the reader to the appropriate section; if you haven’t, refer the reader to the location in the report where you motivate that delimitation), | the results of potential penetration tests. | . The threat traceability matrix should allow the reader of your report to easily find answers to the following questions: . | Have you considered all relevant attacks? You can strengthen this by providing good and exhaustive references to related work. | Have you performed penetration tests of the most important attacks? Here, the motivation of your probability of attack success will be important to convince the reader that your focus was correct. | Did your penetration tests succeed? | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html#threat-traceability-matrix",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html#threat-traceability-matrix"
  },"146": {
    "doc": "Threat Traceability Matrix",
    "title": "Risk matrix",
    "content": "If you like, you can plot your threats in a risk matrix, which will clearly indicate which threats are worthy of penetration testing. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html#risk-matrix",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html#risk-matrix"
  },"147": {
    "doc": "Threat Traceability Matrix",
    "title": "Threat Traceability Matrix",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html"
  },"148": {
    "doc": "Tutoring",
    "title": "Your tutor is not your examiner",
    "content": "While the examiner assesses your performance and thus acts in a role of authority, your tutor is only there to assist. Thus, interaction with your tutor is completely voluntary. Thus, if you feel confident that you are on the right track, then you don’t need to participate in the activities below. If, on the other hand, you are not quite sure about the requirements on your project, or if you need technical, authoring or project planning assistance, then your tutor will try to help out. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#your-tutor-is-not-your-examiner",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#your-tutor-is-not-your-examiner"
  },"149": {
    "doc": "Tutoring",
    "title": "Your tutor is not your program coordinator",
    "content": "Your program coordinator will be able to respond to questions about scheduling, report submission requirements, thesis presentation and opposition. Your tutor is typically not involved in these requirements and activities, which differ significantly between programs. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#your-tutor-is-not-your-program-coordinator",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#your-tutor-is-not-your-program-coordinator"
  },"150": {
    "doc": "Tutoring",
    "title": "Synchronous tutoring meetings",
    "content": "During spring of 2021, Pontus Johnson offers videoconferencing tutoring meetings over Zoom every Friday at 09:00-10:00 for those who would like to meet synchronously. In a typical session, each participant updates the group on their project, describes if there are any issues that require assistance, and poses some questions. If you prefer to simply listen in, that is also possible. Some sessions may be cancelled or rescheduled. If so, that is communicated via ssas-students.slack.com. The Zoom meeting ID is 65208818819. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#synchronous-tutoring-meetings",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#synchronous-tutoring-meetings"
  },"151": {
    "doc": "Tutoring",
    "title": "Asynchronous tutoring",
    "content": "Beyond the weekly meeting, you may receive assistance from your supervisor over Slack (ssas-students.slack.com - ask your supervisor to register you if you are not already) or email. Much tutoring consists of reading and commenting on drafts of the thesis report. If you desire prompt feedback, please agree on a date for submitting your draft to your supervisor. That way, the supervisor can book the required reading time in the agenda, and thus provide very prompt feedback. Otherwise, response time will depend on how heavily booked the supervisor happens to be when the draft is received. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#asynchronous-tutoring",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#asynchronous-tutoring"
  },"152": {
    "doc": "Tutoring",
    "title": "Weekly update",
    "content": "A good way to keep in contact with your tutor - in particular if you didn’t join the weekly Zoom meeting - is by submitting a weekly update (over ssas-students.slack.com or per e-mail), responding to these questions: . | What has happened since last update? | What are your plans for the coming work? | Do you need assistance? | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#weekly-update",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#weekly-update"
  },"153": {
    "doc": "Tutoring",
    "title": "Tutoring",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html",
    "relUrl": "/pages/thesis_guidelines/tutoring.html"
  },"154": {
    "doc": "0x01 - Analyzing UART",
    "title": "Analyzing UART",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#analyzing-uart",
    "relUrl": "/pages/guides/hardware/uart.html#analyzing-uart"
  },"155": {
    "doc": "0x01 - Analyzing UART",
    "title": "1. UART internals",
    "content": ". | Designed for two different components on a device to talk to each other | Microcontroller chip in devices typically have UART pins | UART is a way of serial communication | Common serial channels (TTL, RS232, USB, PCI, HDMI, SPI, I2C, CAN) . | TTL interface has 3-5 pins | RS-232 interface has a 9-pin connector, etc. | . | These interfaces are also used for debugging (testing connections) the device . | UART Data packet . | starting bit (usually 0) | message (any 8-bits) | parity bit (not used) | stop bit (usually 1) | . | UART Data packet format (usual configuration) . | 8N1 — which means 8 message bits, no parity bit, and 1 stop bit | . | UART Port type . | hardware-based or software-based | when there is not enough UART ports on chipset . | UART is emulated via GPIO (means software UART) | it is a rare situation | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#1-uart-internals",
    "relUrl": "/pages/guides/hardware/uart.html#1-uart-internals"
  },"156": {
    "doc": "0x01 - Analyzing UART",
    "title": "2. Pentest objectives",
    "content": ". | Access debug logs that usually contains a booting sequence | (might) allow bootloader access while the device is booting | (might) provide unauthenticated root shell (console access) | (might) provide loading firmware over the network | and more . | Custom bootloaders are designed to prevent from entering single user mode . | but that can also be bypassed. | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/uart.html#2-pentest-objectives"
  },"157": {
    "doc": "0x01 - Analyzing UART",
    "title": "3. Tools",
    "content": ". | Multimeter | Logic analyzer (for analyzing data packet) . | Saleae Logic Analyzer (or) | Open Workbench Logic Sniffer | . | UART Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | baudrate.py | . | Communication . | minicom (or) | screen (or) | Attify Badge GUI | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#3-tools",
    "relUrl": "/pages/guides/hardware/uart.html#3-tools"
  },"158": {
    "doc": "0x01 - Analyzing UART",
    "title": "4. Identify UART pinouts",
    "content": ". | Look for the shape online to learn | Visual inspection of the internal device components . | looking for 3/4 pins or pads close to each other | rarely scattered across the board | . | UART pins . | Pin | Function | . | Transmit (Tx) | Transmits data from the device to the target | . | Receive (Rx) | Receives data from the target to the device | . | Ground (GND) | Ground | . | Voltage (Vcc) | Usually either 3.3V or 5V | . | Chipset will have instructions on the connectors, otherwise use a | Multimeter . | continuity test (for GND) . | make sure the device is turned off | set the pointer to continuity | place the black probe on a ground surface (any metal part on device) | place the red probe on each of the four pads one by one | the pin is giving the beep sound is the GND | . | voltage difference (for the Tx, Rx, Vcc) . | set the pointer to V-20 | place the black probe to GND | turn device on | place the red probe over other pins | constant high voltage is our Vcc pin . | reboot the device | place the red probe over the other pins | huge fluctuation in the voltage value is Tx pin . | during the initial 10–15 seconds | . | lowest voltage during entire process is Rx | . | . | Confirm the findings by hooking up a logic analyzer | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#4-identify-uart-pinouts",
    "relUrl": "/pages/guides/hardware/uart.html#4-identify-uart-pinouts"
  },"159": {
    "doc": "0x01 - Analyzing UART",
    "title": "5. Connecting UART",
    "content": ". | A converter device for emulating a serial connection . | to communicate two devices over UART/JTAG/I2C,SPI,GPIO | USB-TTL or BusPriate or Attify Badge | . | A proper voltage converter . | i.e. when using a 3.3v serial device to a 5v serial device | serial connection emulators have built-in | . | Adapter (Attify Badge) pin layout . | Pin | Function | . | D0 | Tx Transmit | . | D1 | Rx Receive | . | Connect the EEPROM pins to the adapter (Attify Badge) by using jumper wires . | UART | Adapter | . | Tx | Rx | . | Rx | Tx | . | GND | GND | . | Vcc | is NOT connected | . | Connect the adapter to the analysis PC via USB . | learn the mount point under /dev | by default mounted on COM port /dev/USB0 | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#5-connecting-uart",
    "relUrl": "/pages/guides/hardware/uart.html#5-connecting-uart"
  },"160": {
    "doc": "0x01 - Analyzing UART",
    "title": "6. Command shell",
    "content": ". | Baud rate specifies the number of bits transmitted per second . | data being transferred between devices = data rate | . | Identify the baud rate of the device . | common rates: 9600, 38400, 19200, 57600, and 115200 | otherwise, find it by trial and error | . baudrate.py . | change baud rates while establishing a serial connection | visually inspect which baud rate gives the readable output | after detecting correct baud rate press Ctrl + C | . | Interacting with console . | screen &lt; mount point &gt; &lt; baud rate &gt; | . screen /dev/ttyUSB0 38400 . | reboot the device | access debug logs of the device booting up process | right after booting, “busybox” is up | unauthenticated root shell on the device | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#6-command-shell",
    "relUrl": "/pages/guides/hardware/uart.html#6-command-shell"
  },"161": {
    "doc": "0x01 - Analyzing UART",
    "title": "0x01 - Analyzing UART",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html",
    "relUrl": "/pages/guides/hardware/uart.html"
  },"162": {
    "doc": "Wi-Fi MITM",
    "title": "Wi-Fi Router MITM",
    "content": "We can perform a man-in-the-middle-attack on any Wi-Fi and Ethernet connection that goes through the lab’s router. We use the command tcpdump to capture all the traffic that goes through the router and then pipe that data into our machine and analyse it with Wireshark. You can use the Kali desktop in the lab or any computer which has a connection to the router and the appropriate tools. Type in this command in terminal (replacing routers.ip with the actual IP of the router): . ssh root@routers.ip tcpdump -U -w - -i br0 not port 22 | wireshark -k -i - . You will then be prompted for the root password for the router, once you’ve entered this Wireshark should open and you will be able to begin analysing traffic. You can edit the tcpdump command to your specification, but remember that the ‘not port 22’ part is neccesary to avoid seeing the SSH packets being sent between your computer and the router. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#wi-fi-router-mitm",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#wi-fi-router-mitm"
  },"163": {
    "doc": "Wi-Fi MITM",
    "title": "TLS",
    "content": "If TLS is implemented, it can still be vulnerable. https://www.youtube.com/watch?v=gmYcsdXT3W8 . ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#tls",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#tls"
  },"164": {
    "doc": "Wi-Fi MITM",
    "title": "Wi-Fi MITM",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html"
  },"165": {
    "doc": "Wireless Hacking",
    "title": "Wireless Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/wireless.html",
    "relUrl": "/pages/guides/Wireless/wireless.html"
  },"166": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "Analyzing ZigBee",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#analyzing-zigbee",
    "relUrl": "/pages/guides/radio/zigbee.html#analyzing-zigbee"
  },"167": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "1. ZigBee internals",
    "content": ". | Designed for low-power usage and low data transfer rate | Allows devices to communicate using a mesh network topology . | Stack . | Application layer | Customer application | . | Application profile | ZigBee | . | Application framework | ZigBee | . | Network layer | ZigBee | . | MAC layer | IEEE 802.15.4 | . | PHY layer | IEEE 802.15.4 | . | Coordinator . | selecting the correct channel (among 16 channels) | creating a network | forming security settings | handling authentication | (even) acting as a router | . | Router . | routes traffic in ZigBee network | . | End devices . | perform any task | usually sleep to save power | only wake up on a read or write request | . | Addressing . | MAC layer -&gt; GUID of 64-bit | NWK address -&gt; 16-bit | . | Broadcast . | send data to address 0xFFFF | . | Communication is established with 3 data . | address of the target | endpoint number | cluster ID | . | ZigBee protocol implementation in devices . | System-on-Chip (SoC) . | functions and implementation are handled in a single chip | . | Network Co-processor (NXP) . | similar to SoC | functions are handled through a serial interface (i.e. UART) | . | Microcontroller and Transreceiver . | microcontroller handles functions and implementation of ZigBee stack | Transreceiver manages PHY and MAC layer | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#1-zigbee-internals",
    "relUrl": "/pages/guides/radio/zigbee.html#1-zigbee-internals"
  },"168": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "2. ZigBee pentest objectives",
    "content": ". | Intercept (capture) traffic | Replay attack . | requires lack of CRC verification implementation | . | Jam signals | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#2-zigbee-pentest-objectives",
    "relUrl": "/pages/guides/radio/zigbee.html#2-zigbee-pentest-objectives"
  },"169": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "3. ZigBee radio development module (hardware)",
    "content": ". | Contains a combination of digital logic circuitry with analog circuits . | Xbee . | plug-in Xbee to analysis computer | run XCTU utility . | press ‘Search Radio modules’ | Select the ports to scan . | usbserial-* | . | Set port parameters . | baud rate 2400 and 9600 | 8 data bits, no parity bit, and one stop bit (8N1) | Flow control is None | . | identifies the MAC address of the radio device connected to usbserial-* port | XCTU allows to change various properties of the radio device (Xbee) . | set the channel (i.e. 16) | . | . | . | Arduino . | plug-in Xbee to Arduino board | paste the vulnerable code Xbee_Password_Core . | a simple authentication app over the ZigBee network | . | flash the code into Arduino board | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#3-zigbee-radio-development-module-hardware",
    "relUrl": "/pages/guides/radio/zigbee.html#3-zigbee-radio-development-module-hardware"
  },"170": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "4. ZigBee radio analysis (hardware)",
    "content": ". | KillerBee . | open-source toolkit for ZigBee communication analysis | supports various ZigBee sniffing hardware (i.e. Atmel RzRaven USB Stick) | . | Atmel RzRaven USB Stick . | flash the KillerBee firmware on to RzRaven using AVR Dragon over JTAG interface | plug-in RzRaven to analysis computer . | download and setup KillerBee on analysis computer . cd killerbee/tools ./zbid . | it will find RzRaven device with the Serial number FFFF… | . | Identify the channel ID of the target device (Xbee) is operating . | zbstumbler from KillerBee toolkit ./zbstumbler –v . | when a frame is received for a beacon request, it means channel is found . | . | Sniffing traffic (actually channel) . | zbdump from KillerBee toolkit ./zbdump -c &lt;CHANNEL_ID&gt; - w dump.pcap . | . | Generate traffic . | open serial monitor in Arduino | i.e. try authenticating with target device | . | Real-time analysis rather than dumping to a file . | zbwireshark from KillerBee toolkit ./zbwireshark-c &lt;CHANNEL_ID&gt; . | . | Attify ZigBee Framework . | a GUI toolkit built on top of KillerBee | set channel ID to capture, number of packets to capture, capture file location | generate traffic (press any button of the device) | . | Replaying packets (Replay attack) . | run Attify ZigBee Framework | set channel ID, delay (to 0.4), pcap file location, number of packets to replay | observe that device will function without user interaction | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#4-zigbee-radio-analysis-hardware",
    "relUrl": "/pages/guides/radio/zigbee.html#4-zigbee-radio-analysis-hardware"
  },"171": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "0x02 - Analyzing ZigBee",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html",
    "relUrl": "/pages/guides/radio/zigbee.html"
  },"172": {
    "doc": "Home",
    "title": "Home",
    "content": "# Home This site details the resources available at NSE's Cyber Security Lab and other information relating to penetration testing. Looking for a device to hack for your Bachelor's or Master's thesis? Have a look at the [IoT devices](/pages/lab-equipment/iot-devices.html) we already have to see if any interest you. Already have a target but unsure on how to start your thesis? Look at the [thesis guidelines](pages/thesis_guidelines/guidelines.html) document. ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
}
