{"0": {
    "doc": "Creating Threat Models",
    "title": "Creating threat models",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Creating%20Threat%20Models.html#creating-threat-models",
    "relUrl": "/pages/guides/Creating%20threat%20models/Creating%20Threat%20Models.html#creating-threat-models"
  },"1": {
    "doc": "Creating Threat Models",
    "title": "Creating Threat Models",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Creating%20Threat%20Models.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/Creating%20Threat%20Models.html"
  },"2": {
    "doc": "DSL",
    "title": "Step-by-Step Guide",
    "content": "This guide aims to go through the work process with creating and implementing a model. The first part tackles how to create an DSL and the second part how to simulate an attack in securiCAD. It is easiest to learn the syntax by modifying an already existing DSL, e.g exampleLang that can be found here. When you want to create your own DSL you can use the exampleLang project as a template and follow the instructions at the bottom of the README-file. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#step-by-step-guide",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#step-by-step-guide"
  },"3": {
    "doc": "DSL",
    "title": "Creating a model",
    "content": "We will use a pre-existing model for this tutorial. The model is originally from a thesis by Eric Bröndum and Christoffer Torgilsman and can be found here. The model contains of six different objects. 1. The human user 2. Trifo Home, an mobile application 3. Router 4. Ironpie m6, a robot vacuum cleaner 5. MQTT Server 6. Trifo BackEnd Server . You can make this as complicated and realistic as you like but lets keep it simple. Every object in this model is assumed to “one piece”, therefore we will not seperate software from hardware or different running applications on hardware. Lets divide the objects into two categories “Home” and “Company”. The Home-category will contain all objects that is found in the users home or what the user can interact with directly and the Company-category is what the company provides. To get started go to path-to-project/src/main/mal and create a .mal-file named the same name as you specified in the pom.xml-file at the mal.file row. For this guide sake we will name it main.mal. You can have several .mal-files if you want to divide the code up and import them. Here we will just stick to one file and two categories. Start with defining the categories . category Home{ } category Company{ } . Inside these categories we can define the assets. There are six different assets, or objects, in the model. category Home{ asset Human{ } asset TrifoHome{ } asset Router{ } asset IronpieM6{ } } category Company{ asset MQTTServer{ } asset BackEndServer{ } } . Same principle as always when you code: Compile often to find errors. If you want to remove the old version and compile a new run the command in the projects main folder . mvn clean install . If we were to visualize the code right now it would look like this. This image was generated by MAL-visualization. You can find the githubpage and how to install it here. Now all the assets are in place but there are no connections between these. In the model there are connections using both TCP &amp; TCP w/ssl and HTTPS between many of the assets. Before we can model these connections we first need to assiociate the assets with eachother. We will start with associating the human-object to TrifoHome. We assume that there could be more than one human in the household. They can also share a smartphone, therefore many different humans can connect to the same TrifoHome-app if they want. They can also connect to different apps if they own more than one smartphone. associations{ Human [human] * &lt;- UserInteraction -&gt; * [trifo] TrifoHome } . Lets go through what just happened. Human stands for the asset Human, and TrifoHome stands for the asset TrifoHome. These two can now connect with each other calling human and trifo. * stands for that infinite many humans can connect to infinite many trifos. And we name this association to “UserInteraction”. Lets say that TrifoHome has a function named “access”, then we can call it from the Human asset using . trifo.access . We add associations for all assets and put them at the bottom of our main.mal-file. category Home{ asset Human{ } asset TrifoHome{ } asset Router{ } asset IronpieM6{ } } category Company{ asset MQTTServer{ } asset BackEndServer{ } } associations{ Human [human] * &lt;-- UserInteraction --&gt; * [trifo] TrifoHome TrifoHome [trifo] * &lt;-- AppConnection --&gt; 1 [router] Router IronpieM6 [iron] * &lt;-- VacuumConnection --&gt; 1 [router] Router MQTTServer [server] * &lt;-- ServerConnection --&gt; 1 [router] Router BackEndServer [backend] 1 &lt;-- BackEndConnection --&gt; 1 [server] MQTTServer } . You can see that here we also have a 1 in the associations. That means that we can only connect 1 of that asset to another asset. For example, the vacuum cleaner IronpieM6 can only connect to one router, but a router can connect to infintely many vacuum cleaners. In reality we wouldn’t be able to connect infinitely many vacuum cleaners to the same router but we assume that the users of the model will not try to do that. If we visualize the model again we will see: . The assets are now associated with eachother. This means that we can start calling for assets inside other assets. It is time to start making the connections from the model. As stated earlier, these connections can be as complicated as you like with many connections within the asset itself. For example, a guessed password-function might lead to an access-function and the access-function within the asset, which connects to another asset and so on. Lets connect TrifoHome with the router. We will name two different functions, one for HTTPS and one for TCP. The code inside these two assets will look like this . asset TrifoHome { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect } asset Router { | HTTPSconnect | HTTPSaccess -&gt; trifo.HTTPSaccess | TCPconnect | TCPaccess -&gt; trifo.TCPconnect } . The first function in TrifoHome is what happens when someone connects to it through HTTPS. The second function is what will happen when you use HTTPS to access other services. Same principle for TCP. Right now nothing happens when you connect to the Router or TrifoHome. The user can specify the internal structure of the object with adding necessary functions. We add the same functions for IronpieM6. We also add a function for ssh login. For simplicity we imagine that connecting to the IronpieM6 gives us direct access to both the TCP connection and HTTPS connection. We will simulate a brute force attack on the ssh. When an attacker is added, it is assumed that they already got a foothold on that function. Therefore we need to circumvent it. This can be done by dividing the attack into two steps. First we add a function for guessing the password . asset IronpieM6 { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect | ssh -&gt; HTTPSaccess, TCPaccess | guessPassword } . The guessPassword function call another function that we will call passwordSuccess, but here we will add a probability distribution for success. This will act as a hurdle, since the person trying to brute force the login credentials will not succeed immediately. You can find what different distributions MAL supports here. There exists some pre-defined distributions, we will use “HardAndUncertain”. If you want to read more about the probability distributions and their properties you can find a list of the ones included in MAL and many more at Wikipedia or at Wolframalpha. If you want more information about probability distributions in general, then you can go to the lecture notes for the course SF2940 Probability Theory. Chapter 2 is dedicated to probability distributions. You can find the notes here. asset Router { | HTTPSconnect | HTTPSaccess -&gt; trifo.HTTPSaccess | TCPconnect | TCPaccess -&gt; trifo.TCPconnect | UDPconnect } asset IronpieM6 { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect | UDPaccess -&gt; router.UDPconnect | ssh -&gt; HTTPSaccess, TCPaccess, UDPaccess | guessPassword -&gt; passwordSuccess | passwordSuccess [HardAndUncertain] -&gt; ssh } . Lastly we can add the UDP connection between the Router and IronpieM6 and we are done with all the connections for these three assets. asset IronpieM6 { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect | ssh -&gt; HTTPSaccess, TCPaccess | guessPassword -&gt; passwordSuccess | passwordSuccess [HardAndUncertain] -&gt; ssh } . For this tutorial we won’t bother with the connections between Human, MQTTServer and BackEndServer. If would like to add them you can copy-paste from the already completed assets and change the names when you call other assets functions. Compile it and create a .jar-file for securiCAD. For more information how to get securiCAD working visit . mvn clean install mvn package -PsecuriCAD . Open up securiCAD and when the program asks to you chose a .jar-file go to . path-to-project/target . and chose your *.jar-file and load it up. We can now recreate the model in securiCAD using the objects, or assets. In this tutorial we have created assets that mimics the graph in the paper. You do not necessarily need to do that, you can create a more general DSL, e.g coreLang, that will have more use cases. This DSL is very specific for the paper. Click and drag the assets unto the canvas and connect them by holding shift and click-drag the connections between the assets. We organize the model in the same way as we organized the DSL. We attach an attacker asset to IronpieM6. When we attach the attacker we get to chose where the attacker has gained foothold. We chose GuessPassword, since that function points to our PasswordSuccess function that simulates a dictionary bruce force attack. The model is now ready for its first simulation. Press the simulate button in the top left corner. The results will show up on the right column. If we press on the asset we will see all the functions and if they are at risk. The darker color, the more risk. The reason why GuessPassword is dark is because the attacker gains 100% foothold on its first function. We have marked ssh in the image. In the lower right column you find Time to Compromise (TTC). This is a probability graph how likely it is for the attack to succeed. Since we used the probability distribution “HardAndUncertain” the probability of an attacker breaking the password will never be higher than 50%, no matter how long the attack persist. We have created connections between the IronpieM6 and the router. If we click on the router we can see that it risks to be compromised as well. Click on HTTPSconnect to see the risk for success rate that an attacker will connect through HTTPS to the router through the IronpieM6. You can produce an attack graph by pressing “Visualize Critical Path” in the “Attacks” window to the right. This generates a visual representation of the path that an attacker could take to compromise the asset. This representation will grow in size depending how large and detailed your model is. In this tutorial we have created a DSL with using MAL and compiling it into a .jar-file using foreseetis Maven repository. Then we built the model in securiCAD and ran an dictionary brute force attack simulation. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#creating-a-model",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#creating-a-model"
  },"4": {
    "doc": "DSL",
    "title": "More examples",
    "content": "We have created a simple DSL and a model to simulate attacks. Here we will extend the model. Lets imagine that our robot vacuum cleaner has protection implemented against bruteforce attacks. We can add that type of defense with the # symbol. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#more-examples",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#more-examples"
  },"5": {
    "doc": "DSL",
    "title": "Defense",
    "content": "There are two syntax rules to follow for defenses. First we need to become familiar with AND. In the step-guide we did not use AND, only OR. &amp; (or AND) means that multiple steps need to be fullfilled in order to advance. Example . &amp; step1 -&gt; step3 &amp; step2 -&gt; step3 | step3 . In order to reach step3 in the above example both step1 and step2 needs to be fullfilled. To use defense we write . &amp; step1 -&gt; step2 # defense -&gt; step2 . | Here we also use a &amp; (AND) because we need to include the defense step. If we would use | (OR) then the program would just skip the defense and go straight to step2. | . If the defense is active, then the attacker cannot reach step2 even if the attacker would could reach step1. You can set a defense to either on, off or to a probability that it is active. If it is off, then the attacker can reach step2. If you set it to a probability, then it will increase the time to compromise for the asset that you are interested in. We change the syntax for our robot vacuum cleaner to . asset IronpieM6 { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect | UDPaccess -&gt; router.UDPconnect | ssh -&gt; HTTPSaccess, TCPaccess, UDPaccess | guessPassword -&gt; passwordSuccess &amp; passwordSuccess [HardAndUncertain] -&gt; ssh # antiBruteforce -&gt; passwordSuccess } } . If you have followed the steps so far, save the model using “Save as” anywhere except under the target-folder in your project directory. That folder will be deleted if you run the command “mvn clean”. Recompile the code, create a new .jar file and restart securiCAD. When you click on the ironpieM6 you will see to the right that there exists a defense tab as well. Click on the tab adjust the defense. In the first example we will turn on the defense and run the simulation. You can see on the graph for the time to compromise that the attacker could not attack the router. Since no attack was possible we cannot generate any visualization, but we go back to the defense tab for ironpieM6 and change the defense from “On” to “Probability”, with a probability of 0.5. If we simulate an attack this time the time to compromise will decrease from step-to-step guide but there is still a chance for the attacker to reach its target. And the visualization of the attack now looks like, where the defense step is included . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#defense",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#defense"
  },"6": {
    "doc": "DSL",
    "title": "AND",
    "content": "Lets look a little bit closer on the &amp; (AND) syntax. As stated before it means that two or more steps needs to be fulfilled in order to advance. Lets imagine that the application, TrifoHome, has 2FA (two factor authentication) activated. We both need a password and a security code generated by either another application, sms, e-mail etc. We add the following lines to the TrifoHome asset . asset TrifoHome { | password -&gt; access | authentication -&gt; access &amp; access -&gt; HTTPSaccess, TCPaccess | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect } . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#and",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#and"
  },"7": {
    "doc": "DSL",
    "title": "Existence",
    "content": "Existence does exactly what it sounds like, it checks if something exists and if it does, it advances to the next step. The syntax for Existance is E. Example . E exisOrNot &lt;- checkExistence -&gt; step . Since you should not do anything illegal lets assume that you visit your friends house and they have a robot vacuum cleaner. You borrow your friends phone and try to guess the password. If you write the correct password you will be prompted to fill in the authentication code, so your friend must be in the house to be able to give it to you. We have already added the necessary AND condition in the previous topic. Now we have to add a condition if our friend is there and an attack step. asset TrifoHome { | attack -&gt; passwordAttack, tokenExists | passwordAttack [HardAndUncertain] -&gt; password E tokenExists &lt;- human -&gt; human.tokenGenerate | password -&gt; access | authentication -&gt; access &amp; access -&gt; HTTPSaccess, TCPaccess | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect } . In our human asset we need to add a step called tokenGenerate, since it is the step that we are calling for in the TrifoHome asset. asset Human { | tokenGenerate -&gt; trifo.authentication } . The step just points to the authentication, since our friend gives us the code when asked. To simulate this we need to set an attacker on the TrifoHome asset in securiCAD instead of IronpieM6 that we have used earlier. When connecting the attacker you must chose the “Attack” function as demonstrated in the step-by-step guide. Just as before, what we are really interested in is access to the router, not the app itself. The visualization would look like . Just as there exists an Exist-function, there also exists a not Exists-function. It works the same with the difference that it only goes to the second step if the checked asset does not exist. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#existence",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#existence"
  },"8": {
    "doc": "DSL",
    "title": "Conclusion",
    "content": "In this step-by-step guide we have created our own DSL with MAL, based on a model for the Ironpie m6. We started with defining the assets creating all the connections between then. Then we added attack vectors and potential vulnerabilities. You do not need to know the exact way to attack since many attacks are unknown to the victim until their occur. Therefore it is ok to create an attack named for example “Unknown attack” in which you try to forsee the consequences. We will not go through the entirety of MAL here but this should get you started with building your own DSL. You can find full MAL syntax at here. The final MAL code for this guide can be found here. Good luck! . category Home { asset Human { | tokenGenerate -&gt; trifo.authentication } asset TrifoHome { | attack -&gt; passwordAttack, tokenExists | passwordAttack [HardAndUncertain] -&gt; password E tokenExists &lt;- human -&gt; human.tokenGenerate | password -&gt; access | authentication -&gt; access &amp; access -&gt; HTTPSaccess, TCPaccess | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect } asset Router { | HTTPSconnect | HTTPSaccess -&gt; trifo.HTTPSconnect | TCPconnect | TCPaccess -&gt; trifo.TCPconnect | UDPconnect } asset IronpieM6 { | HTTPSconnect | HTTPSaccess -&gt; router.HTTPSconnect | TCPconnect | TCPaccess -&gt; router.TCPconnect | UDPaccess -&gt; router.UDPconnect | ssh -&gt; HTTPSaccess, TCPaccess, UDPaccess | guessPassword -&gt; passwordSuccess &amp; passwordSuccess [HardAndUncertain] -&gt; ssh # antiBruteforce -&gt; passwordSuccess } } category Company { asset MQTTServer { } asset BackEndServer { } } associations { Human [human] * &lt;-- UserInteraction --&gt; * [trifo] TrifoHome TrifoHome [trifo] * &lt;-- AppConnection --&gt; 1 [router] Router IronpieM6 [iron] * &lt;-- VacuumConnection --&gt; 1 [router] Router MQTTServer [server] * &lt;-- ServerConnection --&gt; 1 [router] Router BackEndServer [backend] 1 &lt;-- BackEndConnection --&gt; 1 [server] MQTTServer } . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html#conclusion",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html#conclusion"
  },"9": {
    "doc": "DSL",
    "title": "DSL",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/DSL.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/DSL.html"
  },"10": {
    "doc": "MAL",
    "title": "Meta Attack Language",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/MAL.html#meta-attack-language",
    "relUrl": "/pages/guides/Creating%20threat%20models/MAL.html#meta-attack-language"
  },"11": {
    "doc": "MAL",
    "title": "Introduction",
    "content": "Meta Attack Language (MAL) is a meta language designed to create domain specific-languages (DSL). It allows the user to create probabilistic attack graphs by defining assets and the relationship between these assets, a DSL. This allows the user to create unique networks and systems and run attack simulations without defining each asset every time. A short overview how the process work. First define the different assets and relationships in a .mal file using MAL. Then the malcompiler compile the asstes into java-classes and the relationships into java-fields. This code can then be used either through securiCAD with a license or in a java program for free. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/MAL.html#introduction",
    "relUrl": "/pages/guides/Creating%20threat%20models/MAL.html#introduction"
  },"12": {
    "doc": "MAL",
    "title": "Overview",
    "content": "MAL consists of categories, assets and associations. Categories groups assets together. For example, the category “Animals” could contain the assets “Dog”, “Cat” and “Cow”. The category “Trees” could contain the assets “Pine”, “Oak” and “Birch”. Assets defines the objects or systems that the user want to connect to eachother. Using the above example, an asset could be a dog and it contains four legs. Accessing and using these legs, the dog can walk to the cat. Associations connects the assets together. Full syntax documenation can be found here. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/MAL.html#overview",
    "relUrl": "/pages/guides/Creating%20threat%20models/MAL.html#overview"
  },"13": {
    "doc": "MAL",
    "title": "Examples",
    "content": "A small example how to create a small DSL. In this DSL there should exist a computer and a web server. First create the necessary catagories. category Personal_Computers { } category Servers { } . The category names are not important but good for structure. Lets create a computer inside the category Personal_Computers and a webserver inside Servers. category Personal_Computers { asset Computer { } } category Servers { asset Webserver { } } . The computer and webserver has no properties at the moment, they just exist. Here is the step where the attack graph is defined. What are the connections between the assets? Lets imagine that an attacker can attack the computer and through it attack the webserver. category Personal_Computers { asset Computer { | attack -&gt; myWebserver.attack } } category Servers { asset Webserver { | attack } } . Now the only thing left is to create the association between the two assets. category Personal_Computers { asset Computer { | attack -&gt; myWebserver.attack } } category Servers { asset Webserver { | attack } } associations { Computer [myComputer] 1 &lt;-- connects --&gt; * [myWebserver] Webserver } . The association is between the Computer asset and the Webserver asset, using myComputer and myWebserver. You can read more how to apply these examples in the DSL ste-by-step guide. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/MAL.html#examples",
    "relUrl": "/pages/guides/Creating%20threat%20models/MAL.html#examples"
  },"14": {
    "doc": "MAL",
    "title": "MAL",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/MAL.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/MAL.html"
  },"15": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": "In order to run MAL and the DSL:s you need . | jdk 11 or higher. If it does not work with your jdk please see read how to install jdk 11 below. | Maven . | . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Prerequisites.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/Prerequisites.html"
  },"16": {
    "doc": "Prerequisites",
    "title": "How to install jdk 11 on macOS",
    "content": "Start with checking with version of java you’re using. % java --version . If you already have Java 11 then you do not need to do anything. Else do the following . brew install java11 sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk export JAVA_11_HOME=$(/usr/libexec/java_home -v11)\\ alias java11='export JAVA_HOME=$JAVA_11_HOME'\\ . now you can change to jdk 11 with the command java11. You need Homebrew installed to be able to use the command “brew”. Homebrew is a software package management system that can be used on macOS. If you do not already have Homebrew installed you can find the installation guide here. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-macos",
    "relUrl": "/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-macos"
  },"17": {
    "doc": "Prerequisites",
    "title": "How to install jdk 11 on Ubuntu",
    "content": "Ubuntu 18.04 should have jdk11 by default. Just as with macOS you check the version with the command . java --version . If you need to install jdk 11 for Ubuntu 18.04 do . sudo add-apt-repository ppa:linuxuprising/java sudo apt update sudo apt install oracle-java11-set-default . If you use Ubuntu 20.04 . sudo apt update sudo apt install openjdk-11-jdk . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-ubuntu",
    "relUrl": "/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-ubuntu"
  },"18": {
    "doc": "Prerequisites",
    "title": "How to install jdk 11 on Windows",
    "content": "You can find instructions how to install jdk 11 on Windows here. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-windows",
    "relUrl": "/pages/guides/Creating%20threat%20models/Prerequisites.html#how-to-install-jdk-11-on-windows"
  },"19": {
    "doc": "Prerequisites",
    "title": "Maven",
    "content": "You can find link to Maven and how to install it here. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/Prerequisites.html#maven",
    "relUrl": "/pages/guides/Creating%20threat%20models/Prerequisites.html#maven"
  },"20": {
    "doc": "0x05 - Broken Access Control",
    "title": "Broken Access Control",
    "content": "In short, this vulnerability can be described as different user types (like administrator, standard user, guest) having the wrong privileges. For example, an attacker could get themselves the privileges of an administrator. Access Control, when working properly, is that each user cannot act outside of its given privileges. If this functionality is broken, the system is vulnerable to Broken Access Control attacks, such as CORS Misconfiguration Exploits and Privilege Escalation Attacks.[1] . ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html#broken-access-control",
    "relUrl": "/pages/guides/web/access-control.html#broken-access-control"
  },"21": {
    "doc": "0x05 - Broken Access Control",
    "title": "Exploiting CORS Misconfigurations",
    "content": "CORS stands for Cross-Origin Resource Sharing, and is a mechanism used with HTTP to allow a server to fetch resources from other origins than itself. It does this through HTTP response headers, and a server can enable CORS to for example a domain called trusted-example-domain.org by sending the following header to the client: Access-Control-Allow-Origin: trusted-example-domain.org If the server wants to allow CORS for any domain, the following option is possible: Access-Control-Allow-Origin: * Furthermore, there is another header that allows user credentials to flow between the two servers: Access-Control-Allow-Credentials: true As you probably understand, the following would then be very, very dangerous: . Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true . Luckily this is not allowed, and you would get an error in your browser console. However, many servers generate the value of the Access-Control-Allow-Origin header based on the value of the Origin header of the HTTP request. This means that an attacker could make sure that the value of the Origin header leads somewhere they can plant some code, and in a worst case scenario get access to user credentials.[2] . You can find more information here. ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html#exploiting-cors-misconfigurations",
    "relUrl": "/pages/guides/web/access-control.html#exploiting-cors-misconfigurations"
  },"22": {
    "doc": "0x05 - Broken Access Control",
    "title": "Privilege Escalation Attacks",
    "content": "Privilege Escalation means that an attacker manages to gain privileges they shouldn’t be able to get. For example, a situation where a standard user manages to get administrator privileges would be considered Privilege Escalation. Privilege Escalation can be divided into two types: . | Vertical Privilege Escalation This type can also be called Privilege Elevation, since it means that an attacker gains access to a standard user account, and then gradually collects more privileges as time passes. | Horizontal Privilege Escalation This type means that an attacker gains access to a user account which already has the desired privileges.[3] | . Check out this page for some real-world examples of Privilege Escalation attacks. Even more information and lots of great, concrete examples using CTFs can be found in the video course Complete Pentesting and Privilege Escalation Course by Rob Percival and Atil Samancioglu (2021) (Available here if you have a KTH account). ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html#privilege-escalation-attacks",
    "relUrl": "/pages/guides/web/access-control.html#privilege-escalation-attacks"
  },"23": {
    "doc": "0x05 - Broken Access Control",
    "title": "Server Side Request Forgery (SSRF)",
    "content": "Server Side Request Forgery, or SSRF, means that an attacker manages to trick a server into reading or updating internal resources[4]. This is done through manipulating HTTP requests made to the server in some way[5]. If the target system has functionality for fetching or posting data to a URL, the attacker could manage to replace that URL with another one, or manipulate how the URL is built (to achieve path traversal, for example)[4]. By using SSRF, the attacker could get access to services that are normally behind firewalls and not accessible to the public, since it looks like it’s the server that is sending the request[6]. One option for the attacker is to get the target application to send an HTTP request to itself. This is typically done through the reserved IPv4 address 127.0.0.1, also known as localhost, which points back to the host itself. You can see some concrete examples here. ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html#server-side-request-forgery-ssrf",
    "relUrl": "/pages/guides/web/access-control.html#server-side-request-forgery-ssrf"
  },"24": {
    "doc": "0x05 - Broken Access Control",
    "title": "References",
    "content": "[1] A5:2017-Broken Access Control. OWASP. https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control. (Fetched 2021-03-28) [2] Exploiting CORS misconfigurations for Bitcoins and bounties. PortSwigger. https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties. (Fetched 2021-03-28) [3] Privilege Escalation. Wikipedia. https://en.wikipedia.org/wiki/Privilege_escalation. (Fetched 2021-03-28) [4] Server Side Request Forgery. OWASP. https://owasp.org/www-community/attacks/Server_Side_Request_Forgery. (Fetched 2021-04-213) [5] Server-side Request Forgery. PortSwigger. https://portswigger.net/web-security/ssrf. (Fetched 2021-04-213) [6] What is Server-Side Request Forgery (SSRF)? Acunetix. https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/. (Fetched 2021-04-213) . ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html#references",
    "relUrl": "/pages/guides/web/access-control.html#references"
  },"25": {
    "doc": "0x05 - Broken Access Control",
    "title": "0x05 - Broken Access Control",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/access-control.html",
    "relUrl": "/pages/guides/web/access-control.html"
  },"26": {
    "doc": "ARP Spoofing and MitM attacks",
    "title": "ARP Spoofing and MitM attacks",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/arp-spoofing.html",
    "relUrl": "/pages/guides/Wireless/arp-spoofing.html"
  },"27": {
    "doc": "ARP Spoofing and MitM attacks",
    "title": "What is ARP?",
    "content": "ARP stands for Address Resolution Protocol, and is a link layer protocol used for discovering and associating link layer addresses like MAC addresses, to Internet layer addresses like IP addresses. It was first introduced in RFC 826 back in 1982, and is still in wide use today. ",
    "url": "http://localhost:4000/pages/guides/Wireless/arp-spoofing.html#what-is-arp",
    "relUrl": "/pages/guides/Wireless/arp-spoofing.html#what-is-arp"
  },"28": {
    "doc": "ARP Spoofing and MitM attacks",
    "title": "What is ARP Spoofing?",
    "content": "As stated above, ARP can be used to associate MAC addresses to IP addresses. Imagine that an attacker sends out their own ARP messages. This way, they could convince a target computer in the same network that the attacker’s computer is the default gateway. Simultaneously, the attacker could convince the default gateway that their computer is the target computer. This could have dire consequences since the target computer then would send all of its traffic to the attacker’s computer, instead of to the actual default gateway. Meanwhile, the default gateway would think that all incoming traffic that is addressed to the target computer should go to the attacker’s computer. This is called ARP Spoofing, or ARP Poisoning, and is a common technique used to do Man in the Middle (MitM) attacks. ",
    "url": "http://localhost:4000/pages/guides/Wireless/arp-spoofing.html#what-is-arp-spoofing",
    "relUrl": "/pages/guides/Wireless/arp-spoofing.html#what-is-arp-spoofing"
  },"29": {
    "doc": "ARP Spoofing and MitM attacks",
    "title": "MitM attack with Ettercap and Wireshark",
    "content": "The following example is from the book “Mastering Kali Linux Wireless Pentesting” by B. Sak and J. R. Ram, 2016. All screenshots and images in this examples are also from there. [1] . Ettercap is a tool commonly used for MitM attacks, and it comes with Kali Linux by default. If you have a Ubuntu/Debian or MacOS machine, you can also install Ettercap here. Unfortunately, Ettercap is not supported on Windows. This is what Ettercap looks like on startup: . We start by clicking Sniff &gt; Unified sniffing…, or by pressing CTRL+U. You should see some text output at the bottom of the screen, including the text “Starting Unified sniffing…”. Now, some new options should have become visible at the top of the window. Click on Hosts &gt; Host List to see all the hosts that Ettercap has identified in the network. There aren’t any ways to figure out the target and the default gateway’s IP addresses through Ettercap, so you will have to do that in some other way. You could check your computer’s ARP table, do some reconnaissance using nmap or fping, or use another third party application to accomplish this. In this example, the host with IP address 192.168.0.1 is the default gateway, and the host with IP address 192.168.0.112 will be our target in this example. We’ll select the first host, the one with IP 192.168.0.1, and select Add to Target 1. Next, we do the same with the second host, the one with IP 192.168.0.112, and select Add to Target 2. Now we’re going to start the ARP Spoofing. Click on Mitm &gt; ARP poisoning…, and a dialog should pop up with two checkbox options: . | Sniff remote connections | Only poison one-way | . Make sure “Sniff remote connections” is checked and “Only poison one-way” is not. Click OK. Now, any interesting traffic between the host and the default gateway is going to be outputted in the text section at the bottom of the window. ",
    "url": "http://localhost:4000/pages/guides/Wireless/arp-spoofing.html#mitm-attack-with-ettercap-and-wireshark",
    "relUrl": "/pages/guides/Wireless/arp-spoofing.html#mitm-attack-with-ettercap-and-wireshark"
  },"30": {
    "doc": "ARP Spoofing and MitM attacks",
    "title": "References",
    "content": "[1] B. Sak and J. R. Ram, Mastering Kali Linux wireless pentesting : test your wireless network’s security and master advanced wireless penetration techniques using Kali Linux, 1st edition. 2016. ",
    "url": "http://localhost:4000/pages/guides/Wireless/arp-spoofing.html#references",
    "relUrl": "/pages/guides/Wireless/arp-spoofing.html#references"
  },"31": {
    "doc": "0x02 - Broken Authentication",
    "title": "Broken Authentication",
    "content": "When a system implements its authentication poorly, it’s often vulnerable to attacks in this category. For example, the system can use default user names (such as “admin”), or allow weak common passwords (such as “Password1”). Other examples include Brute Force Attacks, Dictionary Attacks, Credential Stuffing, and Session Hijacking.[1] . ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#broken-authentication",
    "relUrl": "/pages/guides/web/authentication.html#broken-authentication"
  },"32": {
    "doc": "0x02 - Broken Authentication",
    "title": "Weak User Credentials",
    "content": "If a website allows its users to use passwords that are very common or easily guessable, its very easy for an attacker to get into the website using those credentials. RockYou . In 2009, a company name RockYou was hacked. The attacker got their hands on over 32 million user credentials - all in plain text. The attacker then compiled a database of all the passwords, and made this list publically available. This list (named rockyou.txt) is now famous in the InfoSec community since it gives a very valuable insight in how people tend to choose their passwords. Kali Linux comes with this text file by default (found at /usr/share/wordlists/rockyou.txt.gz).[2, 3] . The text file is also available to download here. ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#weak-user-credentials",
    "relUrl": "/pages/guides/web/authentication.html#weak-user-credentials"
  },"33": {
    "doc": "0x02 - Broken Authentication",
    "title": "Brute Force Attacks and Dictionary Attacks",
    "content": "When an attacker systematically tries every possible character combination to guess passwords, this is known as a Brute Force Attack. The downside with this is that depending on the length and complexity of the passwords, it could take years to find the right one. A variation of the Brute Force Attack is the Dictionary Attack, where instead of trying arbitrary combinations of characters, the attacker uses dictionaries. This is helpful since most passwords are words (or at least include them) and not just random characters stringed together. Dictionary Attacks also tend to be faster than normal Brute Force Attacks. Brute Force Attacks are easy for the target system to detect since they generate a significant amount of traffic. However, the attacker can modify their requests to the target so that it gets very hard to block. Using proxy servers for example, the target cannot stop the attack by blocking a specific IP address. The attacker could also vary the targeted user account, which prevents the target system from blocking login attempts to a specific user.[4] . ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#brute-force-attacks-and-dictionary-attacks",
    "relUrl": "/pages/guides/web/authentication.html#brute-force-attacks-and-dictionary-attacks"
  },"34": {
    "doc": "0x02 - Broken Authentication",
    "title": "Credential Stuffing",
    "content": "When user credentials get breached through hacks, they can spread online. Using breached credentials and testing them on many different websites, like social media platforms or online marketplaces, is called Credential Stuffing. This type of attack is often automated, and usually around 0.1-0.2% of login attempts are successful. The attacker could then steal all valuable information in those accounts and then use them in other attacks, like phishing attacks or sending out spam.[5] . ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#credential-stuffing",
    "relUrl": "/pages/guides/web/authentication.html#credential-stuffing"
  },"35": {
    "doc": "0x02 - Broken Authentication",
    "title": "Session Hijacking",
    "content": "Since HTTP is stateless, many websites use Cookies as identification tokens. Session Hijacking, or Cookie Hijacking, is when an attacker manages to steal a Cookie and thereby gains unauthorized access to the website.[6] . Cookie Stealing can be done using many different methods. One of them is Network Eavesdropping, where an attacker intercepts and reads traffic on a network. This can for example be used if the web application sends the Cookie unencrypted over HTTP.[7] . A technique for performing Session Hijacking after successfully stealing a Cookie is called Pass the Cookie, and is described here. ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#session-hijacking",
    "relUrl": "/pages/guides/web/authentication.html#session-hijacking"
  },"36": {
    "doc": "0x02 - Broken Authentication",
    "title": "OAuth 2.0 Authentication Vulnerabilities",
    "content": "What is OAuth 2.0? . OAuth 2.0 is a very popular authentication framework that allows developers to let users authenticate themselves using social media such as Facebook or Google. Because of its popularity, it is very likely that you’ve come into contact with apps or sites that use OAuth 2.0 in your online life. While useful, OAuth 2.0 has some vulnerabilities that can be exploited. One such vulnerability is presented in the PortSwigger Academy lab “Authentication bypass via OAuth implicit flow”, which we solve below. Example . As stated above, the following example is from PortSwigger. It’s a lab called “Authentication bypass via OAuth implicit flow”, and is accompanied by a website that has a login page that looks like the following: . We are given a username-password pair that represents “our” login information, which is: . Username: wienerPassword: peter . The website also lets users authenticate using their email address. The goal of the lab is to login to the account with email address carlos@carlos-montoya.net. Obviously, we are not given the password. To solve this lab, we are going to be using PortSwigger’s free software Burp Community Suite - in particular its Proxy and Repeater features. To learn more about the basics of Burp Suite, you can watch this video by John Hammond. We’ll start by opening up Burp Community Suite. We’ll be using their preconfigured browser, but as stated in this other example you can configure your own browser instead and get the same result. Navigate to the Proxy tab in Burp Community Suite. Make sure to toggle to Intercept is off. Open up the lab in Burp’s browser (or your own configured browser). Click on “My Account” and log in using the credentials that we got in the lab description (wiener, peter). Click on “Continue” when prompted. We are now logged in on the website. Let’s check back in on Burp Suite. Under Proxy, navigate to the HTTP History tab. Here we can see all the HTTP request that have been sent so far. If we look through these requests, we can find the one that we used to log in. The login process starts with an HTTP GET request that starts with “GET /auth?client_id=…” . If you look at the HTTP messages following that first request, you eventually end up at a POST request that is the thing that is actually responsible for providing the credentials to the website. Right-click on the request text and click “Send to Repeater”. Navigate to the Repeater tab (it should have lit up in orange once you clicked “Send to Repeater”). Let’s change the email address to the one belonging to the account we’ve been tasked to login to. Click on the “Send” button. Note the response code: 302 Found. Now, right-click again on the request text and click “Request in browser” &gt; “In original session” . You should get a popup with a URL that you can copy and paste into your browser. When you do, the request will be sent to the website and voilá: you’re logged in as carlos@carlos-montoya.net. ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#oauth-20-authentication-vulnerabilities",
    "relUrl": "/pages/guides/web/authentication.html#oauth-20-authentication-vulnerabilities"
  },"37": {
    "doc": "0x02 - Broken Authentication",
    "title": "References",
    "content": "[1] A2:2017-Broken Authentication. OWASP. https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication. (Fetched 2021-03-28) [2] RockYou. Wikipedia. https://en.wikipedia.org/wiki/RockYou. (Fetched 2021-03-28) [3] William J. Burns. Common Password List ( rockyou.txt ). Kaggle. https://www.kaggle.com/wjburns/common-password-list-rockyoutxt. (Fetched 2021-03-28) [4] Blocking Brute Force Attacks. OWASP. https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks#. (Fetched 2021-03-28) [5] Credential Stuffing. OWASP. https://owasp.org/www-community/attacks/Credential_stuffing. (Fetched 2021-03-28) [6] Session Hikjacking. Wikipedia. https://en.wikipedia.org/wiki/Session_hijacking. (Fetched 2021-03-28) [7] HTTP Cookie. “Cookie theft and session hijacking”. Wikipedia. https://en.wikipedia.org/wiki/HTTP_cookie#Cookie_theft_and_session_hijacking. (Fetched 2021-03-28) [8] OAuth 2.0 authentication vulnerabilities. PortSwigger. https://portswigger.net/web-security/oauth. (Fetched 2021-04-25) . ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html#references",
    "relUrl": "/pages/guides/web/authentication.html#references"
  },"38": {
    "doc": "0x02 - Broken Authentication",
    "title": "0x02 - Broken Authentication",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/authentication.html",
    "relUrl": "/pages/guides/web/authentication.html"
  },"39": {
    "doc": "0x03 - Analyzing BLE",
    "title": "Analyzing BLE",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#analyzing-ble",
    "relUrl": "/pages/guides/radio/ble.html#analyzing-ble"
  },"40": {
    "doc": "0x03 - Analyzing BLE",
    "title": "1. Bluetooth Low Energy (BLE) internals",
    "content": "Introduction and Terminology . The way BLE devices discover and connect to each other is determined through the Generic Access Profile, or GAP for short. The Generic Attribute Profile, or GATT, determines how two devices transfer data back and forth, once the devices have discovered and connected to each other using GAP. GATT uses the Attribute Protocol, or ATT, to store Services and Characteristics in a simple lookup table. Services divide data into logical chunks, and each Service has a UUID. Services consist of Characteristics, which are the data points themselves. Like Services, each Characteristic has a UUID. Note that BLE peripherals can only be connected to one central device at any given time. The central device however, can be connected to several peripheral devices at once. Example . A profile has Service A (for example heart rate in UUID format) and Service B (for example blood pressure in UUID format). Service A and Service B consist of characteristics, which in turn consist of values and descriptors. Other profiles are structured similarly. [2] . Service . Structure: . attr handle | (first handle id for the service) end grp handle | (last handle id for the service) uuid | (first 8-digit from left hand side specifies service name) . All the currently registered UUIDs by Bluetooth and their corresponding service names can be found in the Bluetooth SIG documentation. Custom services are not defined there, however. | Characteristics . | Structure . | handle | char properties | char value handle | uuid | . | Value: Descriptor is a hex encoded ASCII data | . | BLE authentication (association process) . | Broadcaster device . | broadcast to announce availability | collect and monitor data | . | Observer device . | observe broadcasts | if it is an interested broadcast, send a connection request to the peripheral | . | Peripheral device . | if peripheral accepts the request, observer and peripheral are connected | based on the pairing mechanism | data transmission starts each other | . | . | Pairing mechanisms (Pairing encryption) . | JustWorks (JW) . | without display or small display without keyboard | key is 000000 | . | Numeric comparison . | shows the same number on both devices | asks for yes or no | . | Passkey . | 6-digit passcode | (easy to brute force) | . | Out of band . | shares the pin using an out of band channel like NFC | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#1-bluetooth-low-energy-ble-internals",
    "relUrl": "/pages/guides/radio/ble.html#1-bluetooth-low-energy-ble-internals"
  },"41": {
    "doc": "0x03 - Analyzing BLE",
    "title": "2. BLE pentest objectives",
    "content": ". | Sniffing | Reading | Modifying characteristics (change behavior of the device by remotely controlling) | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#2-ble-pentest-objectives",
    "relUrl": "/pages/guides/radio/ble.html#2-ble-pentest-objectives"
  },"42": {
    "doc": "0x03 - Analyzing BLE",
    "title": "3. Interacting with BLE devices",
    "content": ". | Plug in BLE adapter dongle on analysis computer | Get Blootooth Address (BD_ADDR) . hciconfig . | Search for BLE devices around (via hcitool or Blue Hydra) . hcitool lescan . | Connect to target beacon (via Gatttool utility) . gatttool -I -b &lt;beacon address&gt; . | List the BLE services . primary . | List the service characteristics . characteristics . | Read characteristics value and descriptor . char-read-hnd &lt;char value handle&gt; . | Decode hex to ASCII | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#3-interacting-with-ble-devices",
    "relUrl": "/pages/guides/radio/ble.html#3-interacting-with-ble-devices"
  },"43": {
    "doc": "0x03 - Analyzing BLE",
    "title": "4. Modify data",
    "content": ". | In order to modify something, functionality of the device is well-understand | Then how these functionality is stored on device as values are identified | Example I . | BLE devices disconnects from mobile application in every X seconds | Then re-connects again, this mechanism is known as heart-beat | If heartbeat does not happen, a notification appears or sound triggered | Attacker may want to modify the connection time to unlimited | Therefore mobile app will not identify BLE device is stolen or broken | . | Example II . | mobile app tracks the distance of an object | if it goes across the range, mobile app makes a buzzer | attacker may want to prevent buzzer not to notice owner | . | List all handles . chr-desc &lt;attr handle&gt; &lt;end group handle&gt; . | Check for Bluetooth SIG documentation (to understand functionality) . | identify services defined by manufacturers and by SIG | . | Read characteristics value and descriptor . char-read-hnd &lt;char value handle&gt; . | Update characteristics value and descriptor . char-write-hnd &lt;char value handle&gt; &lt;a char value same as to original format&gt; . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#4-modify-data",
    "relUrl": "/pages/guides/radio/ble.html#4-modify-data"
  },"44": {
    "doc": "0x03 - Analyzing BLE",
    "title": "5. Sniffing BLE traffic",
    "content": ". | In order to understand the functionality of services defined by manufacturers . | sniff the BLE traffic | press any buttons of the device to capture functionality | . | Ubertooth One . | download and install ubertooth utility | sniff traffic . ubertooth-btle -f -t &lt;target device BD_ADDR&gt; . | sniff traffic and dump into a pcap file . ubertooth-btle -f -t &lt;target device BD_ADDR&gt; - c ble-dump.pcap . | Relevant data . | Access address (AA) | used to manage link layer | . | Channel Index | dedicated advertising channel | . | Packet PDU Type | ADV_IND ADV_DIRECT_IND ADV_NONCONN_IND ADV_SCAN_IND SCAN_REQ SCAN_RSP CONNECT_REQ | . | AdvA | 6-byte advertising address (usually BD_ADDR of the device) | . | ScanA | 6-byte scanner address | . | Advertising PDUs . | ADV_IND | Connectable Undirected Advertising | . | ADV_DIRECT_IND | Connectable Directed Advertising | . | ADV_NONCONN_IND | Non-Connectable Undirected Advertising | . | ADV_SCAN_IND | Scannable Undirected Advertising | . | Scanning PDUs . | SCAN_REQ | Scan request from the mobile app | . | SCAN_RSP | Scan response from the target device | . | Initiating PDUs . | CONNECT_REQ | Connection request | . | Wireshark . | set DLT_USER (in Preferences &gt; Protocols) to btle | filter only ATT packets . btl2cap.cid==0x004 . | set DLT_USER (in Preferences &gt; Protocols) to btle | filter Write requests . | find the data is written to which Handle | . | examine the interested packet containing write request . | BLE Link Layer | Bluetooth Attribute Protocol . | Understand Value field | . | . | compare Value field of different packets to identify which bits change . | the changed field are the user actions | . | determine your Value | . | Replay packet . | BTLEJuice utility (web GUI) . | sniffs/modifies/replays BLE packets | . | . | Write the value to the device . | gatttool “char-write-req” | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#5-sniffing-ble-traffic",
    "relUrl": "/pages/guides/radio/ble.html#5-sniffing-ble-traffic"
  },"45": {
    "doc": "0x03 - Analyzing BLE",
    "title": "Sources",
    "content": "[1] A Developer’s Guide To Bluetooth. Bluetooth Blog. Martin Woolley. 2016-11-10. https://www.bluetooth.com/blog/a-developers-guide-to-bluetooth/. (Fetched 2021-06-24) . [2] Introduction to Bluetooth Low Energy. adafruit learn. Kevin Townsend. 2014-03-20. https://learn.adafruit.com/introduction-to-bluetooth-low-energy. (Fetched 2021-06-24) . ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html#sources",
    "relUrl": "/pages/guides/radio/ble.html#sources"
  },"46": {
    "doc": "0x03 - Analyzing BLE",
    "title": "0x03 - Analyzing BLE",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/ble.html",
    "relUrl": "/pages/guides/radio/ble.html"
  },"47": {
    "doc": "Bluetooth",
    "title": "Bluetooth",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html",
    "relUrl": "/pages/guides/Wireless/bluetooth.html"
  },"48": {
    "doc": "Bluetooth",
    "title": "Primer",
    "content": "Here is a pretty good primer on the fundamentals of Bluetooth. Bluetooth comes in two flavors, Bluetooth Classic and Bluetooth Low Energy (BLE). ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#primer",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#primer"
  },"49": {
    "doc": "Bluetooth",
    "title": "Bluetooth Low Energy (BLE)",
    "content": "Here is a pretty good video introduction to BLE. For more information on how to analyze BLE traffic, check out the Analyzing BLE page. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#bluetooth-low-energy-ble",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#bluetooth-low-energy-ble"
  },"50": {
    "doc": "Bluetooth",
    "title": "Bluetooth MITM",
    "content": "Bluetooth can be intercepted with a couple of Bluetooth USB dongles and software such as GATTacker or BtleJuice, as detailed in Melamed, An active man-in-the-middle attack on bluetooth smart devices, 2018 and Melamed, Hack-a-ble: Hacking BLE Smart Devices, 2017. We can also use the Ubertooth One to intercept Bluetooth signals from your target. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#bluetooth-mitm",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#bluetooth-mitm"
  },"51": {
    "doc": "Bluetooth",
    "title": "SweynTooth",
    "content": "Some interesting new vulnerabilities were discovered in February 2020. More information here. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#sweyntooth",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#sweyntooth"
  },"52": {
    "doc": "Bluetooth",
    "title": "Ubertooth",
    "content": "The Ubertooth Project is an open-source platform used to experiment with Bluetooth. It can be used to capture and demodulate Bluetooth packets, and can be combined with packet analyzer tools such as Kismet or Wireshark. The latest version is the Ubertooth One. The lab has two such devices that you can either try out at the lab or borrow for a project. The Ubertooth One is mainly used to sniff BLE, but can in some cases also be used with Bluetooth Classic. [1] . Check out this page to find our guide to the Ubertooth One. ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#ubertooth",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#ubertooth"
  },"53": {
    "doc": "Bluetooth",
    "title": "References",
    "content": "[1] Ubertooth One. Great Scott Gadgets. https://greatscottgadgets.com/ubertoothone/. (Fetched 2021-06-03) . ",
    "url": "http://localhost:4000/pages/guides/Wireless/bluetooth.html#references",
    "relUrl": "/pages/guides/Wireless/bluetooth.html#references"
  },"54": {
    "doc": "Books",
    "title": "Books",
    "content": "List of the available books in the lab. | The Basics of Hacking and Penetration Testing | Professional Penetration Testing | Practical Malware Analysis: The Hands-On Guide to dissecting Malicious Software | Basic Security Testing with Kali Linux 2 | The Hacker Playbook 2: Practical Guide to Penetration Testing | Ethical Hacking and Penetration Testing Guide | Gray Hat Hacking: The Ethical Hacker’s Handbook | Penetration Testing: A Hands-On Introduction to Hacking | Kali Linux: An Ethical Hacker’s Cookbook | IoT Penetration Testing Cookbook | Wireless Communications Network and Systems | 4G LTE / LTE Advanced for Mobile Broadband | Machines of Loving Grace - The Quest for Common Ground Between Humans and Robots | Analysis Of Evidence - How to do things with facts based on Wigmore’s Science of Judicial Proof | Permanent Record | . ",
    "url": "http://localhost:4000/pages/lab-equipment/books.html",
    "relUrl": "/pages/lab-equipment/books.html"
  },"55": {
    "doc": "Books",
    "title": "Theses",
    "content": "List of the printed theses available at the lab. | Bandwidth and Storage Allocation for Operator-Owned Content Management Systems - Valentino Pacifici | Real-Time Search in Large Networks and Clouds - Misbah Uddin | Contributions to Performance Modeling and Management of Data Centers - Rerngvit Yanggratoke | Distributed Processing of Visual Features in Wireless Sensor Networks - Emil Eriksson | Bandwidth Limited Distributed Optimization with Applications to Networked Cyberphysical Systems - Sindri Magnússon | Secure and Privacy Preserving Vehicular Communication Systems: Identity and Credential Management Infrastructure - Mohammed Khodaei | A Bottom-Up Approach to Real-Time Search in Large Networks and Clouds - Misbah Uddin | Data-driven Performance Prediction and Resource Allocation for Cloud Services - Rerngvit Yanggratoke | Secure and Privacy Preserving Urban Sensing Systems - Stylianos Gisdakis | Resource Allocation in Operator-owned Content Delivery Systems - Valentino Pacifici | System Design for Opportunistic Networks - Sylvia Todorova Kouyoumdjieva | Coexistance and Energy Efficiency in Wireless Networks - Ioannis Glaropoulus | Cyber-security in Smart Grid Communication and Control - Ognjen Vuković | Secure and Privacy Preserving Urban Sensing Systems - Stylianos Gisdakis | . ",
    "url": "http://localhost:4000/pages/lab-equipment/books.html#theses",
    "relUrl": "/pages/lab-equipment/books.html#theses"
  },"56": {
    "doc": "Choice of System to Explore",
    "title": "Choice of system to explore",
    "content": "There are many interesting things to hack. When choosing which system to explore, there are three main selection criteria to consider: Impact, vulnerability and how diffucult it is to procure the device. During the first phase of the thesis project, the threat modeling phase, you will explore the vulnerability issue in greater depth, but you may need to perform a superficial threat modeling already at the product selection stage. The higher the impact and vulnerability, the more pressing is the need for security testing of the system. Note that you may include the selection process in your thesis report. In your target selection process, start by creating a shortlist. Then submit to your supervisor your assessment of each product for each of the criteria below. That will serve as a good basis for an informed decision. | Impact. How serious would the consequences be if the system were hacked? . | Vulnerability. How likely is it that you will find and exploit a vulnerability during the course of the thesis project? This will depend on many issues: . | How large is the attack surface? A device that features wifi, Bluetooth, JTAG, UART, USB, HTTP, etc may be easier to compromise than a device that only communicates over LTE, for instance. | How complex is the product? A product with many bells and whistles will be more difficult to secure than one consisting of a single, simple function. | How much time did the developers spend on security? In a price-pressed consumer market, or a start-up company, developers may not have had the resources to spend on securing the product, while that may have been a lesser problem in other markets. | How competent were the developers? . | What is the security track record of the developing company? Some companies seem unable to create secure products, while others have an impressive track record. You can search for publicly reported vulnerabilities in the US National Vulnerability Database (NVD). | To what extent was the system already exposed to security testing? If many security reviews were already conducted (e.g. for the major operating systems), then the low hanging fruits might already have been found, while these may still be around for products that for some reason were not reviewed. Reasons may be that the device is difficult to procure, that the company makes it hard to review its software, that the product is brand new, or that it caters to a small or security-unaware marketplace. In general, big, IT-savvy companies like Apple, Google, Amazon, Microsoft, Facebook, Tesla, etc. have strong security teams and their products have normally been subjected to significant security testing. | . | Can it be procured? KTH can buy interesting devices for security assessments. We consider devices costing SEK 1,000 to be pretty affordable, SEK 10,000 to be rather expensive, and SEK 100,000 very expensive. In exceptional cases, it might, however, be possible to invest in a very expensive device. Note that some devices cannot be straight-up purchased, e.g. many medical devices. In these cases, we may find collaboration partners that grant us access to the units of interest. Sometimes, the thesis project involves a company that already has access to the device to be assessed. Also, some devices have a long delivery time, which may challenge your project planning. | . If costs are not prohibitive, consider procuring two or even three devices from different manufacturers, as the main effort of security testing generally is related to learning and setting up the test environment, while the probability of finding a vulnerability will increase with each new tested device. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/choice_of_system.html#choice-of-system-to-explore",
    "relUrl": "/pages/thesis_guidelines/choice_of_system.html#choice-of-system-to-explore"
  },"57": {
    "doc": "Choice of System to Explore",
    "title": "Choice of System to Explore",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/choice_of_system.html",
    "relUrl": "/pages/thesis_guidelines/choice_of_system.html"
  },"58": {
    "doc": "0x09 - Using Components with Known Vulnerabilities",
    "title": "Using Components with Known Vulnerabilities",
    "content": "If the target application uses components with known vulnerabilities, it is very easy for an attacker to exploit this. It takes much less energy to look for vulnerable components (like libraries and frameworks) than to start digging through the application to find an exploit of one’s own. There are multiple tools to scan an application for common flaws. These tools can for example check for different types of security related headers. One such tool is securityheaders.com, which checks the given website for what security related headers it uses. ",
    "url": "http://localhost:4000/pages/guides/web/components.html#using-components-with-known-vulnerabilities",
    "relUrl": "/pages/guides/web/components.html#using-components-with-known-vulnerabilities"
  },"59": {
    "doc": "0x09 - Using Components with Known Vulnerabilities",
    "title": "Nikto",
    "content": "Another tool is Nikto, which is an open source web server scanner that comes with Kali Linux.[1] . Please note that Nikto is not designed to be stealthy. If used, it is very likely that your scan will be visible in the target’s logs.[2] . If you don’t have Kali Linux, you can also install Nikto by cloning its GitHub repository like so: . git clone https://github.com/sullo/nikto . Next, go into the nikto/program directory using cd: . cd nikto/program . Now you can either run Nikto like: ./nikto.pl -h http://www.example.com or perl nikto.pl -h http://www.example.com . Some of Nikto’s options . The most important option is the -h, or -host flag. It specifies the host to run the scan on. This option is the bare-minimum for Nikto usage. Example: ./nikto.pl -h http://www.example.com . Another important option is the -p, or -port flag. It specifies the port number to run the scan on. Example: ./nikto.pl -h http://www.example.com -p 80 . Lastly, you can save the output of the Nikto scan to a file by providing the -o, or -output flag, combined with the -F flag for the filetype. -o specifies the name of the file you want to write the output to, and -F specifies the file type of that file. Example: ./nikto.pl -h http://www.example.com -o nikto_output -F txt . Learn more about Nikto . Check out Nikto’s GitHub repository for documentation and a full list of all the options. Check out Rangeforce for some more useful examples. Check out Nikto’s website. ",
    "url": "http://localhost:4000/pages/guides/web/components.html#nikto",
    "relUrl": "/pages/guides/web/components.html#nikto"
  },"60": {
    "doc": "0x09 - Using Components with Known Vulnerabilities",
    "title": "References",
    "content": "[1] Borso, Serge. (2019). The Penetration Tester’s Guide to Web Applications (Artech House information security and privacy series). Norwood: Artech House. Link to KTH Library. [2] Sullo, Chris, and Lodge, David. (2014-02-18). Nikto. Kali Tools. https://tools.kali.org/information-gathering/nikto. (Fetched 2021-05-23) . ",
    "url": "http://localhost:4000/pages/guides/web/components.html#references",
    "relUrl": "/pages/guides/web/components.html#references"
  },"61": {
    "doc": "0x09 - Using Components with Known Vulnerabilities",
    "title": "0x09 - Using Components with Known Vulnerabilities",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/components.html",
    "relUrl": "/pages/guides/web/components.html"
  },"62": {
    "doc": "Computers and hardware",
    "title": "Computers",
    "content": "| Device | Quantity | . | Kali Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Windows Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Ubuntu Desktop (Lenovo IdeaCentre G5 14IMB05) | 1 | . | Windows Laptop (Dell Latitude 7400) | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#computers",
    "relUrl": "/pages/lab-equipment/computers.html#computers"
  },"63": {
    "doc": "Computers and hardware",
    "title": "Monitors",
    "content": "| Device | Quantity | . | Dell U2715H | 1 | . | AOC C24G1 - 24” | 1 | . | Lenovo L22e - 21.5” | 1 | . | Acer ED320 - 31.5” | 1 | . | Andersson EM2471HB - 24” | 1 | . | Samsung LC43J890DKUXEN - 43” | 1 | . | AOC CU34G2X/BK - 34” | 1 | . | AOC 27G2U - 27” | 1 | . | Samsung U28E590D - 28” | 1 | . | Acer B276HL - 27” | 1 | . | Acer AL1511eb | 1 | . | Dell 1907FPt | 1 | . | Dell 1907FPc | 1 | . | Dell 2000FP | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#monitors",
    "relUrl": "/pages/lab-equipment/computers.html#monitors"
  },"64": {
    "doc": "Computers and hardware",
    "title": "Cables",
    "content": "| Device | Quantity | . | HDMI | 3 | . | USB to USB + Micro USB | 1 | . | USB | 1 | . | USB2 High Speed cable | 1 | . | VGA | 2 | . | AUX cable | 1 | . | DVI-D Single-link | 2 | . | DVI-I Female to HDMI | 1 | . | HDMI Mini adapter | 1 | . | Ethernet cables | 10 | . | Apple Ethernet to USB | 1 | . | Apple 30-Pin to USB | 1 | . | USB to Micro USB | 1 | . | USB to Thunderbolt 2 | 1 | . | Mini USB | 2 | . | DP | 1 | . | DP to Thunderbolt 2 | 1 | . | USB to Mini USB | 2 | . | HDMI to VGA female | 2 | . | HDMI to VGA male | 1 | . | HDMI to Micro-USB | 1 | . | VDE cable | 5 | . | Stecker Power Supply | 1 | . | Psion 6V/500mA Adapter | 1 | . | Harman/Kardon 15V/1100mA Adapter | 1 | . | Dell 65W AC Adapter | 2 | . | Dell 65W AC Adapter to USB C | 1 | . | Dell DA300 Mobile Adapter USB-C | 1 | . | IBM ThinkPad Adapter | 1 | . | Mickey Mouse Power Supply | 1 | . | HQ Power Universal Power Supply | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#cables",
    "relUrl": "/pages/lab-equipment/computers.html#cables"
  },"65": {
    "doc": "Computers and hardware",
    "title": "Misc",
    "content": "| Device | Quantity | . | Soldering station | 1 | . | Standard toolkit | 1 | . | Power Adapter 60w 8-15v | 1 (Borrowed) | . | Power Adapter 40w 12-24v | 1 (Borrowed) | . | HQ Power Universal Power Supply | 2 | . | USB Memory Stick (Kingston) 32gb | 2 | . | Programmable Light Strip | 3 | . | Ethernet Shield | 2 | . | Arduino Uno | 1 | . | Samsung Galaxy A41 | 1 | . ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html#misc",
    "relUrl": "/pages/lab-equipment/computers.html#misc"
  },"66": {
    "doc": "Computers and hardware",
    "title": "Computers and hardware",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/computers.html",
    "relUrl": "/pages/lab-equipment/computers.html"
  },"67": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Configuring the lab’s Clusterfuzz service",
    "content": "Clusterfuzz is highly configurable. You can change the amount of VM instances used to fuzz, the OS of the fuzzing bots, physical location of the servers, the fuzzing alert system and more. You might find that the software you’d like to fuzz would benefit from altering these configurations. In order to configure the service you’ll need to use the Ubuntu machine in the lab which has everything already set up - or set up the environment on your local machine. This will also allow you to turn the service on and off. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html#configuring-the-labs-clusterfuzz-service",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html#configuring-the-labs-clusterfuzz-service"
  },"68": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Setting up local environment for configuring Clusterfuzz",
    "content": "These instructions are based off the Clusterfuzz documentation for creating a new project. In this case we only want to setup a new machine to connect to our existing project so we skip a few of their steps. This guide is for Linux. Prerequisites . Before you start setting up your local environment you’ll need to make sure you have accomplished these tasks: . | Have a Google account that has been granted access to NSE’s Clusterfuzz project | Followed the prerequisite tutorial from the Clusterfuzz documentation | Downloaded the lab’s configuration files | . Setting environment variables . Once you’ve installed all the necessary files and are authenticated with the lab’s GCP project you’ll need to set the variables to be used in your local environment. First go to the lab’s GCP API page and make note of the key titled Browser key (auto created by Firebase) and download the JSON file called Clusterfuzz. These two keys will authenticate your local machine to Google. You’ll also need to go to the GCP dashboard and make note of the Project ID. We will now export these values and a couple others to your terminal environment to be used by the Clusterfuzz application. First in your terminal navigate to the Clusterfuzz repository and run source ENV/bin/activate to start the Clusterfuzz environment. Then run these commands: . | Set the API key variable | . export FIREBASE_API_KEY=&lt;browser key you saw before&gt; . | Set the JSON file you downloaded | . export CLIENT_SECRETS_PATH=/path/to/your/client_secrets.json . | Set the project id | . export CLOUD_PROJECT_ID=&lt;your project id&gt; . | Set the path to the lab’s configuration folder (that you downloaded from Github) | . export CONFIG_DIR=/path/to/Clusterfuzz-configuration . Authenticating to GCP . You need to authenticate your local machine to GCP using your Google account. Run this command. gcloud auth application-default login . Deploying your changes . Now that the environment is set up you should be able to make some changes to the configuration files and deploy them. To deploy changes run this command (make sure you are still in the environment from the previous step) . python butler.py deploy --config-dir=$CONFIG_DIR --prod --force . Be aware that it can take a few minutes after you’ve deployed until your changes are reflected in the Google Cloud Platform. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html#setting-up-local-environment-for-configuring-clusterfuzz",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html#setting-up-local-environment-for-configuring-clusterfuzz"
  },"69": {
    "doc": "Configuring the lab's Clusterfuzz service",
    "title": "Configuring the lab's Clusterfuzz service",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/fuzzing/configuring-clusterfuzz.html",
    "relUrl": "/pages/guides/fuzzing/configuring-clusterfuzz.html"
  },"70": {
    "doc": "Contribute",
    "title": "Contribute to docs",
    "content": "We encourage students and researchers to contribute documentation related to the lab that may be useful to others. To do this you should fork this website’s Github repository, make your changes and then submit a pull request on the orignal repository. Someone working at NSE will review your request and merge it so that it is published on this website. ",
    "url": "http://localhost:4000/pages/contribute.html#contribute-to-docs",
    "relUrl": "/pages/contribute.html#contribute-to-docs"
  },"71": {
    "doc": "Contribute",
    "title": "Contribute",
    "content": " ",
    "url": "http://localhost:4000/pages/contribute.html",
    "relUrl": "/pages/contribute.html"
  },"72": {
    "doc": "coreLang",
    "title": "coreLang",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/coreLang.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/coreLang.html"
  },"73": {
    "doc": "coreLang",
    "title": "Introduction",
    "content": "coreLang is a domain specific language (DSL) built with the meta attack language (MAL). coreLang focuses on modelling IT infrastructure. The language contains five different categories: System, Networking, Vulnerability, IAM, User and Data resources. MAL assumes that all attack steps are known but with coreLang, using the Vulnerability-assets, the user can use unknown vulnerabilities in the model. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/coreLang.html#introduction",
    "relUrl": "/pages/guides/Creating%20threat%20models/coreLang.html#introduction"
  },"74": {
    "doc": "coreLang",
    "title": "Overview",
    "content": "coreLang contains 6 different categories of assets. These are . | Data resources | Vulnerability | System | IAM | User | Networking | . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/coreLang.html#overview",
    "relUrl": "/pages/guides/Creating%20threat%20models/coreLang.html#overview"
  },"75": {
    "doc": "coreLang",
    "title": "Installation",
    "content": "To install coreLang, do the following steps . git clone https://github.com/mal-lang/coreLang.git cd path/to/coreLang mvn test . if you have a securiCAD-key you can create a .jar-file to use with the command . mvn package -PsecuriCAD . When you open securiCAD the program will prompt you to chose a *.jar file. You will find your coreLang.jar at path-to-project/coreLang/target/corelang-*.jar. Load the file and now you can drag and drop the assets and connect them in securiCAD. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/coreLang.html#installation",
    "relUrl": "/pages/guides/Creating%20threat%20models/coreLang.html#installation"
  },"76": {
    "doc": "Delimitations",
    "title": "Delimitations",
    "content": "In order to firmly conclude that a system is secure, it is important to be comprehensive. However, a truly comprehensive security audit may be beyond the scope of the thesis project. Therefore, delimitations can be made, excluding certain components of the system as well as certain attack surfaces. Note that delimitations must be motivated. If you choose to ignore an important attack surface, you won’t be able to answer the question regarding the the actual security of the system. Thus, the relevance of your results are diminished. The most important reason for abstaining from an attack is if you are uncertain about the legality of performing it. Make sure to read up on the laws affecting security testing, and talk to your supervisor before you attempt anything that you are uncertain about. The otherwise most obvious motivation for ignoring an attack vector is that potential vulnerabilities would not be very serious in terms of impact. Seriousness can be measured, for instance, by the CVSS scoring system, which contains a number of dimensions to characterize the risk (specifically the impact and the probability) of exploitation of a vulnerability. It is also reasonable to ignore attacks that are unlikely to succeed, i.e. that feature a low probability of exploitation. It is also possible to motivate delimiations with other arguments, such as the interests or competences of the students performing the assessment. While such arguments are sometimes understandable, they will weaken the relevance of the final report; it will not answer the main question regarding the security of the assessed system as well as without those delimigtations. Furthermore, within the stated delimitations, comprehensiveness is important. Thus, if you choose to focus only on the Bluetooth protocol, make sure you explore the whole attack surfaces of that protocol. If you do not, then you risk not being able to provide any solid answer regarding the security of the system. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/delimitations.html",
    "relUrl": "/pages/thesis_guidelines/delimitations.html"
  },"77": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "Firmware extraction from eMMC",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html#firmware-extraction-from-emmc",
    "relUrl": "/pages/guides/hardware/emmc.html#firmware-extraction-from-emmc"
  },"78": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "Method 1: eMMC tapping",
    "content": ". | Identify a pinout for an embedded Multi Media Card (eMMC) flash chip (embedded SD card) | Dump the contents of the chip without removing it from the PCB | Similar to in situ reading (dumping firmware from running device) | . Method 2: eMMC unsoldering . | Identify a pinout for an embedded Multi Media Card (eMMC) flash chip (embedded SD card) | Unsolder (remove) eMMC from the PCB | Plug-in eMMC to an adapter | Dump the contents of the chip after | . NOTE: These two methods are also applicable to SPI Flash . ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html#method-1-emmc-tapping",
    "relUrl": "/pages/guides/hardware/emmc.html#method-1-emmc-tapping"
  },"79": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "References",
    "content": ". | How To Root The Google OnHub | . ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html#references",
    "relUrl": "/pages/guides/hardware/emmc.html#references"
  },"80": {
    "doc": "0x05 - Analyzing eMMC",
    "title": "0x05 - Analyzing eMMC",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/emmc.html",
    "relUrl": "/pages/guides/hardware/emmc.html"
  },"81": {
    "doc": "Feedback",
    "title": "Feedback",
    "content": "Do you have a bug report, a tip, or some feedback for us? Write to us here: . ",
    "url": "http://localhost:4000/pages/feedback.html#feedback",
    "relUrl": "/pages/feedback.html#feedback"
  },"82": {
    "doc": "Feedback",
    "title": "Feedback",
    "content": " ",
    "url": "http://localhost:4000/pages/feedback.html",
    "relUrl": "/pages/feedback.html"
  },"83": {
    "doc": "Firmware Hacking",
    "title": "Firmware Reversing Methodology",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#firmware-reversing-methodology",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#firmware-reversing-methodology"
  },"84": {
    "doc": "Firmware Hacking",
    "title": "1. Pentest objectives",
    "content": ". | Sensitive data exposure | Update mechanism to capture firmware | Local data storage | Vulnerabilities (i.e. buffer overflow) to bypass authentication and (i.e. command injection) to RCE | Security configuration | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#1-pentest-objectives",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#1-pentest-objectives"
  },"85": {
    "doc": "Firmware Hacking",
    "title": "2. Tools",
    "content": ". | Binwalk firmware analysis tool . | Binwalk is an open source tool for extracting, analyzing, and reverse engineering firmware images | It scans the image for known file type signatures . | compressed streams | embedded file systems | . | Most tools depend on binwalk | . | Firmware Analysis Toolkit | Automated scanner | Firmwalker | Binary Analysis Next Generation | Firmadyne | Firmware Analysis Comparison Toolkit | Firmware mod kit | Angr binary analysis framework | Frida | Radare2 | QEMU | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#2-tools",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#2-tools"
  },"86": {
    "doc": "Firmware Hacking",
    "title": "3. Firmware update",
    "content": ". | Four techniques are common to get firmware . | download the corresponding version of the firmware from the device manufacturer’s website | search in Google and check it out in GitHub | sniff the OTA (over-the-air) to get the firmware binary while the device is performing an update | reverse the mobile app to understand how to get the firmware binary | and dump the firmware from the device’s UART or JTAG or flash chip | . | An attacker could intercept firmware when it is downloaded for updating device . | Unencrypted HTTP traffic is intercepted via a transparent proxy (Burp Suite) | HTTPS traffic can be captured only if it is possible to MitM (arpspoof + mitmproxy + Burp) | . | Firstly, all states that trigger OTA update for device/hub firmware is identified . | In general, device firmware is updated via mobile app . | in this case the traffic between smartphone and cloud service is intercepted | . | In addition, hub can trigger OTA update either for itself or for the device . | in this case the traffic between hub and cloud service is intercepted | . | Moreover, a local update (rather than OTA) via an SD card sometimes is available . | this vulnerability is related to attack surface of device physical interface | . | . | If the vendor only transmits update partition, . | although full-firmware is not obtained, | most probably sensitive data can be accessed | this will affect severity to a lower level | . | Reference . | https://resources.sei.cmu.edu/library/asset-view.cfm?assetID=453871 | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#3-firmware-update",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#3-firmware-update"
  },"87": {
    "doc": "Firmware Hacking",
    "title": "4. Firmware file analysis",
    "content": ". | A standard firmware binary image has four parts. Respectively, . | bin header | firmware header | compressed data | file system | . | More precisely, . | a bootloader (i.e. U-Boot, Barebox, RedBoot) | kernel | some kind of compressed data (i.e. LZMA, Gzip, zip, zlib) | a file system (i.e. Squash FS, Cramfs, JFFS2, YAFFS2, ext2) | . | The root folder in file system contains . | all binaries | scripts and source code | configurations | and data (credentials, ssh keys, etc.) | NOTE: The root folder might have additional file system images inside | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#4-firmware-file-analysis",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#4-firmware-file-analysis"
  },"88": {
    "doc": "Firmware Hacking",
    "title": "5. Filesystem extraction",
    "content": ". | Method 1 - Binwalk (automated) . binwalk -t &lt;firmware-image&gt; binwalk -e &lt;firmware-image&gt; . | Method 2 - Firmware mod kit . | set BINWALK in shared-ng.config to the path of binwalk | copy the firmware inside the firmware-mod-kit/ directory ./extract-firmware.sh &lt;firmware-image-file&gt; . | . | If binwalk cannot decompress the filesystem using the -e switch, try other alternatives . | Try specific tools, i.e. unsquashfs . | Sometimes files are not stored in a file system but exist as a plain flash binary file . | Firmware may be a proprietary with a modified and unknown file system and sections . | when binwalk generates false positives | manually extract using binwalk (help binwalk by tuning parameters) | . | The firmware may be encrypted, confirm this with entropy analysis . | when binwalk fails to identify any specific section . binwalk -E &lt;firmware-image&gt; . | high entropy with a bit of variation indicates compression | high entropy with flat line indicates encrypted content | need to identify the encryption method and keys | XOR encryption . | key is identified by recurring strings . cat encrypted.bin | python decryptxor.py &gt; decrypted.bin . | . | . | If it is not possible to extract data, try hardware-based extraction . | https://www.youtube.com/watch?v=0G2g-tLMK70 | . | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#5-filesystem-extraction",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#5-filesystem-extraction"
  },"89": {
    "doc": "Firmware Hacking",
    "title": "6. Filesystem analysis",
    "content": ". | Search for “sensitive” data from firmware . | Hard-coded credentials . | that users are unable to change | . | Default credentials . | that users rarely change | . | Backdoor access credentials . | that is designed to be used for customer support | . | Hash and private certificates | Encryption algorithms with keys | API keys and access tokens | Update or staging URLs | Local path names and environment details | Authentication and Authorization mechanisms | Replace user/password and/or create new password | . | Sample search queries . grep -inr 'telnet' . firmware-analysis-toolki/firmwalker.sh &lt;firmware-root-dir&gt; . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#6-filesystem-analysis",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#6-filesystem-analysis"
  },"90": {
    "doc": "Firmware Hacking",
    "title": "7. Static binary analysis",
    "content": ". | Reversing libraries usually helps to find sensitive data . radare2 -a mips -b32 libdbox.so aaa afl . | grep for interesting strings . afl~wifi afl~gen afl~get . | . | Disassembly of sensitive functions helps to identify certain vulnerabilities . | command injection . | use of unsanitized input may result in OS command execution | . | buffer overflow . | use of insecure string handling functions such as strcpy, strcat, etc., | instead of their more secure strncpy, strncat counterparts, | may result in buffer overflows | . | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#7-static-binary-analysis",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#7-static-binary-analysis"
  },"91": {
    "doc": "Firmware Hacking",
    "title": "8. Dynamic binary analysis",
    "content": ". | Debug individual binaries in firmware to see if there are any vulnerabilities . | Binary emulation . | Get binary architecture (ARM, MIPS, PowerPC) . readelf -f &lt;binary&gt; . | Need to emulate binaries to run it in our analysis machine . | install qemu (on our analysis box) | copy qemu binary to the root folder of the firmware filesystem . | qemu version should be compatible with the binary architecture | for example MIPS . which qemu-mipsel-static cp /usr/bin/qemu-mipsel-static . | . | . | Emulate binary (wrong way) ./qemu-mipsel-static ./bin/&lt;individual binary&gt; . | will not run, because | qemu tries to load required libraries from /lib directory of host | but cannot find | we need to say qemu to look for from /lib of firmware filesystem | we need to change the working directory path in runtime via chown | chown firmware-fs-root-dir/ ./qemu-mipsel-static ./bin/&lt;individual binary&gt; | . | Emulate binary (correct way) . chown ./qemu-mipsel-static ./bin/&lt;individual binary&gt; . | . | Firmware emulation . | Advantages . | to access all the individual binaries in the firmware image | to hook a debugger to any specific binary and perform vulnerability research | to perform remote exploitation research | to perform network pentest on the firmware | to perform web application pentest on the firmware | . | Challenges . | firmware is designed to run on another architecture . | bypass with QEMU | . | bootup process might require configurations and additional information from NVRAM . | hook all the calls being made by the firmware to NVRAM and can fake the return values | . | firmware might be dependent on physical hardware components to run . | no solution | . | . | Full emulation . | Firmware Analysis Toolkit (FAT) based on Firmadyne . | an interactive script | asks password which is firmadyne | sets up a network access | then runs the firmware | now the network services on firmware is accessible via the assigned IP . | copy the firmware in firmware-analysis-toolkit/ | in firmadyne.config file set FIRMWARE_DIR to firmware-analysis-toolkit/ . python fat.py . | . | . | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#8-dynamic-binary-analysis",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#8-dynamic-binary-analysis"
  },"92": {
    "doc": "Firmware Hacking",
    "title": "9. Firmware backdooring (Modifying sensitive data)",
    "content": ". | Extract filesystem on firmware . | Develop a backdoor (by Osanda Malith, @OsandaMalith) and compile it to run on specific architecture (i.e. MIPS) . | backdoor opens a port and connects it to a binary allowing to execute commands when interacting service . | compile programs for a different architecture than your analysis machine . | cross-compiling toolchain BuildRoot . install BuildRoot make menuconfig . | navigate to the Target Options and change the Target Architecture | navigate to the Toolchain, select_ Build Cross GDB for Host_ | save configuration . | make . | compile bindshell.c with the GCC for MIPS, which was created by BuildRoot ./mipsel-buildroot-linux-uclibc-gcc bindshell.c -static - o bindshell . | bindshell can be executed on MIPS now | . | . | Modify an .sh file in /etc/init.d/ to place the backdoor path so it could be started automatically at bootup . | Recompile the firmware . firmware-mod-kit/build-firmware.sh &lt;firmware-root-dir&gt;/ -nopad -min . | produces new-firmware.bin file | . | Then modified firmware is flashed to device . | test it by emulation before flashing . python fat.py nc &lt;emulated-IP&gt; &lt;backdoor-port&gt; . | . | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#9-firmware-backdooring-modifying-sensitive-data",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#9-firmware-backdooring-modifying-sensitive-data"
  },"93": {
    "doc": "Firmware Hacking",
    "title": "10. Firmware diffing (bindiff)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#10-firmware-diffing-bindiff",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#10-firmware-diffing-bindiff"
  },"94": {
    "doc": "Firmware Hacking",
    "title": "11. References",
    "content": ". | https://www.refirmlabs.com/binwalk/ | . ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html#11-references",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html#11-references"
  },"95": {
    "doc": "Firmware Hacking",
    "title": "Firmware Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/firmware/firmware_hacking.html",
    "relUrl": "/pages/guides/firmware/firmware_hacking.html"
  },"96": {
    "doc": "Fuzzing",
    "title": "Fuzzing",
    "content": "NSE offers a Google Clusterfuzz service for students to fuzz software. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/fuzzing.html",
    "relUrl": "/pages/guides/fuzzing/fuzzing.html"
  },"97": {
    "doc": "Fuzzing",
    "title": "Shortcuts",
    "content": "Here is a list of some useful links: . | Click here for the lab’s Clusterfuzz service | Click here for the lab’s Clusterfuzz configuration files hosted on Github | Click here for the official Clusterfuzz documentation | Click here for the Clusterfuzz source code | . ",
    "url": "http://localhost:4000/pages/guides/fuzzing/fuzzing.html#shortcuts",
    "relUrl": "/pages/guides/fuzzing/fuzzing.html#shortcuts"
  },"98": {
    "doc": "Grading criteria",
    "title": "Grading criteria",
    "content": "Here are the official criteria for master and bachelor thesis assessment. They should thus be important to all thesis students. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/grading_criteria.html",
    "relUrl": "/pages/thesis_guidelines/grading_criteria.html"
  },"99": {
    "doc": "Thesis Guidelines",
    "title": "Thesis Guidelines",
    "content": "A security testing thesis project can be great fun, educational, and it can be very useful when applying for work. Check out some media coverage from previous student projects on Pontus Johnson’s home page, and take a look at previous thesis and vulnerability reports here. Thesis projects will differ depending on your program. In particular, your program will affect the number of credits, whether you can work in pairs, the kinds of plans and project specifications you will need to produce, presentation and opposition routines, and potential deadlines. For the actual content of the work, however, you will find a lot of information here. In brief, this is the process: . | Consider whether you have the required competencies to write a good thesis. You will need to feel comfortable with low-level computing, networking and operating systems (e.g. working on the Linux command line). It will also facilitate greatly if you have previous experience of cyber security, particularly security testing, e.g. having completed the course EN2720 Ethical hacking. | Make sure that you understand the Law. The most important rule is this: don’t security test things for which you don’t have the owner’s permission. | Register to the thesis project. | Ask your tutor to invite you to our Slack, and, if you wish, start participating in the weekly Zoom tutoring meetings, as detailed here. | Decide on a system to investigate. Sometimes, it is already decided what that system is, other times, you are free to suggest one to your supervisor. | Procure the system. Sometimes KTH can order the device, but other times the process may be different. Note that the procurement time can cause problems in your planning if you have chosen a system with a long delivery time. | Write a project plan. The format of the project plan is oftentimes decided on by your program, but generally the objectives will be the same for all hacking projects. Already at this point, it is a good idea to understand the grading criteria, as well as the structure of the tangible result of your work, i.e. your thesis report. | Start working according to your method, making sure that you do not break the law. If you need work space or tools, do check out the Cyber Security Lab. | During the project, you can receive tutoring in different forms. | If you find a vulnerability, it should be responsibly disclosed. | Write the report, preferably in parallel to the actual work. The report is the concrete result of your project, so it needs to contain all aspects of your work. Therefore, its structure can help guide your activities. | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/guidelines.html",
    "relUrl": "/pages/thesis_guidelines/guidelines.html"
  },"100": {
    "doc": "Hacking Tools",
    "title": "Hacking Tools",
    "content": "The lab contains some equipment that can be used out-of-the-box for hacking. | Device | Misc | Availability | . | Ubertooth One x4 | Can be used for Bluetooth hacking | 1x Available, 3x Borrowed | . | ALFA Long-Range USB Adapter AWUS036NHA x1 | Can be used for Wi-Fi hacking | 1x Available | . | ASUS Gigabit Router | A powerful router that can be used for a number of tasks such as Wi-Fi hacking. Used as lab’s Wi-Fi. | Available | . | WiFi Pineapple Tetra, Model 5.8 x1 | - | Available | . | HackRF One x3 | Can be used for Radio Hacking | 3x Borrowed | . | Hak5 Packet Squirrel x2 | - | Available | . | Hak5 Bash Bunny x1 | - | Available | . | Hak5 Rubber Ducky x1 | - | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/hacking-tools.html#hacking-tools",
    "relUrl": "/pages/lab-equipment/hacking-tools.html#hacking-tools"
  },"101": {
    "doc": "Hacking Tools",
    "title": "Product unavailable?",
    "content": "Please submit the product name, your e-mail address and your name to get in line for the product. We will as soon as possible contact you with an approximate time when the product is available again. ",
    "url": "http://localhost:4000/pages/lab-equipment/hacking-tools.html#product-unavailable",
    "relUrl": "/pages/lab-equipment/hacking-tools.html#product-unavailable"
  },"102": {
    "doc": "Hacking Tools",
    "title": "Hacking Tools",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/hacking-tools.html",
    "relUrl": "/pages/lab-equipment/hacking-tools.html"
  },"103": {
    "doc": "Hacking Guides",
    "title": "Hacking Guides",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hacking_guides.html",
    "relUrl": "/pages/guides/hacking_guides.html"
  },"104": {
    "doc": "HackRF One",
    "title": "HackRF One",
    "content": "The HackRF One is an open-source SDR hardware platform that can transmit and receive signals between 1 MHz to 6 GHz. It can be used for a wide variety of activities, including replay attacks against car locks. Michael Ossman, the creator of the HackRF One and the Ubertooth One, has a video series where he goes in depth on SDR and the HackRF One. You can watch his videos here. Example . ",
    "url": "http://localhost:4000/pages/guides/radio/hackrf.html",
    "relUrl": "/pages/guides/radio/hackrf.html"
  },"105": {
    "doc": "Hardware Hacking",
    "title": "Hardware Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/hardware.html",
    "relUrl": "/pages/guides/hardware/hardware.html"
  },"106": {
    "doc": "0x06 - Useful links and tutorials",
    "title": "0x06 - Useful links and tutorials",
    "content": "How microcontrollers work: Simple Microcontroller Series - PIC10F200 and Assembly . How CPUs work: See How a CPU Works . Hardware Hacking Tutorial . Radio hacking with software defined radio and more: Radio Hacking: Cars, Hardware, and more! - Samy Kamkar . USB hacking: Facedancer 2.0 Next Generation USB Hacking . How To Find The JTAG Interface - Hardware Hacking Tutorial . Extracting Firmware from External Memory via JTAG . ",
    "url": "http://localhost:4000/pages/guides/hardware/hardware_hacking.html",
    "relUrl": "/pages/guides/hardware/hardware_hacking.html"
  },"107": {
    "doc": "0x11 - HTTP Request Smuggling",
    "title": "HTTP Request Smuggling",
    "content": "When applications communicate using HTTP, they often send HTTP requests one after another in a quick succession. If the rules for when one request ends and another one begins are blurry or ill-defined, an attacker could hide a request in another request, so that the front-end system thinks it has sent a single request while the back-end system parses it as two different requests. In other cases, the attacker could send ambiguous requests that are interpreted differently by the front-end and the back-end systems. The information about when HTTP requests end are conveyed in the Content-Length and the Transfer-Encoding headers. The Content-Length header specifies how long the entire HTTP request is in bytes. The Transfer-Encoding header can have one of several values, where one is chunked. A Transfer-Encoding header with chunked as its value, means that the body of the request consists of several chunks of data. Each chunk consists of the following elements: . | An integer specifying the chunk size in bytes | A newline | The data in this chunk | . The body is then terminated with a chunk of size 0. Since HTTP has these two different ways of specifying message length, the Content-Length and Transfer-Encoding headers can have values that conflict with eachother. This is a problem when the requests are sent between different servers: sometimes one server looks at only the Content-Length header while the other one looks at the Transfer-Encoding header. [1] . You can find more information as well as more concrete examples at PortSwigger. ",
    "url": "http://localhost:4000/pages/guides/web/http-request-smuggling.html#http-request-smuggling",
    "relUrl": "/pages/guides/web/http-request-smuggling.html#http-request-smuggling"
  },"108": {
    "doc": "0x11 - HTTP Request Smuggling",
    "title": "References",
    "content": "[1] HTTP request smuggling. PortSwigger. https://portswigger.net/web-security/request-smuggling. (Fetched 2021-04-13) . ",
    "url": "http://localhost:4000/pages/guides/web/http-request-smuggling.html#references",
    "relUrl": "/pages/guides/web/http-request-smuggling.html#references"
  },"109": {
    "doc": "0x11 - HTTP Request Smuggling",
    "title": "0x11 - HTTP Request Smuggling",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/http-request-smuggling.html",
    "relUrl": "/pages/guides/web/http-request-smuggling.html"
  },"110": {
    "doc": "0x02 - Analyzing I2C",
    "title": "Analyzing I2C (Inter-Integrated Circuit)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#analyzing-i2c-inter-integrated-circuit",
    "relUrl": "/pages/guides/hardware/i2c.html#analyzing-i2c-inter-integrated-circuit"
  },"111": {
    "doc": "0x02 - Analyzing I2C",
    "title": "1. I2C protocol internals",
    "content": ". | Bus protocols designed for data communications between different components in an embedded device | Common modules having bus protocol . | Flash chip | EEPROM chip | Microcontrollers | LCD | RTC (Real Time Clocks) | Analog to Digital Convertors (ADC) | etc. | . | I2C and SPI are both meant for communicating with other peripherals located on the same board | UART limitations compared to I2C . | facilitating communication between only two devices at a given time | start-stop bits increase size and reduce speed of process | originally intended for communication for large distances, . | while interacting with external devices via cables | . | . | Multi-master serial protocol (with multi-slaves) | Half-duplex (send or receive) (read or write) | Consists of 2 pins for data transfer . | Serial Data (SDA) and Serial Clock (SCL) | . | If 2 masters wanted to take control over an I2C bus at the same time? . | Whichever master pulls the SDA to LOW (0) will gain control of the bus | i.e. zero rushes to win | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#1-i2c-protocol-internals",
    "relUrl": "/pages/guides/hardware/i2c.html#1-i2c-protocol-internals"
  },"112": {
    "doc": "0x02 - Analyzing I2C",
    "title": "2. Pentest objectives",
    "content": ". | Read (dump) contents (firmware and sensitive data) from a device’s flash chip | Write (flash) content (such as backdoor firmware image) to the flash chip | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/i2c.html#2-pentest-objectives"
  },"113": {
    "doc": "0x02 - Analyzing I2C",
    "title": "3. Tools",
    "content": ". | I2C Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | . | i2ceeprom.py | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#3-tools",
    "relUrl": "/pages/guides/hardware/i2c.html#3-tools"
  },"114": {
    "doc": "0x02 - Analyzing I2C",
    "title": "4. Identify the I2C pinouts",
    "content": ". | Open the device | Visually identify the I2C EEPROM chip on the PCB | Note the component number printed on the I2C chip | Look up online for the datasheet to figure out the pinouts of EEPROM . | Flash and EEPROM have common pinouts but sometimes changes according to the manufacturers . | Flash pinouts . | #CS, SO/IO1, SI/IO0, VSS, VCC | . | EEPROM pinouts . | #CS, SCK, MISO, MOSI, GND, VCC, #WP, #HOLD | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#4-identify-the-i2c-pinouts",
    "relUrl": "/pages/guides/hardware/i2c.html#4-identify-the-i2c-pinouts"
  },"115": {
    "doc": "0x02 - Analyzing I2C",
    "title": "5. Connecting EEPROM",
    "content": ". | Method 1: SOIC clip . | directly connect it to the adapter by holding the EEPROM using a SOIC clip | . | Method 2: Desoldering . | remove the EEPROM from the PCB by de-soldering | solder it on a EEPROM adapter (or reader) . | use an adapter which is suitable for EEPROM packaging type | . | . | SOIC clip vs desoldering . | The memory component on the PCB is accessed using the SOIC clip or by desoldering. | Although the SOIC clip approach is more practical and less invasive, . | desoldering is sometimes unavoidable. | . | The voltage supplied to the memory through the SOIC clip sometimes also powers other chips. | Some of the other components on the PCB may attempt to communicate with the memory, . | thus blocking communication between the memory and the external adapter. | . | Therefore, it becomes imperative to remove the memory component from the PCB. | . | Adapter (Attify Badge) pin layout . | D0 | SCK Serial Clock | . | D1 | SDA* Serial Data | . | D2 | SDA* Serial Data | . Note: For I2C, the D1 and D2 lines need to be connected together for SDA. | Connect the EEPROM pins to the adapter (Attify Badge) . | EEPROM | Adapter | . | A0, A1, A2, GND | GND | . | VCC | 5V | . | WP | 5V (Write Protect) | . | SDA | D1 and D2 of Attify badge | . | CLK | D0 of Attify badge | . | Connect the adapter to the analysis PC via USB | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#5-connecting-eeprom",
    "relUrl": "/pages/guides/hardware/i2c.html#5-connecting-eeprom"
  },"116": {
    "doc": "0x02 - Analyzing I2C",
    "title": "6. Reading data",
    "content": ". | Read data from the device using an I2C EEPROM | Use the i2ceeprom.py script | Need to modify parameters (size and speed) before start . | eeprom.Start() | to start the I2C clock | . | Start | initialize the EEPROM | . | eeprom.Write(RCMD) | set EEPROM to Read mode | . | data() | start reading content from the EEPROM and saving it | . | Stop() Close() | stop and we close the I2C connection | . | write() | write the content to a binary file | . | Dump the contents to a file | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#6-reading-data",
    "relUrl": "/pages/guides/hardware/i2c.html#6-reading-data"
  },"117": {
    "doc": "0x02 - Analyzing I2C",
    "title": "7. Writing data",
    "content": ". | Write data to the I2C EEPROM | Use the i2ceeprom.py script | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#7-writing-data",
    "relUrl": "/pages/guides/hardware/i2c.html#7-writing-data"
  },"118": {
    "doc": "0x02 - Analyzing I2C",
    "title": "References",
    "content": ". | I2C Hacking Demystified | . ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html#references",
    "relUrl": "/pages/guides/hardware/i2c.html#references"
  },"119": {
    "doc": "0x02 - Analyzing I2C",
    "title": "0x02 - Analyzing I2C",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/i2c.html",
    "relUrl": "/pages/guides/hardware/i2c.html"
  },"120": {
    "doc": "0x01 - Injection Attacks",
    "title": "Injection Attacks",
    "content": "When a system allows untrusted data to be entered into interpreters we say that the system is vulnerable to injection attacks. Examples include SQL, NoSQL, OS, and LDAP injection.[1] . ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#injection-attacks",
    "relUrl": "/pages/guides/web/injection.html#injection-attacks"
  },"121": {
    "doc": "0x01 - Injection Attacks",
    "title": "SQL Injection (SQLi)",
    "content": "SQL stands for Structured Query Language, and is a language used for storing, manipulating, and retrieving data in relational databases.[2, 3] When a website doesn’t sanitize its incoming data, and that data is used to query a table in a database, a hacker could be able to access and manipulate data in that database using clever inputs. If the data is fetched through a login page, and the data within is storing users and their passwords, the consequences could be dire. Examples . SQL injection vulnerability in WHERE clause allowing retrieval of hidden data . The following is a basic example from the PortSwigger Web Security Academy, specifically from the lab “SQL injection vulnerability in WHERE clause allowing retrieval of hidden data”. The lab is a website that looks like this: . The shopping site displays 12 products and four categories that you can click on to filter through the displayed products. There is also a button to see all products. There are also some products that are hidden from the user, but still exist in the database. Those products are unreleased. In this lab, the goal is to find a way to exploit an SQLi vulnerability in the product category filter so that all products are listed, no matter their status as released or unreleased products. We are given the SQL query that is used in the backend: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 . The asterisk * is a wild card that means “all”. So, the query means that we want everything from the products table, where the category is ‘Gifts’ and the value of released is one. We can perform the SQL injection simply by editing the URL of the links to filter through the product categories. If you click on the link to see all products in the Gifts category for example, you get redirected to the following URL: https://&lt;LAB_ID&gt;.web-security-academy.net/filter?category=Gifts . Let’s say we didn’t know the website was vulnerable to SQL injections. How would we test that it was? Well, in SQL there are multiple syntactic features that we can use to check that. One of them is the single quote: ‘. Let’s try it out! We change our URL to the following instead: https://&lt;LAB_ID&gt;.web-security-academy.net/filter?category=' . Something happens: . Why? Because the resulting query was this one: . SELECT * FROM products WHERE category = ''' AND released = 1 . When SQL looks at this query, it thinks that it should grab all products where the category is ‘’ - that is, the empty string: nothing. Next, a new string starts with the last of the three single quotes, and presumably that string doesn’t end until the next single quote ‘ pops up in the backend code. The result is that SQL doesn’t know what to do with these weird patches of unintelligible statements, and thus, we get “Internal Server Error”. Great! Now we know that the site probably has an SQLi vulnerability. So how do we grab all those products then? . Two useful SQL features that we are going to use to construct the SQLi query are OR statements and SQL comments. SQL comments are written like this: --Example comment . Just like with comments in other languages, SQL comments tell the computer that the text within it are not to be interpreted as code. We can use OR in combination with a boolean statement that is always true, such as 1=1, to reconstruct the WHERE part of the SELECT statement from before so that it’s always true. For example, consider the following SQL query: . SELECT * FROM products WHERE category = 'Gifts' OR 1=1 . This means that SQL should get all products where the category is Gifts, OR where 1=1. Logically, that is true for all rows in the products table, since 1=1 is always true. So SQL gets all rows in the products table, and tada - we’re done! . Before we celebrate however, we need to figure out how to actually make the backend SQL end up with a query such as that one. It doesn’t work to just type in “OR 1=1” in the end of your URL since that will result in a string, such as in the following query: . SELECT * FROM products WHERE category = 'Gifts OR 1=1' AND released = 1 . We need to be a bit more clever with how we construct the query. First of all, we need to end the string before OR so that it’s interpreted as part of the query rather than just a string: . https://&lt;LAB_ID&gt;.web-security-academy.net/filter?category=Gifts'OR 1=1 . Now we have the following query: . SELECT * FROM products WHERE category = 'Gifts' OR 1=1' AND released = 1 . There is still a problem though: . Can you see why? . We still have a lingering single quote after 1=1, which starts a new string that goes on all the way down until another single quote appears. We get the same issue as when we just entered the single quote when we checked if the site was vulnerable to SQL injections. How do we solve this? With SQL comments! . If all the rest of the query is a comment, SQL will not interpret all that ugly broken code, and we’ll get rid of the “Internal Server Error”. Let’s enter the following into the URL: . https://&lt;LAB_ID&gt;.web-security-academy.net/filter?category=Gifts'OR 1=1-- . This gives rise to this SQL query: . SELECT * FROM products WHERE category = 'Gifts'OR 1=1--' AND released = 1 . The AND released = 1 part now gets interpreted as a comment, and will not be included in the query. The result is that we tell SQL to select all from products where the category is Gifts, OR where 1=1 - i.e. all products, no matter the value of the released variable. Great! That concludes this first, very basic example of SQLi. There are more helpful examples at W3Schools and PortSwigger Web Security Academy. ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#sql-injection-sqli",
    "relUrl": "/pages/guides/web/injection.html#sql-injection-sqli"
  },"122": {
    "doc": "0x01 - Injection Attacks",
    "title": "NoSQL Injection",
    "content": "NoSQL is a term that refers to all databases that (surprise) aren’t SQL databases.[4] Since SQL is for relational databases, another name for NoSQL databases is non-relational databases. Examples of NoSQL databases include MongoDB, Firebase, CouchDB and Redis.[4, 9] Even though SQL injection attacks don’t work on NoSQL databases, that doesn’t mean that NoSQL is invulnerable to injection attacks. You can read more at Infosec Institute. ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#nosql-injection",
    "relUrl": "/pages/guides/web/injection.html#nosql-injection"
  },"123": {
    "doc": "0x01 - Injection Attacks",
    "title": "OS Injection",
    "content": "OS Injection, also known as Command Injection or Shell Injection, is one of the more dangerous forms of injection attacks since a successful attack can compromise the entire application and its data.[6] If the attack is successful, a hacker is able to enter arbitrary shell commands. This often gives the same privileges to the hacker as the application has on its host infrastructure, and therefore not only can the app and its data be compromised, but other parts of the server hosting the app as well. You can read more at PortSwigger, the creator of Burp Suite. ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#os-injection",
    "relUrl": "/pages/guides/web/injection.html#os-injection"
  },"124": {
    "doc": "0x01 - Injection Attacks",
    "title": "LDAP Injection",
    "content": "LDAP stands for Lightweight Directory Access Protocol, and is an application layer protocol used for accessing and maintaining distributed directory services over IP.[7] . A directory service is a software application that allows many users to work with the same resource directories. LDAP uses the fact that directories can be seen as databases, where the information structure is a tree. One of the most common uses of LDAP is to search a directory tree for a specific resource, and it does this through special LDAP filters (defined in RFC 4515). Through manipulating these filters and combining them with their own code injections, an attacker could be able to achieve their own objectives.[8] . You can read a more thorough analysis of LDAP injection in LDAP injection techniques. ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#ldap-injection",
    "relUrl": "/pages/guides/web/injection.html#ldap-injection"
  },"125": {
    "doc": "0x01 - Injection Attacks",
    "title": "References",
    "content": "[1] Top 10 Web Application Security Risks. OWASP. 2017. https://owasp.org/www-project-top-ten/. (Fetched 2021-03-24) [2] SQL Tutorial. W3Schools. https://www.w3schools.com/sql/. (Fetched 2021-03-24) [3] SQL. Wikipedia. https://en.wikipedia.org/wiki/SQL. (Fetched 2021-03-24) [4] NoSQL Database - What is NoSQL? Microsoft Azure. https://azure.microsoft.com/en-us/overview/nosql-database/. (Fetched 2021-03-28) [5] NoSQL. Wikipedia. https://en.wikipedia.org/wiki/NoSQL. (Fetched 2021-03-28) [6] OS command injection. Portswigger. https://portswigger.net/web-security/os-command-injection. (Fetched 2021-03-28) [7] Lightweight Directory Access Protocol. Wikipedia. https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol. (Fetched 2021-03-28) [8] J. M. Alonso, R. Bordon, M. Beltran and A. Guzman, “LDAP injection techniques,” 2008 11th IEEE Singapore International Conference on Communication Systems, Guangzhou, China, 2008, pp. 980-986, doi: 10.1109/ICCS.2008.4737330. [9] Cloud Firestore. Google Firebase. https://firebase.google.com/docs/firestore/. (Fetched 2021-04-25) . ",
    "url": "http://localhost:4000/pages/guides/web/injection.html#references",
    "relUrl": "/pages/guides/web/injection.html#references"
  },"126": {
    "doc": "0x01 - Injection Attacks",
    "title": "0x01 - Injection Attacks",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/injection.html",
    "relUrl": "/pages/guides/web/injection.html"
  },"127": {
    "doc": "0x08 - Insecure Deserialization",
    "title": "Insecure Deserialization",
    "content": "Serialization is the process of taking an object and turning it into a data format that can be stored, so that it later can be fetched and deserialized back into an object. Some common data formats for serializing data are JSON (JavaScript Object Notation) and XML (eXtensible Markup Language); however, several programming languages today contain support for deserialization with more capabilities than JSON or XML. These deserialization features can also be used for malicious purposes, if they are operating on untrusted data.[1] . Insecure Deserialization vulnerabilities often lead the risk of leading to RCE (Remote Code Execution), DoS (Denial of Service), or privilege escalation. To exploit this type of vulnerability, one must find somewhere in the target service where deserialization is used. The following table[2] specifies some hints that applications give, depending on the underlying technology: . | Technology | Hint | . | Java | HTTP header “application/x-java-serialized-object” | . |   | Sequence “r0O” in base64 encoded data | . |   | HEX signature “AC ED 00 05” | . | C#/.NET | Sequence “AAEAAAD/////” in base64 encoded data | . |   | “Type-Object” in client-side code | . |   | “$type:” in client-side code | . You can find more information in the book “The Penetration Tester’s Guide to Web Applications” by Serge Borso. If you have a KTH account, you can access it here. ",
    "url": "http://localhost:4000/pages/guides/web/insecure-deserialization.html#insecure-deserialization",
    "relUrl": "/pages/guides/web/insecure-deserialization.html#insecure-deserialization"
  },"128": {
    "doc": "0x08 - Insecure Deserialization",
    "title": "References",
    "content": "[1] Deserialization Cheat Sheet. OWASP. https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html. (Fetched 2021-03-30) [2] Borso, Serge. (2019). The Penetration Tester’s Guide to Web Applications (Artech House information security and privacy series). Norwood: Artech House. Link to KTH Library. ",
    "url": "http://localhost:4000/pages/guides/web/insecure-deserialization.html#references",
    "relUrl": "/pages/guides/web/insecure-deserialization.html#references"
  },"129": {
    "doc": "0x08 - Insecure Deserialization",
    "title": "0x08 - Insecure Deserialization",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/insecure-deserialization.html",
    "relUrl": "/pages/guides/web/insecure-deserialization.html"
  },"130": {
    "doc": "Introduction to Clusterfuzz",
    "title": "Introduction to Clusterfuzz",
    "content": "Clusterfuzz is a scalable fuzzing infrastructure offered by Google. It allows you to use the Google Cloud Platform to systematically and efficiently fuzz software in order to find security issues. At NSE we want students to use the Clusterfuzz service we have set up to analyse the security of software as part of their research. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html",
    "relUrl": "/pages/guides/fuzzing/introduction.html"
  },"131": {
    "doc": "Introduction to Clusterfuzz",
    "title": "What is fuzzing?",
    "content": "Fuzzing is an automated method of testing software by supplying it with a large number of inputs. The type of input is determined by the method of fuzzing you use. In the early days fuzzing produced completely random inputs to try and cause bugs in the target software, however now most fuzzing engines create variations on the software’s valid input in order to cause unexpected behavior deep in the code. There are many types of fuzzing tools, two of the most popular and the ones used in Clusterfuzz are AFL and Libfuzzer. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html#what-is-fuzzing",
    "relUrl": "/pages/guides/fuzzing/introduction.html#what-is-fuzzing"
  },"132": {
    "doc": "Introduction to Clusterfuzz",
    "title": "How does Clusterfuzz work?",
    "content": "Clusterfuzz’s main selling point is that instead of using your own machines or servers to fuzz, you use Google’s cloud platform. When you create your own instance of Clusterfuzz it launches a web application that allows users to upload their target software to fuzz and offers a nice UI for the results from fuzzing. I recommend reading through the Clusterfuzz documentation to get a better understanding on how to use the Clusterfuzz web interface. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/introduction.html#how-does-clusterfuzz-work",
    "relUrl": "/pages/guides/fuzzing/introduction.html#how-does-clusterfuzz-work"
  },"133": {
    "doc": "IoT Devices",
    "title": "IoT Devices",
    "content": "This is a list of the current IoT devices in the lab. Note that for hacking thesis projects, you are not limited to these, instead check out choice of system to explore. Is the product or tool your looking for not available? Click here . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#iot-devices",
    "relUrl": "/pages/lab-equipment/iot-devices.html#iot-devices"
  },"134": {
    "doc": "IoT Devices",
    "title": "Smart Home",
    "content": "| Device | Availability | . | Jisiwei i3 Vacuum Cleaner x1 | Available | . | Trifo Ironpie m6 Vacuum Cleaner x1 x1 | Available | . | TP-Link Smart WiFi Plug x1 | Borrowed | . | TP-link 150Mpbs Wireless Adapter x2 | Available | . | Netgear N150 Wireless USB Adapter x1 | Available | . | Glue Smart Lock x1 | Available | . | Dana Smart Lock v3 Scandi x1 | Available | . | Ring Video Doorbell 3 Plus x1 | Borrowed | . | Deltaco Smart Home Doorbell SH-DB01 x1 | Borrowed | . | Nedis SmartLife Video Doorbell x1 | Borrowed | . | Samsung Smart Fridge DA9719112A x1 | Available | . | YI Dome X Camera x1 | Borrowed | . | Verisure Smart Alarm System x1 | Borrowed | . | Securitas Alarm System x1 | Available | . | Yale Doorman V2N x1 | Available | . | Yale Doorman L3 1x  | Available | . | Verisure Smart Låsmodul x1 | Available | . | Amazon Smart Plug x1 | Borrowed | . | DLink WiFi Smart Plug x1 | Borrowed | . | E2 Classic Energy Monitor x1 | Borrowed | . | Telldus Smart Home StartUp Kit x1 | Borrowed | . | Tapo C200 Pan/Tilt Home Security Wi-Fi Camera x1 | Available | . | Trixie Smart Food Dispenser TX9 x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#smart-home",
    "relUrl": "/pages/lab-equipment/iot-devices.html#smart-home"
  },"135": {
    "doc": "IoT Devices",
    "title": "Smart Cameras",
    "content": "| Device | Availability | . | D-Link WiFi Camera DCS‑5000L x2 | 2x Available | . | D-Link WiFi Camera DCS-932L x1 | Borrowed | . | Xiaomi Mi Home Security Camera 360 x2 | 2x Borrowed | . | TP-Link Tapo C200 x2 | Borrowed | . | mydlink HD Pan &amp; Tilt Wi-Fi Camera DCS-8515LH x1 | Borrowed | . | iSmart Gate Cam x2 | 1x Available, 1x Borrowed | . | iSmart Gate Pro Smart Garage Opener x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#smart-cameras",
    "relUrl": "/pages/lab-equipment/iot-devices.html#smart-cameras"
  },"136": {
    "doc": "IoT Devices",
    "title": "Transport",
    "content": "| Device | Availability | . | Parrot Anafi Drone x1 | Available | . | DJI Mini 2 Drone x2 | 2x Available | . | Xiaomi M365 Scooter x1 | Available | . | AutoPi Smart Car Dongle x5 | Available | . | AutoPi Smart Car Power Adapter x5 | Available | . | OBDII Dongle x 1 | Borrowed | . | DEFA Car Alarm System x 1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#transport",
    "relUrl": "/pages/lab-equipment/iot-devices.html#transport"
  },"137": {
    "doc": "IoT Devices",
    "title": "Wearables",
    "content": "| Device | Availability | . | XPLORA 3S Smart Watch x2 | 1x Available, 1x Borrowed | . | Garmin Vivoactive 4s x1 | Borrowed | . | Garmin GPS Venu 1x | Available | . | Forever See Me KW-300 Smart Watch x1 | Borrowed | . | Forever KW-50 Kids Watch 1x | Available | . | Q13 Smart Watch 1x | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#wearables",
    "relUrl": "/pages/lab-equipment/iot-devices.html#wearables"
  },"138": {
    "doc": "IoT Devices",
    "title": "Phones",
    "content": "| Device | Availability | . | Samsung Galaxy A41 1x | 1x Borrowed | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#phones",
    "relUrl": "/pages/lab-equipment/iot-devices.html#phones"
  },"139": {
    "doc": "IoT Devices",
    "title": "ICS equipment",
    "content": "| Device | Availability | . | RTU, Siemens SICAM CMIC x1 | Available | . | AS-Interface, Profibus, DP Gateway with PLC (AC1365) x1 | Available | . | Logic Module, Siemens LOGO! 12/24 RCE - 6ED1052-1MD08-0BA0 x1 | Available | . | Startkit CPU 1212C + KTP400 Basic Siemens S7-1200 - 6AV6651-7KA02-3AA4 x1 | Available | . | Opto22 PLC x1 | Borrowed | . | IoT-startkit CloudRAIL.Box Set x1 | Borrowed | . | AIK001 Wireless IoT Gateway x1 | Available | . ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#ics-equipment",
    "relUrl": "/pages/lab-equipment/iot-devices.html#ics-equipment"
  },"140": {
    "doc": "IoT Devices",
    "title": "Product unavailable?",
    "content": "Please submit the product name, your e-mail address and your name to get in line for the product. We will as soon as possible contact you with an approximate time when the product is available again. ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html#product-unavailable",
    "relUrl": "/pages/lab-equipment/iot-devices.html#product-unavailable"
  },"141": {
    "doc": "IoT Devices",
    "title": "IoT Devices",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/iot-devices.html",
    "relUrl": "/pages/lab-equipment/iot-devices.html"
  },"142": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "Analyzing JTAG",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#analyzing-jtag",
    "relUrl": "/pages/guides/hardware/jtag.html#analyzing-jtag"
  },"143": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "1. JTAG Internals",
    "content": ". | JTAG is a hardware (debug) interface that communicates directly with the microcontroller . | If the IoT device is not running a full-fledged OS or | the hardware does not provide a serial interface, | a lower-level debug approach, JTAG, is usually available | . | JTAG is a standard way of testing and debugging chips on the device . | identifying manufacturing defects . | identifying faulty components | missing components in a PCB | unconnected pins or incorrect placement of the device | . | device failure conditions | accessing individual pin values on each chip | overall system testing | debugging the various chips (actually running binaries or firmware) | . | JTAG is not exactly a communication protocol | Access instructions are found on the chip or on the microcontroller specification . | Operation mechanism . | Testing technique is known as Boundary Scan . | sends a data into one of the chips | compares the output to the input | verifies if it is OK | . | Boundary Scan cells embedded into the chips itself (near each pin) | Boundary Scan description language file . | defines the capabilities of any single device’s Boundary Scan logic | . | Boundary Scan instructions . | BYPASS | SAMPLE/PRELOAD | EXTEST | . | TAP pins . | TAP is a collective name given to the JTAG interfaces on a device | Test Clock (TCK) | Test Data In (TDI) | Test Data Out (TDO) | Test Mode Select (TMS) | Test Reset (TRST, optional) | . | TAP controller machine . | consists of TCK, TMS, TRST | manages the overall exchange of data and instructions | . | I/O pins of the device . | are connected serially that form a chain | accessed by the Test Access Port (TAP) for testing | . | Testing (Boundary Scan) Process . | TAP controller applies test data on the TDI pins | BSR (Boundary Scan Register) monitors the input to the device | Data is captured by the Boundary Scan cell | Data then goes in the device through the TDI pins | Data comes out of the device through the TDO pins | Tester verifies the data on the output pin of the device | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#1-jtag-internals",
    "relUrl": "/pages/guides/hardware/jtag.html#1-jtag-internals"
  },"144": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "2. Pentest objectives",
    "content": ". | Bypass almost all software based security controls . | set breakpoints | inspect/modify registers/memory/stack | change binary/firmware execution flow | inject code into the process memory | bypass login | . | Read from/write to flash chip . | if PCB has JTAG access available and . | contains an onboard flash chip, then the contents can be read/written via JTAG | . | dump firmware/bootloader | write backdoored firmware | flash modified firmware to device for bypassing restrictions | . | Debug interfaces sometimes deactivated intentionally for security purposes . | either by software or hardware | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/jtag.html#2-pentest-objectives"
  },"145": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "3. Tools",
    "content": ". | JTAG pinout identifier . | JTAGulator (or) | JTAGEnum Arduino | . | Communication . | minicom (or) | screen (or) | Attify Badge GUI | . | JTAG Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge (or) | Segger J-Link | . | OpenOCD | GDB-Multiarch | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#3-tools",
    "relUrl": "/pages/guides/hardware/jtag.html#3-tools"
  },"146": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "4. Identify JTAG pinouts",
    "content": ". | Look JTAG pinouts up online to learn appearance . | instead of pins or pads with holes, PCB usually have plain pads for JTAG | therefore soldering experience is needed . | to gain experience practice on Raspberry Pi or Intel Galileo | . | . | Open the device | Identify the JTAG pads on the PCB . | TCK | Test Clock | . | TDI | Test Data In | . | TDO | Test Data Out | . | TMS | Test Mode Select | . | Method1: JTAGulator . | open-source hardware | has 24 I/O channels | discovers JTAG and UART pinouts | screen or minicom is used for interaction . | connect relevant pins on target device to the JTAGulator channels | connect GND to GND . | run a screen with the baudrate (need to identify before) . screen /dev/ttyUSB0 115200 . | on the command line . | enter V to set voltage (i.e 3.3) | enter B to set number of channels for BYPASS scan instruction | . | JTAGulator identifies corresponding pinouts | . | Method2: Arduino flashed with JTAGEnum . | much cheaper and slower | discovers only JTAG pinouts | Arduiono IDE . | paste JTAGEnum application code | select port and Arduino type from menu options | upload | . | interact with Arduino via a serial connection . | Serial Monitor of Arduino IDE or | screen or | minicom | . | on the command line . | enter s to start scanning | . | JTAGEnum identifies corresponding pinouts | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#4-identify-jtag-pinouts",
    "relUrl": "/pages/guides/hardware/jtag.html#4-identify-jtag-pinouts"
  },"147": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "5. Connecting JTAG",
    "content": ". | OpenOCD . | open-source software | to perform On Chip Debugging via JTAG | interacts with a hardware debugger’s JTAG port . | debug chips | set breakpoints | program and interact flash chips | dump firmware and sensitive data | . | . | Adapter (Attify Badge) pin layout . | D0 | TCK Test Clock | . | D1 | TDI Test Data In | . | D2 | TDO Test Data Out | . | D3 | TMS Test Mode Select | . | Connect the JTAG pins to the adapter (Attify Badge) . | JTAG | Adapter | . | CLK | TCK (D0) | . | TDI | TDI (D1) | . | TDO | TDO (D2) | . | TMS | TMS (D3) | . | NOTE: The pins functioning as CLK, TDI, TDO, and TMS differs . | based on the processor or controller of the target device. | Need to review datasheet | . | find the OpenOCD configuration file for the adapter (Attify Badge JTAG) . | badge.cfg is available | . | find the configuration file for the device . | check if the target device’s TAP controller is supported by OpenOCD . ls openocs/tcl/&lt;target&gt; . | if it does not exists, manually create one for it . | . | . openocd –c \"telnet_port 2121\" –f badge.cfg –f target.cfg telnet localhost 2121 reset init flash banks halt . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#5-connecting-jtag",
    "relUrl": "/pages/guides/hardware/jtag.html#5-connecting-jtag"
  },"148": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "6. Read data",
    "content": ". | Read data over JTAG | Method 1 . flash banks dump_image firmware.bin 0x08000000 0x00010000 flash banks . | Method 2 . mwd 0x00 0x20 . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#6-read-data",
    "relUrl": "/pages/guides/hardware/jtag.html#6-read-data"
  },"149": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "7. Write data to target",
    "content": ". | Write data over JTAG . flash banks flash write_image erase firmware.bin 0x08000000 flash banks . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#7-write-data-to-target",
    "relUrl": "/pages/guides/hardware/jtag.html#7-write-data-to-target"
  },"150": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "8. Debugging with GDB",
    "content": "gdb-multiarch program.bin set architecture arm target remote localhost:3333 . | hbreak &lt; function-name &gt; | continue standard binary reversing | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#8-debugging-with-gdb",
    "relUrl": "/pages/guides/hardware/jtag.html#8-debugging-with-gdb"
  },"151": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "References",
    "content": ". | JTAG Explained | . ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html#references",
    "relUrl": "/pages/guides/hardware/jtag.html#references"
  },"152": {
    "doc": "0x04 - Analyzing JTAG",
    "title": "0x04 - Analyzing JTAG",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/jtag.html",
    "relUrl": "/pages/guides/hardware/jtag.html"
  },"153": {
    "doc": "Lab Equipment",
    "title": "Lab Equipment",
    "content": " ",
    "url": "http://localhost:4000/pages/lab-equipment/lab-equipment.html",
    "relUrl": "/pages/lab-equipment/lab-equipment.html"
  },"154": {
    "doc": "Cyber Security Lab",
    "title": "Cyber Security Lab",
    "content": "The lab is located at Teknikringen 33, room 3339 at ground floor, by the Networks and Systems Engineering (NSE) Division. we have a room available for penetration testing experimentation. Various pieces of equipment are available for thesis project workers to use, as shown in the lab equipments page. There are also four large desks to use as work stations. If you would like to access the lab, send an email to Fredrik at fheiding@kth.se or contact your supervisor. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/lab.html",
    "relUrl": "/pages/thesis_guidelines/lab.html"
  },"155": {
    "doc": "Language",
    "title": "Language",
    "content": "It is important that the language in your report is well-formed. If you need writing assistance, kindly contact the Centre for Academic Writing &amp; Rhetoric. They provide guideance and you may also book an appointment for tutoring. Note that non-fluent Swedish speakers probably will need some assistance with the compulsory Swedish thesis abstract, as the current state of machine translation still is not quite good enough. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/language.html",
    "relUrl": "/pages/thesis_guidelines/language.html"
  },"156": {
    "doc": "0x10 - Insufficient Logging and Monitoring",
    "title": "Insufficient Logging and Monitoring",
    "content": "In secure systems, ongoing attacks should be notified to the owners or maintainers as soon as possible so that the attack can be stopped. If the system doesn’t, the attackers could get access to more and more data and do even more damage, without facing any defences from the target system. This can be likened as having a house without alarms - if an intruder gets in, nobody is notified and the intruder can do whatever they want for a much longer time than if an alarm had gone off. Having implemented a stable logging system is also extremely important, as it allows the system’s maintainers to notice suspicious behavior.[1] . Because of insufficient logging and monitoring being so common, a lot of the times it’s possible for an attacker to simply make their attacks slightly stealthier for it to go unnoticed. The popular tool Nmap has many options that can be used for this purpose. ",
    "url": "http://localhost:4000/pages/guides/web/logging-and-monitoring.html#insufficient-logging-and-monitoring",
    "relUrl": "/pages/guides/web/logging-and-monitoring.html#insufficient-logging-and-monitoring"
  },"157": {
    "doc": "0x10 - Insufficient Logging and Monitoring",
    "title": "Nmap",
    "content": "Kali Linux comes with Nmap installed by default, but you can also download it here. Nmap was designed to scan both whole networks as well as single hosts. Its output is a list of the scanned hosts, with extra information on each host depending on the options specified.[2] . There are multiple port scanning techniques that Nmap can use. Here is an excellent guide to figuring out which one to use in what situations. For more information on how to use Nmap, see the Nmap Reference Guide. ",
    "url": "http://localhost:4000/pages/guides/web/logging-and-monitoring.html#nmap",
    "relUrl": "/pages/guides/web/logging-and-monitoring.html#nmap"
  },"158": {
    "doc": "0x10 - Insufficient Logging and Monitoring",
    "title": "References",
    "content": "[1] Borso, Serge. (2019). The Penetration Tester’s Guide to Web Applications (Artech House information security and privacy series). Norwood: Artech House. Link to KTH Library. [2] Nmap Reference Guide. nmap.org. https://nmap.org/book/man.html#man-description. (Fetched 2021-05-23) . ",
    "url": "http://localhost:4000/pages/guides/web/logging-and-monitoring.html#references",
    "relUrl": "/pages/guides/web/logging-and-monitoring.html#references"
  },"159": {
    "doc": "0x10 - Insufficient Logging and Monitoring",
    "title": "0x10 - Insufficient Logging and Monitoring",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/logging-and-monitoring.html",
    "relUrl": "/pages/guides/web/logging-and-monitoring.html"
  },"160": {
    "doc": "Overview of LTE Hacking",
    "title": "An overview of hacking LTE",
    "content": "This document serves as a starting point for individuals looking into hacking cellular network technology, in particular Long-Term Evolution (LTE). It will provide an overview of the currently known vulnerabilities and methods of breaking cellular security. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#an-overview-of-hacking-lte",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#an-overview-of-hacking-lte"
  },"161": {
    "doc": "Overview of LTE Hacking",
    "title": "What is LTE?",
    "content": "Defining the various mobile telecommunication standards can be quite confusing. For each generation international committees agree on improvements the new generation shall have over the previous one. So far there has been commercial releases of 1G, 2G, 3G and 4G technology with 5G being the next generation currently in development. A cellular network generation like 4G is a detailed set of standards and capabilities that a system has to have in order for it be able to called 4G. LTE is a an example of such a system that was developed and submitted as a candidate for a 4G wireless service. However, confusingly, normal LTE doesn’t actually meet the technical criteria of 4G so it is sometimes called 3.95G, which led to the development of LTE Advanced which is a major improvement of LTE and actually meets the standards of 4G. What’s important to remember is that LTE is an implementation of the 4G standards and that 4G LTE is the de-facto technology used by carriers across the world. If you’re interested in learning more about the history of cellular network generations I recommend reading the paper From 1G to 5G, What Next? . ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#what-is-lte",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#what-is-lte"
  },"162": {
    "doc": "Overview of LTE Hacking",
    "title": "How Does LTE work?",
    "content": "The LTE network architecture is made up of three clearly defined parts. Firstly are the end-point devices such as your mobile phone which are known as User Equipment (UE). The second are the intermediate connectors which are the base stations (eNobeB) that act as the first point of contact between a UE and the wider network, this is known as the Evolved Universal Terrestrial Radio Access Network (EUTRAN). The final part is the core which routes packets through the network as well as authenticating and managing a user session and many other tasks. This is known as the Evolved Packet Core (EPC). There are many subcomponents in a LTE network. Below is a diagram illustrating an overview of the network and a brief explanation of each component. | UE (User Equipment): the user’s device which contains the Subscriber Identity Module (SIM or USIM). This is where the IMSI number used to authenticate a user is and the special key used to encrypt traffic is kept. | eNodeB (evolved NobeB): the base station that communicates with the UEs and carrier’s wider network. | MME (Mobile Management Entity): responsible for authentication and management of UEs in the network. | HSS (Home Subscriber Server): stores the security parameters such as keys of the UEs. | S-GW (Serving Gateway): a communication point between EUTRAN and the EPC. | P-GW (PDN Gateway): a routing point between the carrier’s network and the wider packet data network. | . The above diagram comes from the paper Easy 4G/LTE IMSI Catchers for Non-Programmers which explains in greater detail the infrastructure of LTE. For an in depth analysis 4G: LTE/LTE-Advanced for Mobile Broadband is the go-to book on the subject of LTE. It’s written by engineers at Ericsson who were part of the development of the technology - be aware it gets into the nitty gritty of the communication protocols and speaks about wireless networking at an advanced level. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#how-does-lte-work",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#how-does-lte-work"
  },"163": {
    "doc": "Overview of LTE Hacking",
    "title": "LTE Security",
    "content": "LTE has security built into its underlying design and as a result there are lots of steps taken to ensure the confidentiality, integrity and authenticity of your mobile communication. The main overview from the point of view of the user is that LTE uses a hardware protected 128 bit key called K which is used to derive security parameters and more session keys. K is stored inside of the UE’s SIM and in the carrier’s core network - it never leaves those two locations and is never transmitted in its lifetime. There is a complex key hierarchy where essentially every step of communication and sometimes even every protocol has its own key, for example between an eNobeB and a MME. In order for a device to authenticate itself to the network a UE exchanges specific hardware tokens with the core to identify itself. The main token that is used is the International Mobile Subscriber Identity (IMSI) number, this is explained in further detail in the IMSI Catchers section below. I highly recommend watching this talk below as it is a great introduction to LTE security, it’s not too long and is easy to watch. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#lte-security",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#lte-security"
  },"164": {
    "doc": "Overview of LTE Hacking",
    "title": "Types of Attacks",
    "content": "IMSI Catchers . Despite the high level of encryption in LTE there are still a number of packets that are exchanged unencrypted between a UE and an eNodeB in the initial phases of communication. These packets that are sent are to do with authenticating the UE to the network so that that the EPC knows who it’s communicating with. These packets are sent as plaintext as there isn’t the ability to encrypt them since the EPC doesn’t know who its talking to and therefore which keys to use. The 64 bit IMSI number is one of these pieces of data. The IMSI is only ever sent the very first time a mobile device attempts to connect to a brand new network, otherwise if it is connecting to a network it has communicated with previously it can use something known as a TMSI (a temporary and less critical version of the IMSI). An IMSI catcher exploits this aspect of LTE by listening for that first transition of an IMSI number by the UE. The dangers this poses are that they could be used to identify an individual or individuals through their device’s unique IMSI. This could be then used to physically locate a target or perform mass surveillance on a group of people in a geographical area. This is why IMSI catchers are often associated with governmental organisations as a method of surveilling targets. Read more about this here. The basic steps of performing an IMSI Catcher attack are to mimic a genuine eNodeB cell tower and to get your targets to connect to it. Due to the fact that a LTE device will always connect to the network cell with the strongest signal you can quite easily guarantee your target device will communicate with your cell tower, especially in a controlled lab environment. Once the IMSI catcher begins communication with a mobile device it will force the UE to disclose its IMSI number as the fake cell tower represents a new network that the UE has not communicated with before. Mimicking a cell tower requires specific hardware that ranges in price from a few hundred dollars to a few thousand depending on what you’re objectives are. The hardware that is used by an attacker attempting to target people in a real world setting will differ greatly from someone in a lab environment who wants to analyse LTE traffic. An example of a LTE eNobeB lab kit you can buy is this which costs about $6,000. There is a large amount of documentation on creating your own IMSI catcher. The best papers I found were: Easy 4G/LTE IMSI Catchers for Non-Programmers and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. Denial Of Service . There are a number of ways of performing LTE denial of service attacks. Jamming is one technique all wireless communication is particularly vulnerable to. This is where the attacker employs hardware that transmits signals at the same frequency of the communication in order to cause disruptions. There are a number of publications showing that one can quite easily jam LTE signals with low cost off-the-shelf equipment. The publication Jamming LTE Signals goes into depth on this topic. A more nuanced way of launching denial of service attacks again involves creating a fake base station that your victim connects to. This means that you are in control of the point of entry of the UE into the network and therefore can stop all communication or even specifically deny certain services or types of communication. This is discussed in the previously mentioned publications LTE security, protocol exploits and location tracking experimentation with low-cost software radio and Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems. DNS Spoofing . On the data link layer of LTE user data sent between the UE and the eNodeB is encrypted but it is not integrity protected. This means that a message payload could be modified by a rogue base station without any flags being raised. This lack of integrity protection in the data link layer is the centre point of the publication Breaking LTE on Layer 2. The paper details how an attacker could observe a user’s traffic and using packet fingerprinting figure out when a DNS query is made and alter the response to direct the victim to a malicious HTTP server. One of the author’s of the paper gives an informative and concise presentation on their findings in the video below. Eavesdropping Attacks . There doesn’t exist a published method that allows an attacker to see the user data sent over a 4G LTE connection. Due to the fact that LTE uses symmetric key encryption with a 128 bit key that is never transmitted outside of the two endpoints, it does not appear possible to observe the data packets (such as phone calls, text messages etc.) of a victim. However there still may be value in performing eavesdropping attacks on a LTE target depending on what your objectives are. As explained above, in DNS spoofing and ISMI Catchers, a MiTM LTE between the base station and the UE permits an attacker to perform a number of nefarious tasks. Another strategy for a MiTM LTE attack is a downgrade attack. As you may have noticed when travelling through less populated, less developed areas your mobile phone may switch to a lower mobile communication standard. Your phone will switch to a lower standard if it is the only viable option it has. This fact can be taken advantage of by attackers who wish to perform a number of nefarious tasks such as leak location, leak user identity and even potentially snoop on your traffic. For example an attacker could force your LTE device to use the older Global System for Mobile Communications (GSM). Despite having been designed with security in mind GSM is vulnerable to many types of attacks and the cryptographic algorithms (A5/1 and A5/2) used to encrypt user data are breakable (read more about the vulnerabilities in GSM security here). The way to execute a downgrade attack is similar to IMSI catchers in that you create a fake base station that you force your victim to connect to. Once they have connected and you have forced the device to communicate using a lower mobile communication standard, breaking the encryption should be trivial. A detailed guide on how to this is described in the paper LTE security, protocol exploits and location tracking experimentation with low-cost software radio. There is also off-the-shelf equipment that allows one to observe and analyse nearby encrypted LTE traffic. One such product is the SRS LTE Air Interface Analyzer which allows the user to “capture all downlink traffic in any LTE cell in any frequency band”. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#types-of-attacks",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#types-of-attacks"
  },"165": {
    "doc": "Overview of LTE Hacking",
    "title": "Software Defined Radios",
    "content": "One topic you will come across if you are considering building your own rogue base station are LTE Software Defined Radios (SDR). A SDR is a wireless communication system where certain components that are normally implemented in hardware are instead implemented in software. This allows individuals to recreate LTE components using their personal computers. srsLTE is free and open source code that allows a user to recreate an eNodeB base station that fully implements LTE communication standards using a computer and some basic wireless hardware. Below is a picture from the paper Breaking LTE on Layer 2 that shows a setup that uses two srsLTE SDRs to create a lab LTE network. The first SDR emulates an eNodeB towards the UE, and the second SDR emulates the UE towards to commercial network. ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#software-defined-radios",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#software-defined-radios"
  },"166": {
    "doc": "Overview of LTE Hacking",
    "title": "References and Recommended Reading",
    "content": "There are a lot of interesting resources on the Internet regarding LTE hacking. 3GPP is the actual organisation that develops most of the mobile communication protocols we use, including LTE and LTE Advanced. Their website contains lots of documentation on their work. I recommend having a look around there in particular the specifications on “Security Algorithms” and “Security Aspects”. However be aware these are technical documents and therefore very dry reads, worth having a look at though. There is some cool work being done working to protect against LTE attacks. Seaglass is a project conducted by researchers from the University of Washington in order to find IMSI catchers across a city. The paper IMSI-Catch Me If You Can: IMSI-Catcher-Catchers is similar and shows in detail how to detect “artifacts in the mobile network produced by IMSI catchers”. Here is a list of all the academic publications I have referenced: . | From 1G to 5G, What Next? | Easy 4G/LTE IMSI Catchers for Non-Programmers | Practical Attacks Against Privacy and Availability in 4G/LTE Mobile Communication Systems | LTE security, protocol exploits and location tracking experimentation with low-cost software radio | Jamming LTE Signals | Breaking LTE on Layer 2 | . ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html#references-and-recommended-reading",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html#references-and-recommended-reading"
  },"167": {
    "doc": "Overview of LTE Hacking",
    "title": "Overview of LTE Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/lte-hacking.html",
    "relUrl": "/pages/guides/Wireless/lte-hacking.html"
  },"168": {
    "doc": "Method",
    "title": "Method",
    "content": "A penetration testing project usually starts by threat modeling. For a master thesis project, this can correspond to the prestudy that some master programs mandate. Threat modeling briefly consists of a superficial exploration and description of the system, and then a comprehensive categorization of all possible attacks. Each attack should be assessed for its potential impact and the probability of successful exploitation. An excellent overview of threat modeling is provided in Wenjun Xiong and Robert Lagerström, ‘Threat modeling – A systematic literature review’, Comput. Secur., vol. 84, pp. 53–69, Jul. 2019. Adam Shostack’s book Threat Modeling can be used as a methodological guide. Also, I think the steps presented by Synopsys and by Mike Ware make a lot of sense. In particular, I would like to encourage the production of a threat modeling diagram and a threat traceability matrix. There are some free tools available for the diagrammatic representation of the threat model, such as the Microsoft Threat Modeling Tool, OWASP pytm and the OWASP Threat Dragon. You can also use generic drawing tools such as draw.io. In order to learn about the system under consideration, user and developer manuals may be of great utility, as well as other publicly available information, e.g. FCC submissions. The threat modeling phase is typically followed by a number of concrete penetration tests of the most promising avenues of exploitation (as specified in the threat traceability matrix). These may vary significantly with respect to required theory, method, etc. Multiple criteria can be used to select the concrete penetration tests to focus on. Their expected impact and likelihood of success are the obvious selection criteria. The likelihood of success will, in turn depend on the expected difficulty of discovery and exploitation as well as on the skills of the assessor, so these aspects can constitute valid selection criteria. It is a good idea to present in a threat traceability matrix and threat modeling diagram the attack vectors that you have identified, as well as the vectors that you have actually tested. In addition to manual penetration testing, fuzzing is also a good option. We can currently offer a local installation of Google’s Clusterfuzz system, which can scale the fuzzing effort significantly. You can get started by checking out the American Fuzzy Lop fuzzer, which in recent years has revolutionized fuzzing by its effectiveness and ease of use. Good project planning increases the chances of succeeding with your thesis project. There are several tools that can help you organize your work, such as Trello aligned with your threat traceability matrix. One particular hazard with hacking projects is the risk of falling down into a rabbit hole. To avoid rabbit holes, you might consider time boxing. If you are testing an IoT device, Guzman and Gupta’s IoT Penetration Testing Cookbook is a good guide. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/method.html",
    "relUrl": "/pages/thesis_guidelines/method.html"
  },"169": {
    "doc": "Objective",
    "title": "Objective",
    "content": "The goal of the project is to assess some aspects of the security of the chosen computer-based system. It is not necessary to find vulnerabilities in order to produce an excellent thesis report. The goal is, instead, to convincingly demonstrate whether the system is secure or not, given certain delimitations. Of course, a discovered vulnerability will demonstrate that the system in some respect lacks security, but a comprehensive exploration of a chosen attack surface can equally well demonstrate the opposite. You can state your objective in the form of a research question: “Is device X secure against cyber attacks?”. Note that you might want to delimit the research question if there are attacks that you know that you will not explore. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/objective.html",
    "relUrl": "/pages/thesis_guidelines/objective.html"
  },"170": {
    "doc": "Exploitation",
    "title": "IoT pentest process - Exploitation",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html#iot-pentest-process---exploitation",
    "relUrl": "/pages/guides/pentest-process-exploit.html#iot-pentest-process---exploitation"
  },"171": {
    "doc": "Exploitation",
    "title": "2. Exploitation",
    "content": "After finding a satisfactory number of potential vulnerabilities, we move on to the exploitation of our device (or segment of devices). Below are some guidelines that can be useful when conduction the exploitation phase. As with the information gathering, the exploitation techniques differ for different areas of the device (hardware, firmware etc.) and among different devices. Remember to document the used methodology of both successful and unsuccessful exploitation tests. Even if no vulnerability has been successfully exploited or even if no vulnerability was found, it is possible to write a valuable thesis report as long as the process is systematically documented. Several valuable sources exist online. Exploit databases with existing exploits for known vulnerabilities can save time, such as packetstorm or ExploitDB and rapid7’s metasploit framework may contain useful exploits that can be executed without much effort. 2.1 Hardware and firmware . The hardware penetration testing section contains detailed information about various types of hardware hacking together with a collection of links and tutorials that can be useful. We want to spend considerable efforts on analysis of physical interfaces and firmware reversing. Exploitation of the hardware’s physical interfaces includes dumping firmware, backdooring firmware, granting shell access, changing code execution, misusing test functionality, exploiting known vulnerabilities in 3rd party chips, examining external media interfaces, sensitive data exposures, and tamper resistance. After the firmware dumping we can extract the file system inside for analysis. Exploitation of firmware includes searching for sensitive data within the file system, such as hashes, passwords, private certificates, API keys, and staging URLs. After that, libraries that often contain sensitive data are reverse engineered (for certain architectures ARM and MIPS) to identify specific vulnerabilities, command injection and buffer overflows. In general, critical functions are disassembled in detail and main binaries are emulated for dynamic analysis (debugging). The firmware is also fully emulated to perform network testing and web application pentesting on the firmware. In addition, pentest cases include analyzing update mechanisms for malicious updates, local data storage for unencrypted sensitive data, and configurations for security settings. It can be good to look through the firmware pentest methodology by OWASP or our own . 2.2 Network . The traditional network pentest approach can be applied to the IoT device’s network services. We want to exploit a network service to gain user-level access to the device and then escalating our privileges. Semi-automated tools such as the metasploit framework contain several networking exploits that may be applicable to the device for convenient exploitation of known vulnerabilities. If needed, we can perform brute force attacks against the authentication mechanisms and decrypt insecure network traffic. When a vulnerability has no public exploits, we can develop our own. 2.3 Web, cloud, and mobile exploitation . We perform traditional web application pentesting for the web applications related to our selected IoT device. The main objective is to exploit a webpage to execute commands on the device (remote code execution). Then, if possible, we also want to bypass the authentication. When web application scanners find vulnerabilities they usually provide primitive payloads for proof of concept. These can assist us in designing the real working exploit codes. Once again, some vulnerabilities could be exploited with semi-automated tools (such as Metasploit), we may want to use brute force attacks against some authentications and if no publicly available exploit exists for a vulnerability, we can develop our own. OWASP’s Web Security Testing Guide is a good source of information on how to conduct a web based penetration test from scratch. When performing cloud exploits, we are often interested in obtaining sensitive and unauthorized data. For mobile devices relating our IoT device, we can apply traditional mobile pentesting schemes, such as reverse engineering of the Android and iOS code. The device may be set up with default credentials such as admin/admin or similar which we can also test for. The credentials may otherwise be derived from a pattern that can be cracked or understood, such as the AutoPi vulnerability where the device’s password could be derived from the ID, which in turn could be reduced to a 8 digit hexadecimal number. The mobile app may be ignoring certificate issues, (i.e. the application communicates over an insecure channel with non-trusted CA for the SSL certificate). For more information, the Owasp Mobile Security Testing Guide is useful. 2.5 Radio communication . BLE (Bluetooth Low Energy), Software Defined Radio (SDR), and ZigBee are common in many IoT devices. Depending on the communication protocol, specialized equipment may be required to perform specific radio pentesting. Please refer to the lab equipments section to see which tools are available. If you need to purchase additional equipment, contact your supervisor. If possible, we want to extract sensitive information in clear text from the radio packets. The TLS connections can be inspected to find whether they are vulnerable to MitM attacks. If certificate validation is missing, we can usually conduct further attacks depending on the context. If there is no message verification we can retransmit captured data for a reply attack. If there is a message verification, it may still be possible to jam the signal to capture unused radio packets for re-transmission. It can also be relevant to perform reverse engineering and fuzzing of unknown or custom protocols and decode data packets. More information can be found in our wireless hacking guides . ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html#2-exploitation",
    "relUrl": "/pages/guides/pentest-process-exploit.html#2-exploitation"
  },"172": {
    "doc": "Exploitation",
    "title": "Exploitation",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-exploit.html",
    "relUrl": "/pages/guides/pentest-process-exploit.html"
  },"173": {
    "doc": "Planning",
    "title": "IoT pentest process - Planning",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html#iot-pentest-process---planning",
    "relUrl": "/pages/guides/pentest-process-planning.html#iot-pentest-process---planning"
  },"174": {
    "doc": "Planning",
    "title": "1. Planning",
    "content": "Depending on the goal of the penetration test, the aim may be to assess the security of a segment of IoT products (such as smart home products), assess the security of an individual IoT product, such as a JISIWEI I3 Robotic Vacuum Cleaner or a number of other variations. When we have selected a device, or a segment of devices to test, we usually start with gathering as much information as we can about this specific area. Remember to document all your findings. Even if no vulnerability is found in the device, it is possible to write a valuable thesis report as long as the process taken to identify vulnerabilities is systematically documented. 1.2 Information gathering . In the reconnaissance phase we aim to gather as much relevant information as possible about our device. If a larger segment of products is chosen, every device belonging to the segment is examined. We may start with a comprehensive documentation review of the device, as well as physically examining it. Finally, certain active and passive scanning and enumeration techniques can be applied for hardware, firmware, radio protocols, network services, web applications, cloud APIs and mobile applications. We want to find all potential attack vectors that can be tested and potentially exploited in the next phase of the penetration test. In the light of these inquiries, all hardware, communication protocols, and software components are identified and their functionality are categorized. Hardware and firmware . A smart device is an embedded system that can be a Hub (a smart IoT gateway), a smart sensor that collects data from the environment, or a controller (actuator) that performs an action upon user request, or analyzes and displays the data. Visual observation and physical examination of the device involves identification of available ports, slots, buttons, etc. and may include physical disassembly of the device. IoT devices typically have some modules on PCBs (Printed Circuit Boards), a processor, RAM, ROM, peripherals, connectors, antennas, screens, and ribbon cables etc. The board also exposes debugging ports (JTAG, SWD, etc.) and communication interfaces (UART, SPI, I2C, etc.) and particular pins (Tx, Rx, TDO, etc.) that can be interesting. The modules on the PCB vary in size, shape, and other aspects depending on the functionality of the device, this is known as packaging (DIL, SMD). The packaging type of a module is important, since associated hardware adapters and other utilities are required to interact with them when pentesting. Particularly, for hardware testing it is important to take photos of the components inside the PCB. The official technical specifications are carefully interpreted including user and developer manuals. The processor’s datasheet usually contains information about interfaces, I/O ports, interrupts, and more. Also, available public documentation (i.e. fccid.io) is explored to reveal incomplete information (i.e. chip pinouts). An additional search can be executed on repositories of known data-sheets for still missing specifications on the manufacturer’s website. Moreover, we can search online for modules that do not contain a model number. Finally, to be able to derive use case diagrams later on, relevant information is summarized, including what each device does and how they work, how devices communicate among themselves and between each other, how the input and output of the device works, and the functionality of the buttons and external interfaces. Radio communication . IoT devices often communicate and exchange data via radio protocols such as Bluetooth Low Energy (BLE), Software-defined radio (SDR), and ZigBee. The radio chipsets on the PCB provide information about the radio protocols supported by a device. Manufacturer documentation and public resources can reveal useful information such as the operation frequency of the device. It is also valuable to investigate whether there are similar devices operating in the same frequency range as these devices. Additionally, radio traffic is captured for preliminary analysis. It is vital to capture radio traffic while devices have just started sending and receiving their first bits, otherwise the collected data may not be accurate, since some types of data may only be exchanged when the device is first introduced to the network. We can find useful information such as the component that initiates the authentication and pairing mechanism, the internals of the pairing operation, how many devices each component can handle simultaneously, the nature of the data transmitted through protocols, transmission commands, operating frequencies, and default encryption keys among other things. Network services . Modern firmware has evolved into an operating system (i.e. Linux) that provides some network services such as SNMP, FTP, and HTTP, especially for remote access. Traditional port scanning techniques (nmap) are performed to identify open ports along with the running applications and their versions. In addition, services which require authentication are identified and network traffic is captured. Web applications . Firmware may also have an HTTP service hosting a website designed for management, configuration, and status information. Traditional webpage crawling and enumeration techniques are performed (i.e. dirb, dirbuseter, wfuzz, gobuster, nikto) to discover all web pages and the development technologies with their versions. Cloud APIs . IoT devices usually send the collected data to a cloud service, accessed via an APIs. It allows the user to monitor the device, view data analytics and usage information, control permissions of who can control the devices, etc. Mobile application . IoT devices are usually controlled through mobile applications. The application exposes the functionality of the IoT device and can show how the device works, as well as revealing sensitive data. Information gathering of mobile applications can utilize the following questions: . | Which devices are controlled by the mobile app? | Which control commands are sent to the device over which protocols (BLE, WiFi)? | What are the main functionalities of the mobile app (add/remove device/user, switch on/off)? | What are the other useful features of the mobile app (activity log, update firmware)? | How does certain actions work (action X works with a one-time key/PIN code)? | Summarize what functionality provides what? | What other actions are triggered automatically right after an action is started (log generated after switch on/off)? | What are the types of users and what access rights do they have? | . Reverse engineering can be performed to learn more. Automated toolkits such as Apktool and jadx help us decompile the source code and perform static analysis of the mobile app. If performed successfully the compiled application code, dependent native libraries, resource files, and requested mobile device permissions can be revealed. The source code of modern applications is often obfuscated to prevent unauthorized knowledge of the operation logic, this may make reverse engineering harder and more time consuming. Therefore, an analysis can start with quickly inspecting files that seem promising. In addition, applications may store some data locally on the devices, these files are also valuable. 1.2 Threat and vulnerability analysis . Several threat scoring systems exist for classifying the vulnerabilities, such as STRIDE, DREAD, and CVSS. We can utilize a combination of these to create a comprehensive analysis of the threats and vulnerabilities. When collecting information about the vulnerabilities, we must remember to examine previously known and publicly found vulnerabilities for the components, or similar components. For assistance, we have composed a spreadsheet of common vulnerabilities and a list of some common vulnerabilities for different parts as listed below. The vulnerabilities in the spreadsheet and the segments found below are derived from Mitre’s list, OWASP’s section of IoT vulnerabilities, and various more specialized sources as listed below. However, it is always important you make your own research to find the most relevant and up to date vulnerabilities for the given product segment you are testing. Hardware vulnerabilities . We can connect to the Hub or device via its Ethernet port if one is available, the SD card slot can be used for firmware upgrades, and the processor’s Wi-Fi stack may contain known vulnerabilities. Below are 20 potential hardware vulnerabilities. | Senstive data exposure - Device ID/serial no | Insecure external media interfaces | Insecure 3rd party hardware components | Resettable to insecure state | Firmware/storage extraction - Download from the Web | Firmware/storage extraction - Insecure SPI interface | Firmware/storage extraction - Insecure I2C interface | Firmware/storage extraction - Insecure UART interface | Firmware/storage extraction - Insecure JTAG interface | Firmware/storage extraction - Insecure SWD interface | Firmware/storage extraction - Insecure SoC | Firmware/storage extraction - Tapping eMMC chip | Firmware/storage extraction - Unsoldering eMMC chip | Backdoor firmware - Insecure UART interface | Backdoor firmware - Insecure JTAG interface | Backdoor firmware - Insecure SWD interface | Grant shell access - Insecure UART interface | Grant shell access - Insecure SPI interface | Change code execution flow - Insecure JTAG/SWD interface | Lack of tamper resistance | . Firmware vulnerabilities . The firmware can be a proprietary software where binary reverse engineering is relevant, especially for ARM and MIPS architectures. The reverse engineering can reveal sensitive information such as credentials, secret encryption/encoding keys. Below we define 26 potential firmware vulnerabilities. In addition to the vulnerability links listed above, OWASP has a specific section for firmware vulnerabilities. | Sensitive data exposure - Backdoor accounts | Sensitive data exposure - Hardcoded credentials | Sensitive data exposure - Encryption keys and algorithms | Sensitive data exposure - URL disclosure | Sensitive data exposure - Other sensitive information | Update mechanism - Missing update mechanism | Update mechanism - Lack of manual update | Update mechanism - Lack of transport encryption | Update mechanism - Lack of signature on update file | Update mechanism - Lack of update verification | Update mechanism - Lack of update authentication | Update mechanism - Intercepting OTA update | Update mechanism - Backdoor firmware | Update mechanism - World writable update location | Update mechanism - Lack of anti-rollback mechanism | Local data storage - Unencrypted data | Local data storage - Static and same encryption keys | Local data storage - Data encrypted with discovered keys | Local data storage - Lack of data integrity checks | Local data storage - Lack of wiping device | Authentication bypass - Device to device | Authentication bypass - Device to mobile application | Authentication bypass - Device to cloud | Configuration - Insecure customization of OS platforms | Configuration - Insecure filesystem permissions | Configuration - Lack of security configurability | . Network service vulnerabilities . In the reconnaissance activity we may have found network services and their respective versions. We can search for the known vulnerabilities on these versions in a number of databases. Network vulnerability scanners can also provide matching vulnerabilities from their built-in databases automatically. It is not uncommon for IoT network services to run older versions that may have common vulnerabilities. Below we define 18 potential vulnerabilities for network services. | Sensitive data exposure | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery | Test or development services | Known vulnerable services | Exposed services running as root | Privilege escalation | Authentication bypass | Denial of Service (DoS) | Buffer overflow | Accepting connections without authentication | Insecure transport encryption | Sensitive data exposure | . Web application vulnerabilities . We may have found interesting frameworks and their versions used by the web application of our IoT devices. These can be searched for known vulnerabilities. For a web application with a limited number of web pages, personal proxy toolkits can be utilized to examine the target and repeat modified web requests, in addition, various web vulnerability scanners can be used to search for vulnerabilities. Web applications served on IoT devices are usually a wrapper for internal operating system utilities. User inputs are passed to these utilities to execute shell commands. Common injections are important vulnerabilities where unsanitized input can lead to remote code execution. Weak authentication mechanisms are also common. Below are 15 potential vulnerabilities for web application. In addition to the vulnerability links listed above, OWASP’s Web Security Testing Guide is a good source of vulnerabilities. | Sensitive data exposure | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery | Authentication - Lack of two-factor authentication | Authentication bypass - Web application to cloud | Lack of logging options | Command injection | Direct object references | Business and logic flaws | . Mobile and cloud application vulnerabilities . Further reverse engineering and source code analysis may be required for vulnerability assessment of mobile applications. We may be able to find undocumented features or other loopholes that can generate attack vectors. Reverse engineering of communication APIs such as REST and SOAP may also be useful and reveal undocumented features that present attack vectors. Common hardcoded sensitive data includes firmware update URL, APK update URL, and cloud API authentication keys. In addition, the native components of mobile apps can help us understand various critical functions such as encryption. We also want to intercept the network traffic, we can do this by bypassing the SSL pinning and then perform a live analysis of the network traffic with a personal proxy. Finally, we can perform a dynamic analysis with a number of automated toolkits. Common IoT specific security threats towards mobile and cloud application include insecure authentication and authorization mechanisms, business and logic flaws, insecure network communication, and outdated 3rd party libraries and SDKs. Below are 14 potential vulnerabilities for cloud apps and 26 potential vulnerabilities for mobile apps, partially derived from OWASP’s Mobile Security Testing Guide. Cloud vulnerabilities: . | Lack of transport encryption | Insecure SSL/TLS issues | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery mechanism | Authentication - Two-factor authentication | Vendor APIs - Inherent trust of cloud or mobile application | Vendor APIs - Insecure authentication | Vendor APIs - Insecure access controls | Vendor APIs - Undocumented backdoor API calls | Vendor APIs - User data disclosure | Vendor APIs - Device information leakage | . Mobile vulnerabilities: . | Sensitive data exposure - Hardcoded credentials | Sensitive data exposure - Encryption keys and algorithms | Sensitive data exposure - URL disclosure | Sensitive data exposure - Other sensitive information | Authentication - Username enumeration | Authentication - Weak credentials | Authentication - Account lockout | Authentication - Known default credentials | Authentication - Insecure password recovery mechanism | Authentication - Two-factor authentication | Authentication - Mobile application to cloud system | Insecure authorization | Implicitly trusted by device or cloud | Lack of transport encryption | Insecure SSL/TLS issues | Insecure data storage | Outdated 3rd party libraries and SDKs | Business and logic flaws | Lack of health checks | Insecure heartbeats | Device controlling commands | Lack of deprovisioning | Insecure pushing firmware updates | . Radio communication vulnerabilities . A number of vulnerabilities may exist, ZigBee traffic can be sniffed and decrypted or we may be able to intercept the BLE traffic and session hijack. Different radio protocols have different vulnerabilities but several types are common among them, below are 11 vulnerabilities for radio protocols. | Sensitive data exposure | Lack of transport encryption | Interception and modification | Man in the middle attack | Replay attack | Jamming attack | Spoofing attack | Denial of service (DoS) | Lack of payload verification | Lack of message integrity check | Fuzzing custom protocols | . ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html#1-planning",
    "relUrl": "/pages/guides/pentest-process-planning.html#1-planning"
  },"175": {
    "doc": "Planning",
    "title": "Planning",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-planning.html",
    "relUrl": "/pages/guides/pentest-process-planning.html"
  },"176": {
    "doc": "Reporting",
    "title": "IoT pentest process - Reporting",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html#iot-pentest-process---reporting",
    "relUrl": "/pages/guides/pentest-process-report.html#iot-pentest-process---reporting"
  },"177": {
    "doc": "Reporting",
    "title": "3. Reporting",
    "content": "When the penetration testing is completed, the results are gathered in a report. The report should use a standardized structure in order to facilitate comprehension, analysis and comparison with other pentest projects. The hacking thesis guidelines describes how the thesis report should be structured. Please remember to document all tests, not just the successful ones. If no test is successful, it is still possible to write a valuable report (stating we could not find a weakness in the product). The ideal outcome is that each test (successful and unsuccessful) can be expressed as an attack graph with explanatory metrics such as TTC (Time To Compromise). In addition to this, if a previously unknown vulnerability is identified and exploited additional steps should be taken for responsible disclosure. ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html#3-reporting",
    "relUrl": "/pages/guides/pentest-process-report.html#3-reporting"
  },"178": {
    "doc": "Reporting",
    "title": "Reporting",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/pentest-process-report.html",
    "relUrl": "/pages/guides/pentest-process-report.html"
  },"179": {
    "doc": "Previous Work",
    "title": "Previous Work",
    "content": "See previous projects, published theses and discovered vulnerabilties here. ",
    "url": "http://localhost:4000/pages/previous-work.html",
    "relUrl": "/pages/previous-work.html"
  },"180": {
    "doc": "Purchase Form",
    "title": "Purchase Form",
    "content": "If you need any special equipment for your thesis, you can request that the lab purchases it here. Name: Email: Expected start date of thesis: Degree of thesis: Bachelor's Master's URL to the product, preferably via prisjakt or pricerunner Who is the supervisor of the project? What is the expected cost of the device? Has your supervisor approved of the purchase? Yes No ",
    "url": "http://localhost:4000/pages/thesis_guidelines/purchase_form.html#purchase-form",
    "relUrl": "/pages/thesis_guidelines/purchase_form.html#purchase-form"
  },"181": {
    "doc": "Purchase Form",
    "title": "Purchase Form",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/purchase_form.html",
    "relUrl": "/pages/thesis_guidelines/purchase_form.html"
  },"182": {
    "doc": "Radio Hacking",
    "title": "Radio Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/radio.html",
    "relUrl": "/pages/guides/radio/radio.html"
  },"183": {
    "doc": "Registration",
    "title": "Registration and formalities",
    "content": "Registration and other formalities differ between programs. Therefore, you will typically need to consult your bachelor or master coordinator to bring about the registration. You will normally also need to find a supervisor and and an examiner. For hacking projects at the NSE department, you can talk to Prof. Pontus Johnson about supervision, and Mathias Ekstedt or Robert Lagerström about examiners (for some programs, examiners may be appointed without your involvement). Different programs will demand different information, specifications or project plans as a basis for approval of the thesis project. There is ongoing work at the EECS school to harmonize the formal process regarding master thesis projects. More information is available here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/registration.html#registration-and-formalities",
    "relUrl": "/pages/thesis_guidelines/registration.html#registration-and-formalities"
  },"184": {
    "doc": "Registration",
    "title": "Registration",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/registration.html",
    "relUrl": "/pages/thesis_guidelines/registration.html"
  },"185": {
    "doc": "Related work",
    "title": "Related work",
    "content": "You need to demonstrate to the reader that you have a good understanding of the previous work in the domain. You can do that in the threat modeling section of your report. Describe each relevant attack vector in the general case (not specifically related to the product that you are investigating, but rather the class of such products). Refer to sources (e.g. papers or presentations at security conferences, blogs etc.). Note that since a thesis is an academic report you need to have a fair amount of academic references. To convince the reader that you have considered all relevant attacks, make sure to present a significant number of references to previous attacks (presentations on hacker conferences such as DefCon and BlackHat, CVEs, blog posts, etc). Another good idea is to refer to a more or less comprehensive taxonomy or list of attacks. You should at least consider the most important attacks such as OWASP’s IoT Top 10, OWASP’s Top 10, and OWASP’s Top 10 Mobile. Depending on the unit you are testing, other taxonomies might become relevant, including the hacking guides here on nse.digital, ETSI EN 303 645 Cyber Security for Consumer Internet of Things: Baseline Requirements, the OWASP Web Security Testing Guide, the Cyber Security Body Of Knowledge (CyBOK), Mitre’s Common Weakness Enumeration (CWE), Mitre’s CAPEC, Hezam et al., HackerOne’s taxonomy, BugCrowd’s Common Android App Vulnerabilities, OWASP’s Testing Guide, Mitre’s ATT&amp;CK, and of course the STRIDE threat model. Another, increasingly useful, source of related work is the set of previous hacking thesis projects. In particular, you may find interesting related work in the references to thesis reports targeting devices similar to the ones you are considering. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/related_work.html",
    "relUrl": "/pages/thesis_guidelines/related_work.html"
  },"186": {
    "doc": "Responsible disclosure",
    "title": "Responsible disclosure",
    "content": "A discovered vulnerability should first be reported to the vendor. The vendor should then be given the opportunity to develop a patch. After the patch has been published, or in the case of an unresponsive vendor, after a certain timeframe passes, the finding should be reported to the National Vulnerability Database and made public. The Dutch National Cybersecurity Center US CERT offers a good Guide to Coordinated Vulnerability Disclosure which we recommend that you follow, setting the default disclosure timeframe to 90 days. The biggest failure that can happen in the disclosure process is if sensitive vulnerability information becomes available to the wrong people. In order to avoid mistakes, be sure to keep your supervisor informed about the disclosure process, e.g. by carbon copying your supervisor in the correspondence with the vendor. Typically, the first disclosure step is to identify which person or function in the company to whom the vulnerability should be reported. The second step is agreeing on the communication means – some vendors prefer encrypted channels for sensitive information such as vulnerabilities. Only after these formalities regarding the communication are settled should the vulnerability be disclosed. When reporting a vulnerability, you need to be pedagogical. Check out the writing style of the vulnerability reports at the bug bounty platforms, for instance. If you have discovered a vulnerability which qualifies to be published, you should request a CVE. A CVE in your name can be valuable when applying for jobs in the cybersecurity sector. Best practices for public disclosure can be somewhat conflicting with the Swedish law, which requires us to make examined theses available to the public. If you have discovered a vulnerability that can harm an organization, you must therefore think carefully about how to proceed. There are generally three paths available, please discuss them carefully with your supervisor. | Proceed with the presentation/examination as usual, but the examiner does not report the grades until the responsible disclosure time has passed. This can conflict with an application to a master’s program as the student may receive the credits for the thesis course after the master program has started. If you plan to continue with a master program in the following semester, please discuss the situation with your supervisor, and possibly with a program coordinator for the master program as well. This path could also affect the student’s CSN grants and student housing, as the academic credits will be delayed until the theses is reported (after the public disclosure time). This is a somewhat messy alternative for the student, but usually the safest for the organization. | Write two versions of the report, one that contains the full text and one that is reduced to only include data that can be made public (no sensitive data). The full text article will be used when examining and grading the student, while the second will be published in DIVA. The disadvantage of this is that the reduced report will be the one made public in DiVA, and we can not replace it with the full text report at a later time. If for example a future employer looks through the report, it will not be clear that the work was originally of a larger scale. However, the student can of course explain the situation to the exployer or interested party, and send them the full text version (given the disclosure time is over). The examiner can also assist by writing a certificate to the student confirming the reason why a smaller-scale report has been published in DiVA. | Report the grade of the student and only publish the metadata (title, keywords, and abstract) in DiVA. This is generally the easiest option for the student, but entails a risk as the full text work could be requested by external actors with malicious intentions. However, it may be possible to formulate the title, abstract and keywords in such a way so that it does not attract immediate attention. When the disclosure time (usually 90 days) is over the full text article can be uploaded to DiVA as well. | . Unfortunately, there are no other options available at this time. The best solution will vary for each case, so please think through the matter carefully and discuss the best action with your supervisor. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/responsible_disclosure.html",
    "relUrl": "/pages/thesis_guidelines/responsible_disclosure.html"
  },"187": {
    "doc": "0x01 - Analyzing SDR",
    "title": "Analyzing SDR",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#analyzing-sdr",
    "relUrl": "/pages/guides/radio/sdr.html#analyzing-sdr"
  },"188": {
    "doc": "0x01 - Analyzing SDR",
    "title": "1. Software Defined Radio (SDR) internals",
    "content": "Many devices such as car keys and garage door openers communicate with each other via radio signals. Software Defined Radio, or SDR, is “the use of digital signal processing to implement radio functions”[1]. Without SDR, different radio signal processing hardware is required for the devices that communicate with different frequencies. SDR allows for the changing of functionality without touching the SDR hardware (receiver/transmitter). There is no longer the need for different SDR hardware for different devices. It also allows for the implementation of radio processing functionalities, and allows us to work with an extremely large frequency range. Logic . | Transmitter | Wi-Fi router | . | Modulate | Data is modulated by the router with a carrier signal (of 2.4 GHz) | . | Transmit | Wi-Fi router passes the final signal to air via antenna | . | Receiver | Wireless chip inside the laptop | . | Receive | Wireless chip receives signal | . | Demodulate | Signal is demodulated by the wireless chip to decode data to understandable format | . The baseband signal is carried by a higher frequency wave called the carrier signal. Properties of the final signal changes based on the properties of the carrier signal and the type of modulation. Transmitter . | Generates an electric current which is to be transmitted | Electric current emits the data which requires to be modulated | . Modulation . | Noise reduction | Multiplexing | Working with various bandwidth and frequencies | Cable properties | Etc. | . Modulation types . | Analog Modulation | Amplitude, Frequency, SSB, and DSB modulation | . | Digital Modulation | ASK, FSK, PSK ,and QAM | . Analog to Digital Converter (ADC) . | Most of the real-world data collected is analog data | Computers can understand digital data | SDR hardware tools contain ADC | . Other Terminology . | Sample rate | Fast Fourier Transform (FFT) | Bandwidth | Wavelength | Frequency | Antenna | Gain | Filters | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#1-software-defined-radio-sdr-internals",
    "relUrl": "/pages/guides/radio/sdr.html#1-software-defined-radio-sdr-internals"
  },"189": {
    "doc": "0x01 - Analyzing SDR",
    "title": "2. Pentest Objectives",
    "content": ". | Decode radio protocols | Replay attack . | If there is no verification, captured data can be replied without problem | Otherwise jamming the signal is required, and capturing an unused radio packet | . | Reverse engineer unknown protocol | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#2-pentest-objectives",
    "relUrl": "/pages/guides/radio/sdr.html#2-pentest-objectives"
  },"190": {
    "doc": "0x01 - Analyzing SDR",
    "title": "3. Tools",
    "content": "| OS | Ubuntu as primary OS (not VM) recommended | . | GNURadio | Digital and analog signal processing C++ library | . | GQRX | Based on GNURadio library provides analysis of frequency spectrums in a GUI | . | RTL-SDR | Only sniff (monitor) a wide range of frequency (not capable of transmitting data) | . | HackRF | Open-source hardware allows to analyze radio and to transmit data | . | Installation | apt install gqrx gnuradio rtl-sdr hackrf | . | Alternative installation | gqrx GithubGNURadioRTL-SDROS Tips for HackRF One | . Frequency Guide . | RTL-SDR | 500kHz - 1766 MHz | . | HackRF | 1 MHz - 6 GHz | . | LimeSDR | 100 kHz to 3.8 GHz | . | Human ear | 20 Hz - 20kHz | . | Wi-Fi &amp; BLE | 2.4 GHz | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#3-tools",
    "relUrl": "/pages/guides/radio/sdr.html#3-tools"
  },"191": {
    "doc": "0x01 - Analyzing SDR",
    "title": "4. GNURadio",
    "content": ". | Digital and analog signal processing C++ library . | Supports development in python | Supports RTL-SDR, HackRF, USRP, and more hardware | GNURadio Companion is the GUI version . | Save workspace as a .grc file | . | GQRX is a GUI, based on GNURadio for frequency analysis | . | Allows for: . | Analyzing a captured signal | Performing demodulation | Extracting data from signals | Reversing unknown protocols, and more | . | Advanced usage . | Audio processing | Mobile communication analysis | Flight and satellite tracking | RADAR systems | . | Homework: Create a transmitter (TCP Sink) and receiver (Scope Sink) via GNURadio Companion | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#4-gnuradio",
    "relUrl": "/pages/guides/radio/sdr.html#4-gnuradio"
  },"192": {
    "doc": "0x01 - Analyzing SDR",
    "title": "5. Identify frequency (or frequency range) of the device",
    "content": ". | Online search . | Look up the FCC ID of the device | Manufacturer website | Community forums | . | Visual inspection . | External inspection . | FCC ID might be found on the device | . | Internal inspection . | Operating frequency of the oscillator might be found (433 MHZ) | . | . | Active scan . | Connect hardware (i.e. RTL-SDR) to analysis computer . lsusb . | Run gqrx . | Select device (i.e. RTL-SDR or any hardware under test) | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#5-identify-frequency-or-frequency-range-of-the-device",
    "relUrl": "/pages/guides/radio/sdr.html#5-identify-frequency-or-frequency-range-of-the-device"
  },"193": {
    "doc": "0x01 - Analyzing SDR",
    "title": "6. Capture the transmitted data",
    "content": ". | Connect hardware (i.e. RTL-SDR) to analysis computer | Start related utility (i.e. rtl_433 utility in RTL-SDR) | Usage: rtl_433 -f &lt;exact frequency&gt; rtl_433 -f 433920000 | Press any buttons on the device to change transmitted data | Observe utility (i.e. rtl_433) output | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#6-capture-the-transmitted-data",
    "relUrl": "/pages/guides/radio/sdr.html#6-capture-the-transmitted-data"
  },"194": {
    "doc": "0x01 - Analyzing SDR",
    "title": "7. Replay captured radio (known as Replay attack)",
    "content": "If the frequency is commonly known, transmitting module can be found easily. Otherwise a HackRF is required. Method 1: 433 MHz transmitter + Arduino Nano . | 433MHZ receiver is connected to the Arduino board * Arduino 5V –&gt; VCC of both transmitter and receiver * Arduino GND –&gt; GND of both transmitter and receiver * Arduino D10 –&gt; Data of transmitter * Arduino D2 –&gt; Data of receiver . | Import Arduino library RC_Switch to Arduino IDE * Github Repo * It transmits data on 433 MHz . | Start receiver * Execute ReceiveAdvanced implementation * Github Repo * It starts serial monitor at 9600 baud rate . | Transmit data * Press any buttons of the device . | Capture data * Serial terminal will show the captured data * Save the captured data . | Replay data * Execute SendDemo implementation * Github Repo * Paste the captured data as parameter to the sendTriState() method . | . Method 2: HackRF . | Connect the HackRF to the analysis computer . hackrf_info . | Store packet captures (sample rate, frequency, capture file) . hackrf_transfer –s 5 –f 433920000 –r radio.dump . | Replay (sample rate, frequency, capture file) . hackrf_transfer –s 5 –f 433920000 –t radio.dump . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#7-replay-captured-radio-known-as-replay-attack",
    "relUrl": "/pages/guides/radio/sdr.html#7-replay-captured-radio-known-as-replay-attack"
  },"195": {
    "doc": "0x01 - Analyzing SDR",
    "title": "8. Decode data",
    "content": ". | When the captured data is not understandable, it is most likely encoded (modulated) | GNURadio companion 1. | Set the ‘Generate Options’ to WX | Change the ‘sample rate’ to 1M 2. | Move ‘RTL-SDR’ block and set frequency to 433.92 MHz | Output type is ‘Complex float32’, we need to convert it to make data understandable 3. | Move ‘Complex to Mag^2’ | Connect ‘RTL-SDR’ to ‘Complex to Mag^2’ 4. | Amplify the signal via ‘Multiply Const’ and set constant value to 20 | Connect ‘Complex to Mag^2’ to ‘Multiply Const’ 5. | Move ‘Wav File Sink’ and set output location | To save the output result to a wav file | Connect ‘Multiply Const’ to ‘Wav File Sink’ 6. | Move ‘WX GUI FFT Sink’ | Connect ‘RTL-SDR’ to ‘WX GUI FFT Sink’ 7. | Run | Take the saved output wav file for decoding | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#8-decode-data",
    "relUrl": "/pages/guides/radio/sdr.html#8-decode-data"
  },"196": {
    "doc": "0x01 - Analyzing SDR",
    "title": "Audacity",
    "content": ". | A tool for audio analysis | Without the Multiply Const the signal is weak, so the wav file resulted in meaningless data | Identify modulation type . | On-Off Keying (OOK) . | A form of Amplitude-Shift Keying (ASK) modulation | Shorter pulse is 0 and longer pulse is 1 | . | . | Convert all pulses to corresponding 0 or 1 | Decode binary to decimal | Done | . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#audacity",
    "relUrl": "/pages/guides/radio/sdr.html#audacity"
  },"197": {
    "doc": "0x01 - Analyzing SDR",
    "title": "References",
    "content": "[1] Software Defined Radio with HackRF - Lesson 1: Welcome. Michael Ossman. Great Scott Gadgets. 2014. https://greatscottgadgets.com/sdr/1/. (Fetched 2021-06-05) [2] HackRF One. Great Scott Gadgets. https://greatscottgadgets.com/hackrf/one/. (Fetched 2021-06-06) . ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html#references",
    "relUrl": "/pages/guides/radio/sdr.html#references"
  },"198": {
    "doc": "0x01 - Analyzing SDR",
    "title": "0x01 - Analyzing SDR",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/sdr.html",
    "relUrl": "/pages/guides/radio/sdr.html"
  },"199": {
    "doc": "securiCAD",
    "title": "securiCAD",
    "content": "securiCAD is a quantitative threat modelling tool by foreseeti. It uses domain-specific languages created with MAL such ass coreLang to modell IT-infrastructure, so that the user can get an overview of what systems are at risk and what is the likelihood of these systems becoming compromised. The strength of securiCAD is that the user do not need much or any cyber security knowledge. The user only needs knowledge about the IT infrastructure in order to generate insight about possible attack paths. The basic functionality of the program can be found here. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/securiCAD.html",
    "relUrl": "/pages/guides/Creating%20threat%20models/securiCAD.html"
  },"200": {
    "doc": "securiCAD",
    "title": "Installation",
    "content": ". | Start with register an account at foreseeti | Download securiCAD Professional | Add the product key from the registration e-mail when starting securiCAD | Generate a token-file in securiCAD under “File” - “Licensing” - “Generate Token” | Send the token file to support@foreseeti.se for credential file | Add new license under “File” - “Licensing” - “Replace license” | . securiCAD uses .jar-files. Access to foreseeti maven repository is required to build .jar-files that are compatible with securiCAD. Contact support@foreseeti.se for credential file. Store the file in ~/.aws/credentials for Linux and macOS and %UserProfile%.aws\\credentials for Windows. To build a file use the command . mvn package -PsecuriCAD . ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/securiCAD.html#installation",
    "relUrl": "/pages/guides/Creating%20threat%20models/securiCAD.html#installation"
  },"201": {
    "doc": "securiCAD",
    "title": "Overview",
    "content": "The program is divided into three parts. To the left are all objects and tools located. The middle part is the canvas where you can create your model by clicking and dragging the objects and connect them to eachother. The right section is where you can define the consequences for each component to be breach, set adjust defenses and analyze the time to compromise. ",
    "url": "http://localhost:4000/pages/guides/Creating%20threat%20models/securiCAD.html#overview",
    "relUrl": "/pages/guides/Creating%20threat%20models/securiCAD.html#overview"
  },"202": {
    "doc": "0x06 - Security Misconfiguration",
    "title": "Security Misconfiguration",
    "content": "There are multiple technologies that leave security configuration to the developer, who implements these technologies into their own systems. If left misconfigured or with default values, the developer could inadvertedly leave backdoors that hackers then could use to attack the system.[1] . Common Security Misconfiguration vulnerabilites include the following: . | Unnecessary features are enabled (such as unnecessary ports, services, or users) . | Examples: HTTP PUT header is enabled, ASP.NET tracing is enabled | . | The system is outdated and has unpatched vulnerabilities | Default usernames and passwords are left unchanged . | “admin/admin” “(none)/(none)”, etc. | . | Security settings in application frameworks or servers are set to insecure values[2] | . For more information, see Chapter 7: Leveraging Platform Weaknesses in Hacking Web Apps (2012) by Mike Shema. You can access this book online if you have a KTH account. ",
    "url": "http://localhost:4000/pages/guides/web/security-misconfiguration.html#security-misconfiguration",
    "relUrl": "/pages/guides/web/security-misconfiguration.html#security-misconfiguration"
  },"203": {
    "doc": "0x06 - Security Misconfiguration",
    "title": "References",
    "content": "[1] B. Eshete, A. Villafiorita and K. Weldemariam, “Early Detection of Security Misconfiguration Vulnerabilities in Web Applications,” 2011 Sixth International Conference on Availability, Reliability and Security, Vienna, Austria, 2011, pp. 169-174, doi: 10.1109/ARES.2011.31. [2] A6:2017-Security Misconfiguration. OWASP. https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration. (Fetched 2021-03-29) . ",
    "url": "http://localhost:4000/pages/guides/web/security-misconfiguration.html#references",
    "relUrl": "/pages/guides/web/security-misconfiguration.html#references"
  },"204": {
    "doc": "0x06 - Security Misconfiguration",
    "title": "0x06 - Security Misconfiguration",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/security-misconfiguration.html",
    "relUrl": "/pages/guides/web/security-misconfiguration.html"
  },"205": {
    "doc": "0x03 - Sensitive Data Exposure",
    "title": "Sensitive Data Exposure",
    "content": "If a service or application stores sensitive data, it should always do so using modern encryption methods as one of its defences. Whenever they transmit data it should also be encrypted. Sadly, this is in many cases forgotten or ignored. The result is that attackers, should they gain access to this data, can exploit it without much effort.[1] . The attacker could get access to plain text data (or data with weak encryption) when the data is in transit, when it is stored in the user’s browser, or when the data is stored on the server given that the attacker has gotten access to it in another attack (like Session Hijacking, SQL Injection, etc). You can read more here. ",
    "url": "http://localhost:4000/pages/guides/web/sensitive-exposure.html#sensitive-data-exposure",
    "relUrl": "/pages/guides/web/sensitive-exposure.html#sensitive-data-exposure"
  },"206": {
    "doc": "0x03 - Sensitive Data Exposure",
    "title": "References",
    "content": "[1] A3:2017-Sensitive Data Exposure. OWASP. https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure. (Fetched 2021-03-28) . ",
    "url": "http://localhost:4000/pages/guides/web/sensitive-exposure.html#references",
    "relUrl": "/pages/guides/web/sensitive-exposure.html#references"
  },"207": {
    "doc": "0x03 - Sensitive Data Exposure",
    "title": "0x03 - Sensitive Data Exposure",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/sensitive-exposure.html",
    "relUrl": "/pages/guides/web/sensitive-exposure.html"
  },"208": {
    "doc": "SOHO Device Exploitation",
    "title": "SOHO Device Exploitation",
    "content": "Among the very many to be found on the Internet, here is one interesting write-up of the discovery and exploitation process of a SOHO device (a Netgear router). Another interesting study on router security was performed by the Fraunhofer Institute in 2020, finding a surprising number of vulnerabilities. Here is yet another mass router study, by The American Consumer Institute in 2018, which also discovered a remarkably large set of vulnerabilities. ",
    "url": "http://localhost:4000/pages/guides/Wireless/soho-device_exploitation.html",
    "relUrl": "/pages/guides/Wireless/soho-device_exploitation.html"
  },"209": {
    "doc": "0x03 - Analyzing SPI",
    "title": "Analyzing SPI (Serial Peripheral Interface)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#analyzing-spi-serial-peripheral-interface",
    "relUrl": "/pages/guides/hardware/spi.html#analyzing-spi-serial-peripheral-interface"
  },"210": {
    "doc": "0x03 - Analyzing SPI",
    "title": "1. SPI protocol internals",
    "content": ". | Designed for synchronous serial communication between the master and slave devices | Master controls the clock for all the slaves . | fastest serial clock speed in SPI is half the speed of the master clock | . | SPI (Serial Peripheral Interface) implementation standard is not strict . | manufacturers design as their wish | . | Need to look up the datasheet to understand SPI implementation protocol . | SPI advantages . | Speed is not limited (has faster data transmission rates compared to I2C) | Full-duplex (both read and write data happens at the same time) | . | SPI downside . | Single master protocol | Consists of 3 pins for data transfer and one pin for Chip/Slave select . | increases the overall requirement of space compared to I2C | when there is no data to read, when there is a write request, . | the slave should send dummy data to make the connection established | . | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#1-spi-protocol-internals",
    "relUrl": "/pages/guides/hardware/spi.html#1-spi-protocol-internals"
  },"211": {
    "doc": "0x03 - Analyzing SPI",
    "title": "2. Pentest objectives",
    "content": ". | Get console access . | custom bootloaders are designed to prevent from entering single user mode | but that can also be bypassed | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/spi.html#2-pentest-objectives"
  },"212": {
    "doc": "0x03 - Analyzing SPI",
    "title": "3. Tools",
    "content": ". | SPI Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | . | spiflash.py | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#3-tools",
    "relUrl": "/pages/guides/hardware/spi.html#3-tools"
  },"213": {
    "doc": "0x03 - Analyzing SPI",
    "title": "4. Identify the SPI Flash pinouts",
    "content": ". | Open the device | Visually identify the SPI flash chip on the PCB | Note the component number printed on the SPI chip | Look up online for the datasheet to figure out the pinouts . | SPI pins . | SCK | Serial Clock | . | MOSI | Master Out Slave In | . | MISO | Master In Slave Out | . | SS—Slave Select | (Active Low, output from master) | . | SCK, MISO, and MOSI pins are shared by slaves | Each SPI slave will have its own unique SS pin | Master have several SS pins (SS1, SS2, …) | Mater-slave connection table . | SPI Master | SPI Slave | . | SCK | SCK | . | MOSI | MOSI | . | MISO | MISO | . | SS1 | SS | . | Master configures the clock frequency according to the slave’s clock frequency | Master selects the slave device with a logic level 0 on the SS pin | Master initiates the communication by sending a bit on the MOSI line . | which is read by the slave | whereas the slave sends a bit on the MISO line which is read by the master | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#4-identify-the-spi-flash-pinouts",
    "relUrl": "/pages/guides/hardware/spi.html#4-identify-the-spi-flash-pinouts"
  },"214": {
    "doc": "0x03 - Analyzing SPI",
    "title": "5. Connecting EEPROM",
    "content": ". | Method 1: Hooking . | hook mini probes to the SPI flash | . | Method 2: SOIC clip . | use a SOIC clip | . | Method 3: Desoldering . | remove SPI flash the from the PCB by de-soldering | solder it on a EEPROM adapter (or reader) . | use an adapter which is suitable for EEPROM packaging type | . | . | Adapter (Attify Badge) pin layout . | D0 | SCK Serial Clock | . | D1 | MISO Master In Slave Out | . | D2 | MOSI Master Out Slave In | . | D3 | CS Chip Select | . | Connect the SPI flash pins to the adapter (Attify Badge) . | SPI flash | Adapter | . | CLK | TCK (D0) | . | MOSI/DO | TDI (D1) | . | MISO/DI | TDO (D2) | . | CS | TMS (D3) | . | WP, HOLD, and Vcc | 3.3V | . | GND | GND | . | Connect the adapter to the analysis PC via USB | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#5-connecting-eeprom",
    "relUrl": "/pages/guides/hardware/spi.html#5-connecting-eeprom"
  },"215": {
    "doc": "0x03 - Analyzing SPI",
    "title": "6. Reading data",
    "content": ". | Read data from the device using an SPI flash | Use the spiflash.py script . /libmpsse ./configure make make install spiflash.py -s 5120000 --read=new.bin . | Dump the contents to a file | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#6-reading-data",
    "relUrl": "/pages/guides/hardware/spi.html#6-reading-data"
  },"216": {
    "doc": "0x03 - Analyzing SPI",
    "title": "7. Writing data",
    "content": ". | Write data to the SPI flash | Use the spiflash.py script . spiflash.py -s 5120000 -w new.bin . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#7-writing-data",
    "relUrl": "/pages/guides/hardware/spi.html#7-writing-data"
  },"217": {
    "doc": "0x03 - Analyzing SPI",
    "title": "References",
    "content": ". | Reading serial flash ROMs | Dumping the Firmware from the device Using buspirate | . ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html#references",
    "relUrl": "/pages/guides/hardware/spi.html#references"
  },"218": {
    "doc": "0x03 - Analyzing SPI",
    "title": "0x03 - Analyzing SPI",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/spi.html",
    "relUrl": "/pages/guides/hardware/spi.html"
  },"219": {
    "doc": "Start/stop the Service",
    "title": "Start/Stop the service",
    "content": "In order to start or stop the service you need to change the amount of fuzzing bots (servers on the GCP that run the fuzzing tasks) that are associated with the project. By setting this to 0 you stop the fuzzing service. You then need to shut down the GCP web server hosting the Clusterfuzz website. Leaving both of these services running for an indeterminate time can incur high fees for NSE! . ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#startstop-the-service",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#startstop-the-service"
  },"220": {
    "doc": "Start/stop the Service",
    "title": "Changing the number of fuzzing bots",
    "content": "You need to make sure you’ve set up the configuration environment from the previous section. The file where you can change this setting is: Clusterfuzz-configuration/gce/clusters.yaml . The file will begin with the following configurations, if you’d like to turn the service off set the instance_count on both clusters to 0, if you’d like to turn it on set it to a positive number, such as 2. # Regular bots run all task types (e.g fuzzing, minimize, etc). clusterfuzz-linux: gce_zone: gce-zone instance_count: 1 instance_template: clusterfuzz-linux distribute: False # Pre-emptible bots must have '-pre-' in name. They only run fuzzing tasks. clusterfuzz-linux-pre: gce_zone: gce-zone instance_count: 2 instance_template: clusterfuzz-linux-pre distribute: False . Once you’ve made your changes you need to deploy them. This can be done using the following command: . python butler.py deploy --config-dir=$CONFIG_DIR --prod --force . Be aware that it can take a few minutes after you’ve deployed until your changes are reflected in the Google Cloud Platform. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#changing-the-number-of-fuzzing-bots",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#changing-the-number-of-fuzzing-bots"
  },"221": {
    "doc": "Start/stop the Service",
    "title": "Web service",
    "content": "Go to the url https://console.cloud.google.com/appengine/settings and disable the web application. You may need special privileges to complete this action. ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html#web-service",
    "relUrl": "/pages/guides/fuzzing/start-stop.html#web-service"
  },"222": {
    "doc": "Start/stop the Service",
    "title": "Start/stop the Service",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/fuzzing/start-stop.html",
    "relUrl": "/pages/guides/fuzzing/start-stop.html"
  },"223": {
    "doc": "The Law",
    "title": "The law",
    "content": "It is important to not break the law. Therefore, we need to understand it. There are at least four laws that are of concern for a (Swedish) hacker: . | Brottsbalken 4 kap. 9c §: “Den som olovligen bereder sig tillgång till en uppgift som är avsedd för automatiserad behandling eller olovligen ändrar, utplånar, blockerar eller i register för in en sådan uppgift döms för dataintrång till böter eller fängelse i högst två år. Detsamma gäller den som olovligen genom någon annan liknande åtgärd allvarligt stör eller hindrar användningen av en sådan uppgift. Är brottet grovt, döms för grovt dataintrång till fängelse i lägst sex månader och högst sex år. Vid bedömande av om brottet är grovt ska det särskilt beaktas om gärningen har orsakat allvarlig skada eller avsett ett stort antal uppgifter eller annars varit av särskilt farlig art. Lag (2014:302).” | Lagen om företagshemligheter (brand new): “1 § Lagen innehåller bestämmelser om skadestånd, vitesförbud och straff vid obehöriga angrepp på företagshemligheter.” | Lagen om upphovsrätt till litterära och konstnärliga verk: “2 § Upphovsrätt innefattar, med de inskränkningar som föreskrivs i det följande, uteslutande rätt att förfoga över verket genom att framställa exemplar av det och genom att göra det tillgängligt för allmänheten, i ursprungligt eller ändrat skick, i översättning eller bearbetning, i annan litteratur- eller konstart eller i annan teknik.” | 8 § Den som olovligen bereder sig tillgång till ett meddelande, som ett post- eller telebefordringsföretag förmedlar som postförsändelse eller i ett elektroniskt kommunikationsnät, döms för brytande av post- eller telehemlighet till böter eller fängelse i högst två år. Lag (2012:280). | . Regarding 1, the rule of thumb is: Don’t hack someone else’s property. For IoT devices, for instance, you can hack the actual device if you/KTH own(s) it, but you may not attempt to hack the associated Cloud server, owned by the vendor. You can interact with the server in the intended way, though, of course, and you can monitor the traffic. Regarding 2, 4 § is the key: “4 § Lagen gäller endast obehöriga angrepp på företagshemligheter. Som ett obehörigt angrepp anses aldrig att någon angriper en företagshemlighet för att offentliggöra eller inför en myndighet eller ett annat behörigt organ avslöja något som . | skäligen kan misstänkas utgöra brott med fängelse i straffskalan, eller | kan anses utgöra något annat missförhållande och offentliggörandet eller avslöjandet sker till skydd för allmänintresset.” | . An argument might be that finding and responsibly disclosing vulnerabilities is carried out for the protection of the general interest (“till skydd för allmänintresset”). Regarding 3, that law is intended to prevent the reproduction of original texts, which of course is not the intent of an ethical hacker. Nevertheless, there are some unfortunate paragraphs limiting the rights to decompile object code. The law does state that “Den som har rätt att använda ett datorprogram får iaktta, undersöka eller prova programmets funktion för att fastställa de idéer och principer som ligger bakom programmets olika detaljer.” This is sometimes called “observationsrätten”. There is a rather obscure restriction of the right to observe, though: “Detta gäller under förutsättning att det sker vid sådan laddning, visning på skärm, körning, överföring eller lagring av programmet som han har rätt att utföra.” . One problem for ethical hackers is copyright laws with respect to reverse engineering, which may be considered a kind of copying/translation. In Europe decompilation is explicitly allowed for the purposes of interoperability: “26 h § Återgivning av ett datorprograms kod eller översättning av kodens form är tillåten om åtgärderna krävs för att få den information som är nödvändig för att uppnå samverkansförmåga mellan programmet och ett annat program.” So, as long as the intent is to achieve some kind of interoperability, then code may be reversed. There is even a European case where the law was employed to the advantage of the reverse engineers, SAS Institute Inc v World Programming Ltd. However, if interoperability is not the objective, then it is rather unclear exactly what is allowed. Finally, the law states that contracts or end-user license agreements are unable to void the user’s rights as per the above: “Avtalsvillkor som inskränker användarens rätt enligt denna paragraf är ogiltiga.” My take on this is that ethical hacking is unproblematic wrt copyright except for the case of reverse engineering. For reverse engineering, the purpose should be to achieve interoperbility with an external program. If you encounter any unclear situations, don’t hesitate to discuss with your supervisor. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/the_law.html#the-law",
    "relUrl": "/pages/thesis_guidelines/the_law.html#the-law"
  },"224": {
    "doc": "The Law",
    "title": "The Law",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/the_law.html",
    "relUrl": "/pages/thesis_guidelines/the_law.html"
  },"225": {
    "doc": "Theory",
    "title": "Theory",
    "content": "In the context of your thesis report, theory pertains to general, typically academic knowledge relevant to your report. As a rule of thumb: if you find a topic as a main section in book required for some other course in your studies, then it is probably suitable to refer to it as theory. Examples are communication protocols, which you will find in networking course literature, database technology (e.g. SQL), which you can find complete academic courses on, operating system design, cryptography, etc. Of particular interest might be the rare paper Exploit Programming: From Buffer Overflows to “Weird Machines” and Theory of Computation by Sergey Bratus et al., which theorizes exploit development. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/theory.html",
    "relUrl": "/pages/thesis_guidelines/theory.html"
  },"226": {
    "doc": "Thesis Report",
    "title": "Thesis report",
    "content": "There are two goals with the thesis report: . | To convince a critical reader that you indeed have answered your research question (which typically for hacking projects is something like “Is device X secure against cyber attacks?”). | To convince a critical reader that you fulfill the requirements for a thesis project. | . Try to make sure (i) that everything you write in the report actually contributes to the above, and (ii) that it is clear to the reader to what goal each paragraph and section contributes. When writing the report, try to imagine the objections of a very critical reader, and try to make sure that your report responds to those objections as well as possible. Do iterate your report with your supervisor a few times during the thesis project, e.g. (i) the outline, (ii) the threat analysis, (iii) critical parts of your penetration testing, (iv) the final report. The final report can be organized as follows: . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#thesis-report",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#thesis-report"
  },"227": {
    "doc": "Thesis Report",
    "title": "Introduction",
    "content": "Provide the introduction, state the objectives of the project, delimitations, and outline the rest of the report. Explain the societal relevance of your work. For whom and why is your work of interest? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#introduction",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#introduction"
  },"228": {
    "doc": "Thesis Report",
    "title": "Background/Theory",
    "content": "General background and general theory can be placed in this section. If the system is based on some relevant theory, such as cryptography, database theory, operating system theory, networking theory, etc, that theory can be presented here. Envision your student colleagues who might not know anything specific about your project. What do you need to explain to them? Perhaps they need to understand some basics about HTTP, cookies, CORS, SQL, firmware, etc in order to appreciate your contribution. So this section should provide the theory required to understand each one of your penetration tests. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#backgroundtheory",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#backgroundtheory"
  },"229": {
    "doc": "Thesis Report",
    "title": "Methodology",
    "content": "Describe how you approach the thesis project. Typcically this includes your threat modeling methodology and your penetration testing methodology. Convince the reader that your methodology ensures that you don’t miss any important attacks and that your explorations will be convincing. Base your method on established methods (check out the Method section in these master thesis guidelines), or justify why not. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#methodology",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#methodology"
  },"230": {
    "doc": "Thesis Report",
    "title": "Selection of system",
    "content": "If you have been involved in the selection of the system to be explored (e.g. by using the criteria detailed here), then justify your choice in this section. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#selection-of-system",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#selection-of-system"
  },"231": {
    "doc": "Thesis Report",
    "title": "The system under consideration",
    "content": "Describe the functionality and technology of the system under consideration. Even though you discovered some aspects of the system behavior and structure during penetration tests, you should probably still write about it here. The name of this chapter can be the name of that system rather than “The system under consideration”. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#the-system-under-consideration",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#the-system-under-consideration"
  },"232": {
    "doc": "Thesis Report",
    "title": "Related work",
    "content": "Here, you should describe relevant work previously performed by other researchers. You should include all discovered vulnerabilities of the specific device you are investigating, but also published penetration tests of devices of other brands in the same device category. Oftentimes, there are important similarities between devices of different categories (smart power sockets may have many protocol similarities with smart light bulbs, for instance). It will therefore generally be relevant to also consider such related work. Read more about related work here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#related-work",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#related-work"
  },"233": {
    "doc": "Thesis Report",
    "title": "Threat model",
    "content": "Draw one or several thread modeling diagrams of the system. Detail each attack that the system could be subjected to. Describe each relevant attack vector in the general case (not specifically related to your system under consideration). Refer to solid sources (e.g. papers or presentations to security conferences). Describe your assessment of each threat or threat type as applied to your system. Estimate the potential impact and the probability of successful exploitation. Carefully choose a limited set of attack vectors (and convincingly motivate that choice) for the penetration testing phase of the project. Document, e.g. in the threat model, how thoroughly you have explored each attack. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#threat-model",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#threat-model"
  },"234": {
    "doc": "Thesis Report",
    "title": "Penetration testing",
    "content": "Describe the actual penetration tests here. Penetration testing task #1 . If the test is simple, you won’t need all the subheadings below. Otherwise, you might. In some cases, such as if all conducted tests are similar, it might be more fitting to write the method of each pentest under the methodology section above, and simply disclose the result for each test here. Introduction . | Describe the attack vector to be explored | . Background . | If the attack vector is based on particular theory (e.g. SQL injection requires some database theory), then that theory can be described here. | . Method . | Describe how the testing is performed | . Results . | Describe your findings | . Discussion . | Discuss the reliability, validity and generalizability of your findings. If you found a vulnerability, how serious is it? If the system withstood the attack, how important is that? Why? How much can the reader trust your results? To what extent were you able to answer your research question? | . Penetration testing task #2 . … . Penetration testing task #n . … . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#penetration-testing",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#penetration-testing"
  },"235": {
    "doc": "Thesis Report",
    "title": "Sustainability and ethics",
    "content": "Describe the ramifications of your work with respect to sustainability and ethics. Considering ethics, you can, for instance, describe how you have navigated the law, responsible disclosure, etc. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#sustainability-and-ethics",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#sustainability-and-ethics"
  },"236": {
    "doc": "Thesis Report",
    "title": "Results",
    "content": "Summarize all the identified attack vectors in your threat traceability matrix. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#results-1",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#results-1"
  },"237": {
    "doc": "Thesis Report",
    "title": "Discussion",
    "content": "Summarize the reliability, validity, and generalizability of your findings. How secure is the tested device, all things considered? How much can the reader trust your results? To what extent were you able to answer your research question? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#discussion-1",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#discussion-1"
  },"238": {
    "doc": "Thesis Report",
    "title": "Conclusions",
    "content": "How secure is the system? . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#conclusions",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#conclusions"
  },"239": {
    "doc": "Thesis Report",
    "title": "References",
    "content": "Use citations to (i) support any claims you make that the reader might not agree with, (ii) give credit to the authors and creators (important to avoid accusations of plagiarism), and (iii) demonstrate that you have studied all the relevant background material. This is especially important to show that your threat model is comprehensive - that you have considered all relevant attacks. Guidance on reference format can be found here. An example of a previous thesis report can be found here, and many more here. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html#references",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html#references"
  },"240": {
    "doc": "Thesis Report",
    "title": "Thesis Report",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/thesis_report.html",
    "relUrl": "/pages/thesis_guidelines/thesis_report.html"
  },"241": {
    "doc": "Things to hack",
    "title": "Things to hack",
    "content": "There are many potential targets for security assessments. Below are some suggestions, and if there is some product missing from the lab that you would like to use for your thesis you can head to the purchase form page. | Elk: The world’s fastest audio operating system | Power grid asset management equipment | Smart electricity meters | SCADA control system equipment such as programmable logic controllers (PLCs) | Open source IoT operating systems such as TinyOS, RIOT, Contiki, Mantis OS, Nano RK, LiteOS, FreeRTOS, Apache Mynewt, Zephyr OS, Ubuntu Core 16 (Snappy), ARM mbed, Yocto and Raspbian. | Google PlayStore 100M-user apps. Google offers a bug bounty on the biggest apps, which also vouches for the legality of security testing them. | Cloud providers with bug bounty programs, like Google Cloud Platform. | Alarm systems | nRF9160 which is used in a lot of IoT devices. Explore with Nordic Thingy:91. | JetBrain’s Code with Me. Jetbrains are a suspected attack vector in the recent SolarWinds attack. | Open source, like linux, nginx, apache, openssl, kvm, bash, vim, imagemagick, etc. | Sport-related equipment, e.g. Garmin’s sports watches, appear to feature large attack surfaces. | Health-related equipment, such as blood glucose meters, even pace makers, if we can get a hold of one | Smart power sockets and other home automation equipment | Smart glasses | VR headset | Robots | Baby monitors and similar home surveillance systems | Internet-connected toys (dolls with microphones, etc.) | Vehicle entertainment systems | Headphones | Industrial IoT (Cranes, heavy machinery, trucks) | Smart refrigerators | Connected pets? | Smart car alarms | Vehicles, e.g. electronic scooters | Electric mopeds (some come with GPS, smartphone apps and a kill switch, now-a-days). | OBD II dongles used to connect your smart phone to your car | Drones | Robot vacuum cleaners (particularly interesting if they have a camera) | Electronic door locks | Childrens’ smart watches | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/things_to_hack.html",
    "relUrl": "/pages/thesis_guidelines/things_to_hack.html"
  },"242": {
    "doc": "Threat Traceability Matrix",
    "title": "Threat traceability matrix",
    "content": "A threat traceability matrix is an excellent structure for presenting your threat analysis as well as the results of your penetration testing. Ideally, you would include the following information in your threat traceability matrix: . | the threat agent, | the affected asset, | the attack surface, | the attack goal, | the attack, | the attack impact, if successful (here, you may use the impact metrics of the CVSS scoring system), | references to related work, e.g. to vulnerabilities in similar products, or to descriptions of the kind of vulnerability and/or exploit, | estimated exploitability (here, you may use the exploitability metrics of the CVSS scoring system). | whether you have attempted this attack (if you have, refer the reader to the appropriate section; if you haven’t, refer the reader to the location in the report where you motivate that delimitation), | the results of potential penetration tests. | . The threat traceability matrix should allow the reader of your report to easily find answers to the following questions: . | Have you considered all relevant attacks? You can strengthen this by providing good and exhaustive references to related work. | Have you performed penetration tests of the most important attacks? Here, the motivation of your probability of attack success will be important to convince the reader that your focus was correct. | Did your penetration tests succeed? | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html#threat-traceability-matrix",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html#threat-traceability-matrix"
  },"243": {
    "doc": "Threat Traceability Matrix",
    "title": "Risk matrix",
    "content": "If you like, you can plot your threats in a risk matrix, which will clearly indicate which threats are worthy of penetration testing. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html#risk-matrix",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html#risk-matrix"
  },"244": {
    "doc": "Threat Traceability Matrix",
    "title": "Threat Traceability Matrix",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/threat_traceability_matrix.html",
    "relUrl": "/pages/thesis_guidelines/threat_traceability_matrix.html"
  },"245": {
    "doc": "Tutoring",
    "title": "Synchronous tutoring meetings",
    "content": "Upon request, Pontus Johnson offers weekly videoconferencing tutoring meetings over Zoom for those who would like to meet synchronously. In a typical session, each participant updates the group on their project, describes if there are any issues that require assistance, and poses some questions. If you prefer to simply listen in, that is also possible. Some sessions may be cancelled or rescheduled. If so, that is communicated via ssas-students.slack.com. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#synchronous-tutoring-meetings",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#synchronous-tutoring-meetings"
  },"246": {
    "doc": "Tutoring",
    "title": "Asynchronous tutoring",
    "content": "Beyond the weekly meeting, you may receive assistance from your supervisor over Slack (ssas-students.slack.com - ask your supervisor to register you if you are not already) or email. Much tutoring consists of reading and commenting on drafts of the thesis report. If you desire prompt feedback, please agree on a date for submitting your draft to your supervisor. That way, the supervisor can book the required reading time in the agenda, and thus provide very prompt feedback. Otherwise, response time will depend on how heavily booked the supervisor happens to be when the draft is received. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#asynchronous-tutoring",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#asynchronous-tutoring"
  },"247": {
    "doc": "Tutoring",
    "title": "Weekly update",
    "content": "A good way to keep in contact with your tutor - in particular if you didn’t join the weekly Zoom meeting - is by submitting a weekly update (over ssas-students.slack.com or per e-mail), responding to these questions: . | What has happened since last update? | What are your plans for the coming work? | Do you need assistance? | . ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#weekly-update",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#weekly-update"
  },"248": {
    "doc": "Tutoring",
    "title": "Your examiner",
    "content": "While the examiner assesses your performance and thus acts in a role of authority, your tutor is only there to assist. Thus, interaction with your tutor is completely voluntary. If you feel confident that you are on the right track, then you don’t need to participate in the activities above. If, on the other hand, you are not quite sure about the requirements on your project, or if you need technical, authoring or project planning assistance, then your tutor is available to help out. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#your-examiner",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#your-examiner"
  },"249": {
    "doc": "Tutoring",
    "title": "Your program coordinator",
    "content": "Your program coordinator will be able to respond to questions about scheduling, report submission requirements, thesis presentation and opposition. Your tutor is typically not involved in these requirements and activities, which differ significantly between programs. ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html#your-program-coordinator",
    "relUrl": "/pages/thesis_guidelines/tutoring.html#your-program-coordinator"
  },"250": {
    "doc": "Tutoring",
    "title": "Tutoring",
    "content": " ",
    "url": "http://localhost:4000/pages/thesis_guidelines/tutoring.html",
    "relUrl": "/pages/thesis_guidelines/tutoring.html"
  },"251": {
    "doc": "0x01 - Analyzing UART",
    "title": "Analyzing UART",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#analyzing-uart",
    "relUrl": "/pages/guides/hardware/uart.html#analyzing-uart"
  },"252": {
    "doc": "0x01 - Analyzing UART",
    "title": "1. UART internals",
    "content": ". | Designed for two different components on a device to talk to each other | Microcontroller chip in devices typically have UART pins | UART is a way of serial communication | Common serial channels (TTL, RS232, USB, PCI, HDMI, SPI, I2C, CAN) . | TTL interface has 3-5 pins | RS-232 interface has a 9-pin connector, etc. | . | These interfaces are also used for debugging (testing connections) the device . | UART Data packet . | starting bit (usually 0) | message (any 8-bits) | parity bit (not used) | stop bit (usually 1) | . | UART Data packet format (usual configuration) . | 8N1 — which means 8 message bits, no parity bit, and 1 stop bit | . | UART Port type . | hardware-based or software-based | when there is not enough UART ports on chipset . | UART is emulated via GPIO (means software UART) | it is a rare situation | . | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#1-uart-internals",
    "relUrl": "/pages/guides/hardware/uart.html#1-uart-internals"
  },"253": {
    "doc": "0x01 - Analyzing UART",
    "title": "2. Pentest objectives",
    "content": ". | Access debug logs that usually contains a booting sequence | (might) allow bootloader access while the device is booting | (might) provide unauthenticated root shell (console access) | (might) provide loading firmware over the network | and more . | Custom bootloaders are designed to prevent from entering single user mode . | but that can also be bypassed. | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#2-pentest-objectives",
    "relUrl": "/pages/guides/hardware/uart.html#2-pentest-objectives"
  },"254": {
    "doc": "0x01 - Analyzing UART",
    "title": "3. Tools",
    "content": ". | Multimeter | Logic analyzer (for analyzing data packet) . | Saleae Logic Analyzer (or) | Open Workbench Logic Sniffer | . | UART Converter/Adapter (any supported FTDI based hardware) . | USB-TTL (or) | BusPriate (or) | Attify Badge | baudrate.py | . | Communication . | minicom (or) | screen (or) | Attify Badge GUI | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#3-tools",
    "relUrl": "/pages/guides/hardware/uart.html#3-tools"
  },"255": {
    "doc": "0x01 - Analyzing UART",
    "title": "4. Identify UART pinouts",
    "content": ". | Look for the shape online to learn | Visual inspection of the internal device components . | looking for 3/4 pins or pads close to each other | rarely scattered across the board | . | UART pins . | Pin | Function | . | Transmit (Tx) | Transmits data from the device to the target | . | Receive (Rx) | Receives data from the target to the device | . | Ground (GND) | Ground | . | Voltage (Vcc) | Usually either 3.3V or 5V | . | Chipset will have instructions on the connectors, otherwise use a | Multimeter . | continuity test (for GND) . | make sure the device is turned off | set the pointer to continuity | place the black probe on a ground surface (any metal part on device) | place the red probe on each of the four pads one by one | the pin is giving the beep sound is the GND | . | voltage difference (for the Tx, Rx, Vcc) . | set the pointer to V-20 | place the black probe to GND | turn device on | place the red probe over other pins | constant high voltage is our Vcc pin . | reboot the device | place the red probe over the other pins | huge fluctuation in the voltage value is Tx pin . | during the initial 10–15 seconds | . | lowest voltage during entire process is Rx | . | . | Confirm the findings by hooking up a logic analyzer | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#4-identify-uart-pinouts",
    "relUrl": "/pages/guides/hardware/uart.html#4-identify-uart-pinouts"
  },"256": {
    "doc": "0x01 - Analyzing UART",
    "title": "5. Connecting UART",
    "content": ". | A converter device for emulating a serial connection . | to communicate two devices over UART/JTAG/I2C,SPI,GPIO | USB-TTL or BusPriate or Attify Badge | . | A proper voltage converter . | i.e. when using a 3.3v serial device to a 5v serial device | serial connection emulators have built-in | . | Adapter (Attify Badge) pin layout . | Pin | Function | . | D0 | Tx Transmit | . | D1 | Rx Receive | . | Connect the EEPROM pins to the adapter (Attify Badge) by using jumper wires . | UART | Adapter | . | Tx | Rx | . | Rx | Tx | . | GND | GND | . | Vcc | is NOT connected | . | Connect the adapter to the analysis PC via USB . | learn the mount point under /dev | by default mounted on COM port /dev/USB0 | . | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#5-connecting-uart",
    "relUrl": "/pages/guides/hardware/uart.html#5-connecting-uart"
  },"257": {
    "doc": "0x01 - Analyzing UART",
    "title": "6. Command shell",
    "content": ". | Baud rate specifies the number of bits transmitted per second . | data being transferred between devices = data rate | . | Identify the baud rate of the device . | common rates: 9600, 38400, 19200, 57600, and 115200 | otherwise, find it by trial and error | . baudrate.py . | change baud rates while establishing a serial connection | visually inspect which baud rate gives the readable output | after detecting correct baud rate press Ctrl + C | . | Interacting with console . | screen &lt; mount point &gt; &lt; baud rate &gt; | . screen /dev/ttyUSB0 38400 . | reboot the device | access debug logs of the device booting up process | right after booting, “busybox” is up | unauthenticated root shell on the device | . | ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#6-command-shell",
    "relUrl": "/pages/guides/hardware/uart.html#6-command-shell"
  },"258": {
    "doc": "0x01 - Analyzing UART",
    "title": "References",
    "content": "| Getting the router shell using UART interface and bus pirate | A journey into IoT – Hardware hacking: UART | More router fun: UART connections with Putty | lesson 3 - Arduino Debugging, Uart, Led PWM | . ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html#references",
    "relUrl": "/pages/guides/hardware/uart.html#references"
  },"259": {
    "doc": "0x01 - Analyzing UART",
    "title": "0x01 - Analyzing UART",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/hardware/uart.html",
    "relUrl": "/pages/guides/hardware/uart.html"
  },"260": {
    "doc": "Ubertooth One",
    "title": "Ubertooth One",
    "content": "The Ubertooth One is an open source development platform used to experiment with Bluetooth, and BLE in particular. You can find the GitHub repository for the Ubertooth here. The repo also contains a wiki, which among other things holds the Build Guide, the FAQ, and a guide on how to use the Ubertooth One together with Wireshark. ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html",
    "relUrl": "/pages/guides/Wireless/ubertooth.html"
  },"261": {
    "doc": "Ubertooth One",
    "title": "Installation and Setup",
    "content": "The Ubertooth One works with several operating systems, but this guide will assume that you are using Kali Linux. For guides on other operating systems, please see the Build Guide in the Ubertooth repository. First of all, you need to install the prerequisites: . sudo apt install cmake libusb-1.0-0-dev make gcc g++ libbluetooth-dev wget \\ pkg-config python3-numpy python3-qtpy python3-distutils python3-setuptools . Now you need the Bluetooth baseband library (libbtbb): . wget https://github.com/greatscottgadgets/libbtbb/archive/2020-12-R1.tar.gz -O libbtbb-2020-12-R1.tar.gz tar -xf libbtbb-2020-12-R1.tar.gz cd libbtbb-2020-12-R1 mkdir build cd build cmake .. make sudo make install sudo ldconfig . And last but not least you need the Ubertooth repo itself in order to sniff Bluetooth packets and configure the Ubertooth: . wget https://github.com/greatscottgadgets/ubertooth/releases/download/2020-12-R1/ubertooth-2020-12-R1.tar.xz tar -xf ubertooth-2020-12-R1.tar.xz cd ubertooth-2020-12-R1/host mkdir build cd build cmake .. make sudo make install sudo ldconfig . If you for some reason have an older version of Wireshark (older than v.2.2), you need to get some additional Wireshark plugins. Please see this page to learn how. ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html#installation-and-setup",
    "relUrl": "/pages/guides/Wireless/ubertooth.html#installation-and-setup"
  },"262": {
    "doc": "Ubertooth One",
    "title": "Sniffing Bluetooth packets in Wireshark",
    "content": "The Ubertooth One can be used with Wireshark to sniff BLE packets. To sniff BLE packets in Wireshark, follow these steps: . | Open up a terminal and run mkfifo /tmp/pipe | Open up Wireshark | Navigate to Capture &gt; Options and then click Manage Interfaces | Next click Pipes, and click the + button | Name the new pipe “/tmp/pipe” | Save and exit the Capture Options | Start a Wireshark Capture with the “/tmp/pipe” interface/pipe selected | In a Terminal, run ubertooth-btle -f -c /tmp/pipe | Go back to Wireshark - you should now see the packets coming in | . ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html#sniffing-bluetooth-packets-in-wireshark",
    "relUrl": "/pages/guides/Wireless/ubertooth.html#sniffing-bluetooth-packets-in-wireshark"
  },"263": {
    "doc": "Ubertooth One",
    "title": "First Steps",
    "content": "There are two things that you can try out once you’ve gotten the Ubertooth set up properly. Spectrum Analysis . The first thing you can try is to run a simple spectrum analysis. | Make sure that the Ubertooth has an antenna connected to it - never operate the Ubertooth without an antenna connected | Plug the Ubertooth into your computer | Navigate to the host/python/specan_ui directory in the Ubertooth repo | Execute ubertooth-specan-ui and enjoy the show! | . LAP Sniffing . A complete Bluetooth MAC address (BD_ADDR) consists of 48 bits. LAP stands for Lower Address Part and consists of the 24 lower bits of the BD_ADDR, and is the only part of the address that is transmitted in every Bluetooth packet. The method in this example shows false positives at times. Therefore, check if the same LAP is used in multiple packets to make sure it’s correct. | Make sure that the Ubertooth has an antenna connected to it - never operate the Ubertooth without an antenna connected | Plug the Ubertooth into your computer | Execute ubertooth-rx and enjoy the show! Try sending some test traffic, for example by using a smartphone and a Bluetooth peripheral. | . If you want to find the Upper Address Part (UAP) of the BD_ADDR once you’ve gotten a LAP that you’re confident is correct, run ubertooth-rx -l [LAP] . ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html#first-steps",
    "relUrl": "/pages/guides/Wireless/ubertooth.html#first-steps"
  },"264": {
    "doc": "Ubertooth One",
    "title": "BLE Sniffing - An example with the Glue Smart Lock",
    "content": "Please note: This example was written by someone very new to this topic. There are possibly and probably easier methods to accomplish the same thing. If you have suggestions on how to improve this section, please contact us here. In this simple example I will be sniffing the traffic of a smart lock, using the following tools: . | A Ubertooth One with antenna | A Kali Linux computer with the necessary firmware installed for the Ubertooth | A Glue Smart Lock or similar BLE peripheral | A smartphone with the Glue Smart Lock app (or equivalent) | . The computer used in this example is a desktop computer available at the lab. The lab also has a Ubertooth and a Glue Smart Lock you can borrow - you can check the availability of the Ubertooth here and of the smart lock here. If needed, there are also smartphones at the lab you can use. However, you might need to make sure to download the correct apps and configure the smartphone for the BLE peripheral you are using. I began by following the steps of the “Sniffing Bluetooth packets in Wireshark” section above. Make sure you can see some traffic showing up in Wireshark before continuing. Since this example was conducted in the lab which contains multiple BLE devices, it was quite noisy traffic-wise. The challenge was therefore to identify the smart lock in Wireshark, so I could see the relevant packets being sent. I used my knowledge of BLE to do this. The problem in the lab is that there are many peripherals - and each peripheral sends out advertisement messages at a rate of about one per second. That’s a lot of data to sort through, unless you’re lucky and Wireshark is able to show you the name of the target peripheral straight up. For me, that was not the case. However, there are usually a limited number of central devices, and they don’t transmit nearly as much data. It was therefore a lot easier to find the central device first and go from there, rather than sift through all of the peripheral ADV_IND packets. I knew that only the central device sends out SCAN_REQ messages. I therefore began by sorting the traffic by the INFO column, scrolled to where all the SCAN_REQ messages are, and then found the addresses of the central devices around. Below is what this looked like in Wireshark: . In my case, there seemed to be two central devices nearby. I didn’t know what the other one was, but one must for certain have been my smartphone. I did not yet know which of the two devices was my phone, but I was able to figure it out by trying to scan for Bluetooth devices on my phone - that generated some requests. If all else had failed: two devices are not very many and I could just check both. Next, I looked through the peripheral devices that the phone sent those SCAN_REQ messages to. There were a few, but I was able to rule some of them out by copying the addresses* and using the following display filter in Wireshark: . bluetooth.addr == aa:bb:cc:dd:ee:ff . where aa:bb:cc:dd:ee:ff is the address copied. One thing I noticed here is that the view in Wireshark didn’t update when using a display filter, even though new packets were coming through. The view only updated once I clicked “enter” in the filter field. This was a problem, since I wanted to be able to see in real time when I scanned for devices or sent “lock” and “unlock” commands to the Glue Lock. The solution was the command below, which sets a target device for the Ubertooth. This limits the captured packets, much like pure capture filters in Wireshark. ubertooth-btle -t aa:bb:cc:dd:ee:ff . You can clear the target by passing none as an argument, like so: . ubertooth-btle -t none . After this, I could start the Wireshark capture again while only seeing the traffic from the target device - the one I suspected to be the Glue Lock. To confirm I had the correct address, I simply observed the ADV_IND packets coming through, and then turned off the Glue Lock by taking out the batteries. The ADV_IND packets stopped coming in, and after repeating this process a few more times just to be entirely sure, I was able to confirm that I had found the right device. *Click the row in Wireshark, look at the frame and locate the address you want to copy. Right click on the address and select Copy &gt; Value. ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html#ble-sniffing---an-example-with-the-glue-smart-lock",
    "relUrl": "/pages/guides/Wireless/ubertooth.html#ble-sniffing---an-example-with-the-glue-smart-lock"
  },"265": {
    "doc": "Ubertooth One",
    "title": "Credit",
    "content": "All of the information on this page is taken from the Project Ubertooth Github page. For more details on any topic on this page, consult the Project Ubertooth Github page first. ",
    "url": "http://localhost:4000/pages/guides/Wireless/ubertooth.html#credit",
    "relUrl": "/pages/guides/Wireless/ubertooth.html#credit"
  },"266": {
    "doc": "Web Hacking",
    "title": "Web Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/web.html",
    "relUrl": "/pages/guides/web/web.html"
  },"267": {
    "doc": "Wi-Fi MITM",
    "title": "Wi-Fi Router MitM",
    "content": "We can perform a man-in-the-middle-attack on any Wi-Fi and Ethernet connection that goes through the lab’s router. We use the command tcpdump to capture all the traffic that goes through the router and then pipe that data into our machine and analyse it with Wireshark. You can use the Kali desktop in the lab or any computer which has a connection to the router and the appropriate tools. Type in this command in terminal (replacing routers.ip with the actual IP of the router): . ssh root@routers.ip tcpdump -U -w - -i br0 not port 22 | wireshark -k -i - . You will then be prompted for the root password for the router, once you’ve entered this Wireshark should open and you will be able to begin analysing traffic. You can edit the tcpdump command to your specification, but remember that the ‘not port 22’ part is neccesary to avoid seeing the SSH packets being sent between your computer and the router. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#wi-fi-router-mitm",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#wi-fi-router-mitm"
  },"268": {
    "doc": "Wi-Fi MITM",
    "title": "TLS",
    "content": "If TLS is implemented, the connection can still be vulnerable. See https://www.youtube.com/watch?v=gmYcsdXT3W8. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#tls",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#tls"
  },"269": {
    "doc": "Wi-Fi MITM",
    "title": "Analyzing ICS packets with Wireshark",
    "content": "Wireshark is one of the most widely used network protocol analyzers available[1]. When listening in on a network with Wireshark, the user is able to filter the packets that are shown by for example protocol. Industrial Control Systems, or ICS, is an umbrella term used to describe hardware and software that are serving vital industrial infrastructure, as well as the networks connecting them. Usually ICS get data from sensors, decide on an appropriate action, and then send commands to the machinery.[2] . The following is a list compiled by Sulaiman Alhasawi, that contains all 32 ICS protocols that Wireshark supports filtration for as of April 12th, 2021. | BSAP | Bacnet | C12.22 | CANopen | CIP | DeviceNet | Dnp3 | EGD | EtherNetIP | Ethercat | Ethernet PowerLink | Fieldbus | Goose | HartIP | IEC60870_101 | IEC60870_104 | IEC60870_asdu | KNX | Modbus | Modbus / TCP | Modbus / UDP | Modbus RTU | OPC UA | Omron FINS | Profibus | Profinet | S7comm | Sercos | Sinec H1 | TTEthernet | Tristation | Zigbee | . ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#analyzing-ics-packets-with-wireshark",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#analyzing-ics-packets-with-wireshark"
  },"270": {
    "doc": "Wi-Fi MITM",
    "title": "References",
    "content": "[1] About Wireshark. wireshark.org. https://www.wireshark.org/. (Fetched 2021-04-14) [2] ICS Protocols. Infosec Institute. https://resources.infosecinstitute.com/topic/ics-protocols/. (Fetched 2021-04-14) [3] Wireshark filters for ICS protocols. ZeroNtek. https://zerontek.com/zt/2021/04/12/wireshark-filters-for-ics-protocols/. (Fetched 2021-04-14) . ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html#references",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html#references"
  },"271": {
    "doc": "Wi-Fi MITM",
    "title": "Wi-Fi MITM",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/wifi-mitm.html",
    "relUrl": "/pages/guides/Wireless/wifi-mitm.html"
  },"272": {
    "doc": "Wireless Hacking",
    "title": "Wireless Hacking",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/Wireless/wireless.html",
    "relUrl": "/pages/guides/Wireless/wireless.html"
  },"273": {
    "doc": "Wireshark",
    "title": "Wireshark",
    "content": "Wireshark is a popular packet sniffer tool that can be used to listen in on network traffic. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wireshark.html",
    "relUrl": "/pages/guides/Wireless/wireshark.html"
  },"274": {
    "doc": "Wireshark",
    "title": "Getting started with Wireshark",
    "content": "Here, we will be assuming that you’ve already downloaded and installed Wireshark onto your computer. You can download Wireshark here and follow the installation instructions there if you haven’t already. When you open Wireshark, you should see something that looks like this: . Underneath the filter input, you’ll see a list of all the networks that your computer is currently connected to and that you can listen in on. You should also see graphs next to each network - these represent the amount of traffic currently in them. If you click on any of the list items, you’ll be directly redirected to the capturing page, and a new capture will start automatically. You should see new packages dropping in - these can be of all sorts of protocol types. By default, Wireshark has something called “promiscuous mode” activated. This means that it not only captures traffic to and from your computer, but all the traffic on the network. You can check if you have promiscuous mode turned on by clicking Capture &gt; Options and check the checkbox at the bottom of the screen. You can stop capturing packets at any time by clicking the red square button labeled “Stop capturing packets” in the top left corner of the screen. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wireshark.html#getting-started-with-wireshark",
    "relUrl": "/pages/guides/Wireless/wireshark.html#getting-started-with-wireshark"
  },"275": {
    "doc": "Wireshark",
    "title": "Wireshark Filters",
    "content": "Before we get too deep into Wireshark filters, you should know that there are two kinds of filters in Wireshark: Capture Filters, and Display Filters. Capture Filters are set before you start a new capture. They limit the capture to only catch packets that match the capture filter - it makes the whole capture smaller, since it isn’t capturing all of the traffic. You cannot change the Capture Filter mid-capture. Display Filters are set after you start a new capture. Wireshark will still capture all of the traffic, but only packets that match the display filter are shown in the list. Display Filters can also be changed mid-capture, since they only change what is displayed on screen - not the capture itself. You can combine Capture Filters and Display Filters as you please. For example, you could set a Capture Filter to capture all the TCP packets, and then view only the ones to or from a specific IP address using Display Filters. There are a bunch of filters you can apply to your captures to make it easier to find what you’re looking for. If you start typing in the filter input field, you’ll see suggestions on what kind of filters you can use. If you want to filter by protocol, most likely it will consist of you just typing the protocol name in lower case: tcp, dns, and so on. You can use the Wireshark Protocol Reference for a complete list of all the protocols you can filter by. You might also find this list of ICS protocol filters useful. Other options that are available include filtering by IP address, Ethernet address, ports, source, destination, and much more. Check out Wireshark’s documentation for examples and more information. Wireshark can be used with Ettercap to perform Man in the Middle attacks. You can read more here. ",
    "url": "http://localhost:4000/pages/guides/Wireless/wireshark.html#wireshark-filters",
    "relUrl": "/pages/guides/Wireless/wireshark.html#wireshark-filters"
  },"276": {
    "doc": "0x07 - Cross Site Scripting (XSS)",
    "title": "Cross Site Scripting (XSS)",
    "content": "Similar to injection attacks, Cross Site Scripting occurs when an attacker is able to insert malicious code into the target system. The difference is that here, the attack potentially results in the attacker’s code being executed in the browser of an unsuspecting end user.[1] . XSS has historically been divided into two main categories: . | Non-persistent (or Reflected) XSS | Persistent (or Stored) XSS[2] | . Non-persistent XSS is when the malicious code is entered to the target website through for example a link to be clicked, rather than in the website itself. Here, a user has to click or otherwise interact with the element that contains the malicious code. Persistent XSS is when the malicious code makes its way all the way to the website’s storages of user input (like its databases). As opposed to non-persistent XSS, the malicious code is rendered to all end users’ browsers, resulting in them all becoming the victims of the attack.[3] . You can read more in “Bug Bounty Hunting for Web Security: Find and Exploit Vulnerabilities in Web sites and Applications” by Sanjib Sinha. If you have a KTH account, you can access the book online here. ",
    "url": "http://localhost:4000/pages/guides/web/xss.html#cross-site-scripting-xss",
    "relUrl": "/pages/guides/web/xss.html#cross-site-scripting-xss"
  },"277": {
    "doc": "0x07 - Cross Site Scripting (XSS)",
    "title": "References",
    "content": "[1] Cross Site Scripting (XSS). OWASP. https://owasp.org/www-community/attacks/xss/. (Fetched 2021-03-29) [2] Cross-site scripting. Wikipedia. https://en.wikipedia.org/wiki/Cross-site_scripting (Fetched 2021-03-29) [3] Sinha, S. (2019). Bug Bounty Hunting for Web Security: Find and Exploit Vulnerabilities in Web sites and Applications (1st ed. 2019.. ed.). Link to KTH Library. ",
    "url": "http://localhost:4000/pages/guides/web/xss.html#references",
    "relUrl": "/pages/guides/web/xss.html#references"
  },"278": {
    "doc": "0x07 - Cross Site Scripting (XSS)",
    "title": "0x07 - Cross Site Scripting (XSS)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/xss.html",
    "relUrl": "/pages/guides/web/xss.html"
  },"279": {
    "doc": "0x04 - XML External Entities (XXE)",
    "title": "XML External Entities (XXE)",
    "content": "XXE is an attack used against applications that parse XML. If the XML parser is old or carelessly configured, it could read and interpret the incoming XML input as is, and thus the attacker could view files and interact with the host system in the same way the application could.[1, 2] . XML looks similar to HTML, with a key difference: all tags are user defined. Furthermore, an XML entity is like a variable: it’s a thing that holds some value. XML entities are used to represent data, without using the data itself. The information on what types of data an XML document can hold, as well as some additional information, is specified in the Document Type Definition: the DTD. If you’ve ever written any HTML code, you might be familiar with the DOCTYPE tag that is written at the top of the HTML document - for XML, this is where we declare our custom entities. For example, if I would want to use a custom XML entity called &amp;foo and give it a value of “42”, I would type the following as the DTD[4]: . &lt;!DOCTYPE rootElem [ &lt;!ENTITY foo \"42\" &gt; ]&gt; . When we want to use the value of the entity in the XML document, we have have to write it with an ampersand (&amp;) before the entity name, and then a semicolon (;) after the entity name. For example: &amp;foo;. [5] . The entities can also be external, and be loaded in either by providing a URL or a file path. For example[3]: . &lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM \"http://normal-website.com\" &gt; ]&gt; . or . &lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM \"file:///path/to/file\" &gt; ]&gt; . This feature makes XML external entities very interesting for attackers, since if they can inject their own entities and provide their own URL or file path, they could insert or retrieve data that they shouldn’t be allowed to touch. For a more detailed explanation, see this article. ",
    "url": "http://localhost:4000/pages/guides/web/xxe.html#xml-external-entities-xxe",
    "relUrl": "/pages/guides/web/xxe.html#xml-external-entities-xxe"
  },"280": {
    "doc": "0x04 - XML External Entities (XXE)",
    "title": "Example",
    "content": "The following example is from the lab “Exploiting XXE using external entities to retrieve files” from PortSwigger Web Security Academy. There are many ways to approach this lab, but in this example we are going to be using Burp Suite Community Edition, which is PortSwigger’s own product. The lab contains a website that looks like this: . The goal is to retrieve the contents of the /etc/passwd file using XXE. The website has a Check stock feature that is vulnerable to XXE: . First of all, start up Burp Suite Community Edition. Create a temporary project and use the default settings. Navigate to the Proxy tab; it should look something like this: . Now, you can either configure your own browser for Burp Proxy, or you can use Burp’s embedded browser. We will be using Burp’s own embedded browser here, which is a preconfigured version of Chromium. Make sure that you have “Intercept is off” toggled in the Proxy tab of Burp. Navigate to the lab’s website and click on “View Details” for any of the products. Scroll down to the drop-down menu and the “Check Stock” button. Before you click anything however, go back to Burp and toggle to “Intercept is on”. Go back to the lab page and click the “Check Stock” button. The traffic between your browser and the lab page has now been intercepted and can be viewed in Burp. It should look something like this: . As you can see, the XML can now be both viewed and edited, and then when you click on the “Forward” button it will be sent off to the lab page. Now, our goal is to figure out what code to plant so that the website will give us its /etc/passwd file. We know that we should provide a DTD, and it should be between the XML header and the opening &lt;stockCheck&gt; tag. We want to get the system to read out the contents of the /etc/passwd file, so we should be looking at providing an external entity that is loaded in using a file path. Remember that we use the SYSTEM keyword to say that we are using an external entity, and then something like file:///path/to/file to specify a file path. So let’s try the following: . Here, we are declaring a DTD where there is an external entity called &amp;xxe, and its value should be loaded from the /etc/passwd file. Furthermore, we are displaying the value of &amp;xxe within the productId tags. Now we can click the “Forward” button. And congratulations, you’re done! . Since this is just a lab, we will sadly not actually see any /etc/passwd file, but the lab should get marked as done if you’ve done everything correctly. ",
    "url": "http://localhost:4000/pages/guides/web/xxe.html#example",
    "relUrl": "/pages/guides/web/xxe.html#example"
  },"281": {
    "doc": "0x04 - XML External Entities (XXE)",
    "title": "References",
    "content": "[1] XML External Entity (XXE) Processing. OWASP. [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity(XXE)_Processing). (Fetched 2021-03-28) [2] Exploiting XML External Entity (XXE) Injections. Medium https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9. (Fetched 2021-03-28) [3] XML entities. PortSwigger. https://portswigger.net/web-security/xxe/xml-entities. (Fetched 2021-04-25) [4] DTD - Entities. W3Schools. https://www.w3schools.com/xml/xml_dtd_entities.asp. (Fetched 2021-04-25) [5] XML Entity. w3resource. https://www.w3resource.com/xml/entities.php. (Fetched 2021-06-02) . ",
    "url": "http://localhost:4000/pages/guides/web/xxe.html#references",
    "relUrl": "/pages/guides/web/xxe.html#references"
  },"282": {
    "doc": "0x04 - XML External Entities (XXE)",
    "title": "0x04 - XML External Entities (XXE)",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/web/xxe.html",
    "relUrl": "/pages/guides/web/xxe.html"
  },"283": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "Analyzing ZigBee",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#analyzing-zigbee",
    "relUrl": "/pages/guides/radio/zigbee.html#analyzing-zigbee"
  },"284": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "1. ZigBee internals",
    "content": ". | Designed for low-power usage and low data transfer rate | Allows devices to communicate using a mesh network topology . | Stack . | Application layer | Customer application | . | Application profile | ZigBee | . | Application framework | ZigBee | . | Network layer | ZigBee | . | MAC layer | IEEE 802.15.4 | . | PHY layer | IEEE 802.15.4 | . | Coordinator . | selecting the correct channel (among 16 channels) | creating a network | forming security settings | handling authentication | (even) acting as a router | . | Router . | routes traffic in ZigBee network | . | End devices . | perform any task | usually sleep to save power | only wake up on a read or write request | . | Addressing . | MAC layer -&gt; GUID of 64-bit | NWK address -&gt; 16-bit | . | Broadcast . | send data to address 0xFFFF | . | Communication is established with 3 data . | address of the target | endpoint number | cluster ID | . | ZigBee protocol implementation in devices . | System-on-Chip (SoC) . | functions and implementation are handled in a single chip | . | Network Co-processor (NXP) . | similar to SoC | functions are handled through a serial interface (i.e. UART) | . | Microcontroller and Transreceiver . | microcontroller handles functions and implementation of ZigBee stack | Transreceiver manages PHY and MAC layer | . | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#1-zigbee-internals",
    "relUrl": "/pages/guides/radio/zigbee.html#1-zigbee-internals"
  },"285": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "2. ZigBee pentest objectives",
    "content": ". | Intercept (capture) traffic | Replay attack . | requires lack of CRC verification implementation | . | Jam signals | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#2-zigbee-pentest-objectives",
    "relUrl": "/pages/guides/radio/zigbee.html#2-zigbee-pentest-objectives"
  },"286": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "3. ZigBee radio development module (hardware)",
    "content": ". | Contains a combination of digital logic circuitry with analog circuits . | Xbee . | plug-in Xbee to analysis computer | run XCTU utility . | press ‘Search Radio modules’ | Select the ports to scan . | usbserial-* | . | Set port parameters . | baud rate 2400 and 9600 | 8 data bits, no parity bit, and one stop bit (8N1) | Flow control is None | . | identifies the MAC address of the radio device connected to usbserial-* port | XCTU allows to change various properties of the radio device (Xbee) . | set the channel (i.e. 16) | . | . | . | Arduino . | plug-in Xbee to Arduino board | paste the vulnerable code Xbee_Password_Core . | a simple authentication app over the ZigBee network | . | flash the code into Arduino board | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#3-zigbee-radio-development-module-hardware",
    "relUrl": "/pages/guides/radio/zigbee.html#3-zigbee-radio-development-module-hardware"
  },"287": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "4. ZigBee radio analysis (hardware)",
    "content": ". | KillerBee . | open-source toolkit for ZigBee communication analysis | supports various ZigBee sniffing hardware (i.e. Atmel RzRaven USB Stick) | . | Atmel RzRaven USB Stick . | flash the KillerBee firmware on to RzRaven using AVR Dragon over JTAG interface | plug-in RzRaven to analysis computer . | download and setup KillerBee on analysis computer . cd killerbee/tools ./zbid . | it will find RzRaven device with the Serial number FFFF… | . | Identify the channel ID of the target device (Xbee) is operating . | zbstumbler from KillerBee toolkit ./zbstumbler –v . | when a frame is received for a beacon request, it means channel is found . | . | Sniffing traffic (actually channel) . | zbdump from KillerBee toolkit ./zbdump -c &lt;CHANNEL_ID&gt; - w dump.pcap . | . | Generate traffic . | open serial monitor in Arduino | i.e. try authenticating with target device | . | Real-time analysis rather than dumping to a file . | zbwireshark from KillerBee toolkit ./zbwireshark-c &lt;CHANNEL_ID&gt; . | . | Attify ZigBee Framework . | a GUI toolkit built on top of KillerBee | set channel ID to capture, number of packets to capture, capture file location | generate traffic (press any button of the device) | . | Replaying packets (Replay attack) . | run Attify ZigBee Framework | set channel ID, delay (to 0.4), pcap file location, number of packets to replay | observe that device will function without user interaction | . | . ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html#4-zigbee-radio-analysis-hardware",
    "relUrl": "/pages/guides/radio/zigbee.html#4-zigbee-radio-analysis-hardware"
  },"288": {
    "doc": "0x02 - Analyzing ZigBee",
    "title": "0x02 - Analyzing ZigBee",
    "content": " ",
    "url": "http://localhost:4000/pages/guides/radio/zigbee.html",
    "relUrl": "/pages/guides/radio/zigbee.html"
  },"289": {
    "doc": "Home",
    "title": "Home",
    "content": "# Home This site details the resources available at NSE's Cyber Security Lab and other information relating to penetration testing. Looking for a device to hack for your Bachelor's or Master's thesis? Have a look at the [IoT devices](/pages/lab-equipment/iot-devices.html) we already have to see if any interest you. Already have a target but unsure on how to start your thesis? Look at the [thesis guidelines](pages/thesis_guidelines/guidelines.html) document. ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
}
